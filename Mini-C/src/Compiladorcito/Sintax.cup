package Compiladorcito;

import java_cup.runtime.*;
import java.util.ArrayList;
import java.util.*;
import java.io.*;

parser code {:
    ArrayList gramas = new ArrayList();
    public Nodo raiz;
    public int cont = 0;
    public int maximo(){
    int a=5;
    return a;
}
    ArrayList errores=new ArrayList();
    public Symbol s;
    @Override
    public void syntax_error (Symbol s){
        if(s.left==-1){
        }else{
                errores.add("Syntax error en la línea: " + (s.left) + " , columna: " +(s.right)+ " con el símbolo = "+(s.value));
    }
}
    @Override
    public void unrecovered_syntax_error(Symbol s){
    if(s.left==-1){
    }else{
        errores.add("Error desconocido, por favor revise la linea: " + (s.left ) + " y columna:  " + (s.right )+ "Con simbolo: "+s.value);
    }    
    }
    public Symbol getS(){
        return this.s;
    }
:} ;



terminal tkn_opadicion,tkn_opmulti, tkn_break, tkn_opmod ;
terminal tkn_oprel ,tkn_main, tkn_intp, tkn_charp, tkn_void;
terminal tkn_if ,tkn_while, tkn_else,tkn_parentesisiz ,tkn_parentesisde ,tkn_llaveiz ,tkn_llaveder ; 
terminal tkn_and,tkn_or,tkn_for,tkn_return, tkn_printf, tkn_scanf, tkn_increment, tkn_decrement;
terminal tkn_dospuntos,tkn_int ,tkn_char, tkn_id, tkn_puntocoma, tkn_ternario, tkn_num, tkn_coma;
terminal tkn_ampersand, tkn_cadena, tkn_caracter;


non terminal Nodo WHILE, IF, FOR,CONDICION, ELSE, CONDICIONP, TIPO, CONTADOR, SCANF, FUNCION, PROTOTIPO, 
    PARAMS, ARGSPARAMS, ARGS, EXPR, ASIGN, ITERADOR, ASIGNACION, DECLASIGN;
non terminal Nodo INICIO,BLOQUE,PRINTF, FUNCIONES, DECLR, PROTOFUN, TIPOAPUNT, TERNARIO, FUNCIONS , FUNCIONC;

precedence left tkn_opadicion;
precedence left tkn_opmulti, tkn_opmod;

start with INICIO;

INICIO::= FUNCIONES:b
        {:
        Nodo nodo = new Nodo("PROGRAMA",parser.cont);
        parser.cont++;
        nodo.addHijo(b);
        parser.raiz=nodo;
        :}
;

FUNCIONES::= PROTOTIPO:i FUNCIONES:f
        {:
                Nodo nodo = new Nodo("CUERPO",parser.cont);
                parser.cont++;
                nodo.addHijo(i);
                nodo.addHijo(f);
                RESULT=nodo;
        :}
            |FUNCION:i FUNCIONES:f
             {:
                Nodo nodo = new Nodo("FUNCION COMPLEJA",parser.cont);
                parser.cont++;
                nodo.addHijo(i);
                nodo.addHijo(f);
                RESULT=nodo;
            :}

            |ASIGN:i FUNCIONES:f
             {:
                Nodo nodo = new Nodo("VARGLOBALES",parser.cont);
                parser.cont++;
                nodo.addHijo(i);
                nodo.addHijo(f);
                RESULT=nodo;
            :}

            | {:
                    Nodo node = new Nodo("VACIO",parser.cont);
                    parser.cont++;
                    RESULT = node;
             :}
;

PROTOTIPO::= PROTOFUN:i tkn_puntocoma
            {:
                Nodo nodo = new Nodo("PROTOTIPO",parser.cont);
                parser.cont++;
                nodo.addHijo(i);
                RESULT=nodo;
            :}
;

FUNCION::= PROTOFUN:p tkn_llaveiz BLOQUE:j tkn_return EXPR:e tkn_puntocoma tkn_llaveder
           {:parser.gramas.add("Una Funcion Reconocida satisfactoriamente");
                Nodo nodo = new Nodo("FUNCION",parser.cont);
                parser.cont++;
                nodo.addHijo(p);
                nodo.addHijo(j);
                nodo.addHijo(e);
                RESULT=nodo;
          :}
;

PROTOFUN::= DECLR:d tkn_parentesisiz PARAMS:p tkn_parentesisde
            {:
                Nodo nodo = new Nodo("PROTOFUN",parser.cont);
                parser.cont++;
                nodo.addHijo(d);
                nodo.addHijo(p);
                RESULT=nodo;
            :}
;

DECLR::= TIPO:t tkn_id:k 
        {:
            Nodo nodo = new Nodo("DECL",parser.cont);
                parser.cont++;
                nodo.addHijo(t);
                nodo.addHijo(new Nodo(k.toString(),parser.cont));
                parser.cont++;
                RESULT=nodo;
        :}
         | error tkn_id {:parser.errores.add("Tipo de dato incorrecto\n");:}
;

ASIGNACION::= TIPO tkn_id tkn_oprel | tkn_id tkn_oprel | TIPO error tkn_oprel {:parser.errores.add("Se esperaba un identificador en bloque for\n");:}
;

DECLASIGN::= DECLR:d tkn_oprel:id EXPR:e tkn_coma DECLASIGN:a
            {:
                Nodo nodo = new Nodo("ASIGNACION",parser.cont);
                parser.cont++;
                nodo.addHijo(d);
                nodo.addHijo(new Nodo(id.toString(),parser.cont));
                parser.cont++;
                nodo.addHijo(e);
                nodo.addHijo(a);
                RESULT=nodo;
            :}
            | DECLR:d tkn_oprel:id EXPR:e
            {:
                Nodo nodo = new Nodo("ASIGNACION",parser.cont);
                parser.cont++;
                nodo.addHijo(d);
                nodo.addHijo(new Nodo(id.toString(),parser.cont));
                parser.cont++;
                nodo.addHijo(e);
                RESULT=nodo;
             :}
            | DECLR:d tkn_coma DECLASIGN:e
            {:
                Nodo nodo = new Nodo("DECLARACION",parser.cont);
                parser.cont++;
                nodo.addHijo(d);
                nodo.addHijo(e);
                RESULT=nodo;
            :}

            | tkn_id tkn_coma DECLASIGN:d
            {:
                Nodo nodo = new Nodo("DECLARACION",parser.cont);
                parser.cont++;
                nodo.addHijo(d);
                RESULT=nodo;
            :}
            | tkn_id error DECLASIGN {:parser.errores.add("Se esperaba el simbolo ',' en declaración o en argumentos en llamado de la función \n");:}
            | tkn_id tkn_oprel:id EXPR:e tkn_coma DECLASIGN:s
             {:
                Nodo nodo = new Nodo("ASIGNACION",parser.cont);
                parser.cont++;
                nodo.addHijo(new Nodo(id.toString(),parser.cont));
                parser.cont++;
                nodo.addHijo(e);
                nodo.addHijo(s);
                RESULT=nodo;
            :}
            | tkn_id tkn_oprel:id EXPR:e
            {:
                Nodo nodo = new Nodo("ASIGNACION",parser.cont);
                parser.cont++;
                nodo.addHijo(new Nodo(id.toString(),parser.cont));
                parser.cont++;
                nodo.addHijo(e);
                RESULT=nodo;
            :}
            | tkn_id error EXPR {:parser.errores.add("Se esperaba operador relacional en declaración \n");:}
            | DECLR:d
            {:
                Nodo nodo = new Nodo("DECLARACION",parser.cont);
                parser.cont++;
                nodo.addHijo(d);
                RESULT=nodo;
            :} 
            | DECLR:d tkn_oprel:id tkn_id tkn_parentesisiz ARGS:a tkn_parentesisde 
            {:
                Nodo nodo= new Nodo("LLAMADO",parser.cont);
                parser.cont++;
                nodo.addHijo(d);
                nodo.addHijo(new Nodo(id.toString(),parser.cont));
                parser.cont++; 
                nodo.addHijo(a);
                RESULT=nodo;              
            :}
            | tkn_id:id1 tkn_oprel:id tkn_id tkn_parentesisiz ARGS:a tkn_parentesisde
            {:
                Nodo nodo = new Nodo("LLAMADO",parser.cont);
                parser.cont++;
                nodo.addHijo(new Nodo(id1.toString(),parser.cont));
                parser.cont++;
                nodo.addHijo(new Nodo(id.toString(),parser.cont));
                parser.cont++;
                nodo.addHijo(a);
                RESULT=nodo;
            :}
            | DECLR tkn_oprel tkn_id tkn_parentesisiz error tkn_parentesisde {:parser.errores.add("Argumentos en llamado de función erroneos \n");:}
            | tkn_id tkn_oprel tkn_id tkn_parentesisiz error tkn_parentesisde {:parser.errores.add("Argumentos en llamado de función erroneos \n");:}
            | tkn_id tkn_parentesisiz ARGS:a tkn_parentesisde
            {:
                Nodo nodo= new Nodo("LLAMADO",parser.cont);
                parser.cont++;
                nodo.addHijo(a);
                RESULT=nodo;              
            :}
            | tkn_id tkn_parentesisiz ARGS error {:parser.errores.add("Se esperaba un ')' en llamado de la funcion \n");:}
;


ASIGN::= DECLASIGN:d tkn_puntocoma 
         {:
            Nodo nodo = new Nodo("ASIGNACIONES",parser.cont);
            parser.cont++;
            nodo.addHijo(d);
            RESULT=nodo;
        :}
        |  error tkn_puntocoma {:parser.errores.add("Declaracion de variable incorrecta \n");:}
;

PARAMS::= TIPO:t tkn_coma PARAMS:p
         {:parser.gramas.add("Params reconocido");
            Nodo nodo = new Nodo("PARAMS",parser.cont);
            parser.cont++;
            nodo.addHijo(t)     ;           
            nodo.addHijo(p);
            RESULT=nodo;
         :}
         | DECLR:t tkn_coma PARAMS:p
         {:parser.gramas.add("Params reconocido");
            Nodo nodo = new Nodo("PARAMS",parser.cont);
            parser.cont++;
            nodo.addHijo(t);               
            nodo.addHijo(p);
            RESULT=nodo;
         :}
         | DECLR:t
         {:parser.gramas.add("Params reconocido");
            Nodo nodo = new Nodo("PARAMS",parser.cont);
            parser.cont++;
            nodo.addHijo(t);                
            RESULT=nodo;
         :}
         | TIPO:t
         {:parser.gramas.add("Params reconocido");
            Nodo nodo = new Nodo("PARAMS",parser.cont);
            parser.cont++;
            nodo.addHijo(t);                
            RESULT=nodo;
         :}
         |{:
            Nodo node = new Nodo("VACIO",parser.cont);
            parser.cont++;
            RESULT = node;
         :}
           
;

TERNARIO ::= tkn_parentesisiz CONDICION tkn_parentesisde tkn_ternario tkn_cadena tkn_dospuntos tkn_cadena
;

IF::= tkn_if tkn_parentesisiz CONDICION:c tkn_parentesisde tkn_llaveiz BLOQUE:j tkn_llaveder ELSE:e
        {:parser.gramas.add("Funcion if reconocida");
            Nodo nodo = new Nodo("IF",parser.cont);
            parser.cont++;
            nodo.addHijo(c);
            nodo.addHijo(j);
            nodo.addHijo(e);
            RESULT=nodo;
        :} 
     | tkn_if tkn_parentesisiz CONDICION tkn_parentesisde error BLOQUE tkn_llaveder ELSE {:parser.errores.add("Llave de apertura '{' ausente en bloque if\n");:}
     | tkn_if error CONDICION tkn_parentesisde tkn_llaveiz BLOQUE tkn_llaveder ELSE {:parser.errores.add("Se esperaba el simbolo '(' en bloque if\n");:}
     | tkn_if tkn_parentesisiz CONDICION error tkn_llaveiz BLOQUE tkn_llaveder ELSE {:parser.errores.add("Se esperaba el simbolo ')' en bloque if\n");:}
;

ELSE ::= tkn_else tkn_llaveiz BLOQUE:j tkn_llaveder
        {:parser.gramas.add("Else reconocido");
            Nodo nodo = new Nodo("ELSE",parser.cont);
            parser.cont++;
            nodo.addHijo(j);
            RESULT=nodo;
        :} 
        | tkn_else IF:i
        {:parser.gramas.add("Else if reconocido");
            Nodo nodo = new Nodo("ELSE IF",parser.cont);
            parser.cont++;
            nodo.addHijo(i);
            RESULT=nodo;
        :}
        | tkn_else error BLOQUE tkn_llaveder {:parser.errores.add("Se esperaba el simbolo '{' en else\n");:} 
        |{:
            Nodo node = new Nodo("VACIO",parser.cont);
            parser.cont++;
            RESULT = node;
         :}
;

FOR ::= tkn_for tkn_parentesisiz ASIGNACION EXPR:e tkn_puntocoma CONDICION:c tkn_puntocoma tkn_id ITERADOR tkn_parentesisde tkn_llaveiz BLOQUE:j tkn_llaveder
        {:parser.gramas.add("Funcion FOR reconocida");
                Nodo nodo = new Nodo("FOR",parser.cont);
                parser.cont++;
                nodo.addHijo(e);
                nodo.addHijo(c);
                nodo.addHijo(j);
                RESULT=nodo;
        :}  
        | tkn_for error ASIGNACION EXPR tkn_puntocoma CONDICION tkn_puntocoma tkn_id ITERADOR tkn_parentesisde tkn_llaveiz BLOQUE tkn_llaveder {:parser.errores.add("Se esperaba un parentesis de apertura '(' for\n");:}
        | tkn_for tkn_parentesisiz ASIGNACION EXPR tkn_puntocoma CONDICION tkn_puntocoma tkn_id ITERADOR error tkn_llaveiz BLOQUE tkn_llaveder {:parser.errores.add("Se esperaba un parentesis de cierre ')' for\n");:}
        | tkn_for tkn_parentesisiz error EXPR tkn_puntocoma CONDICION tkn_puntocoma tkn_id ITERADOR tkn_parentesisde tkn_llaveiz BLOQUE tkn_llaveder {:parser.errores.add("Asignacion o declaracion incorrecta en bloque for\n");:}
        | tkn_for tkn_parentesisiz ASIGNACION EXPR tkn_puntocoma CONDICION tkn_puntocoma tkn_id error tkn_parentesisde tkn_llaveiz BLOQUE tkn_llaveder {:parser.errores.add("Iteracion asuente en ciclo for\n");:}
;

WHILE ::= tkn_while tkn_parentesisiz CONDICION:c tkn_parentesisde tkn_llaveiz BLOQUE:j tkn_llaveder
        {:parser.gramas.add("Funcion WHILE reconocida");
            Nodo nodo = new Nodo("WHILE",parser.cont);
            parser.cont++;
            nodo.addHijo(c);
            nodo.addHijo(j);
            RESULT=nodo;
         :} 
        | tkn_while tkn_parentesisiz CONDICION tkn_parentesisde error BLOQUE tkn_llaveder {:parser.errores.add("Se esperaba un '{' en bloque while\n");:}
        | tkn_while tkn_parentesisiz CONDICION error tkn_llaveiz BLOQUE tkn_llaveder {:parser.errores.add("Se esperaba un ')' en bloque while\n");:}
        | tkn_while error CONDICION tkn_parentesisde tkn_llaveiz BLOQUE tkn_llaveder {:parser.errores.add("Se esperaba un '(' en bloque while\n");:}
      
;

PRINTF ::= tkn_printf tkn_parentesisiz tkn_cadena tkn_coma tkn_id:id tkn_parentesisde tkn_puntocoma
            {:parser.gramas.add("Funcion PRINTF reconocida");
                Nodo nodo = new Nodo("PRINT F",parser.cont);
                parser.cont++;
                nodo.addHijo(new Nodo(id.toString(),parser.cont));
                parser.cont++;
                RESULT=nodo;
            :}
        |  tkn_printf tkn_parentesisiz tkn_cadena tkn_parentesisde tkn_puntocoma
            {:parser.gramas.add("Funcion PRINTF reconocida");
                Nodo nodo = new Nodo("PRINT F",parser.cont);
                parser.cont++;
                RESULT=nodo;
            :}
        |  tkn_printf tkn_parentesisiz tkn_cadena error tkn_id tkn_parentesisde tkn_puntocoma {:parser.errores.add("coma ',' ausente en la funcion printf");:}
        |  tkn_printf tkn_parentesisiz tkn_cadena tkn_coma error tkn_parentesisde tkn_puntocoma {:parser.errores.add("identificador ausente en la funcion printf");:}
        |  tkn_printf tkn_parentesisiz tkn_cadena tkn_coma tkn_id error tkn_puntocoma {:parser.errores.add("parentesis de cierre ')' ausente en la funcion printf");:}
        |  tkn_printf tkn_parentesisiz tkn_cadena tkn_coma tkn_id tkn_parentesisde error {:parser.errores.add("se esperaba el simbolo ';' en la funcion printf");:}
        |  tkn_printf error tkn_cadena tkn_coma tkn_id tkn_parentesisde tkn_puntocoma {:parser.errores.add("se esperaba el simbolo '(' en la funcion printf");:}
        |  tkn_printf tkn_parentesisiz error tkn_coma tkn_id tkn_parentesisde tkn_puntocoma {:parser.errores.add("conststr ausente en la funcion printf");:}

;

SCANF::= tkn_scanf tkn_parentesisiz tkn_cadena tkn_coma tkn_ampersand tkn_id:id tkn_parentesisde tkn_puntocoma
        {:  parser.gramas.add("Funcion SCANF reconocida");
            Nodo nodo = new Nodo("SCANF",parser.cont);
            parser.cont++;
            nodo.addHijo(new Nodo(id.toString(),parser.cont));
            parser.cont++;
            RESULT=nodo;
        :}
         | tkn_scanf tkn_parentesisiz tkn_cadena tkn_coma error tkn_id tkn_parentesisde tkn_puntocoma {:parser.errores.add("Puntero a identificador '&' ausente en la funcion scanf");:}
         | tkn_scanf tkn_parentesisiz tkn_cadena tkn_coma tkn_ampersand error tkn_parentesisde tkn_puntocoma {:parser.errores.add("identificador ausente en la funcion scanf");:}
         | tkn_scanf tkn_parentesisiz tkn_cadena tkn_coma tkn_ampersand tkn_id error tkn_puntocoma {:parser.errores.add("parentesis de cierre ')' ausente en la funcion scanf");:}
         | tkn_scanf error tkn_cadena tkn_coma tkn_ampersand tkn_id tkn_parentesisde tkn_puntocoma {:parser.errores.add("parentesis de apertura '(' ausente en la funcion scanf");:}
         | tkn_scanf tkn_parentesisiz error tkn_coma tkn_ampersand tkn_id tkn_parentesisde tkn_puntocoma {:parser.errores.add("conststr ausente en la funcion scanf");:}

;

BLOQUE ::=  IF:i BLOQUE:s
            {:
                Nodo nodo = new Nodo("BLOQUE",parser.cont);
                parser.cont++;
                nodo.addHijo(i);
                nodo.addHijo(s);
                RESULT=nodo;
            :}
            | FOR:i BLOQUE:s
            {:
                Nodo nodo = new Nodo("BLOQUE",parser.cont);
                parser.cont++;
                nodo.addHijo(i);
                nodo.addHijo(s);
                RESULT=nodo;
            :}  
            | WHILE:i BLOQUE:s
            {:
                Nodo nodo = new Nodo("BLOQUE",parser.cont);
                parser.cont++;
                nodo.addHijo(i);
                nodo.addHijo(s);
                RESULT=nodo;
            :}  
            | ASIGN:i BLOQUE:s
            {:
                Nodo nodo = new Nodo("BLOQUE",parser.cont);
                parser.cont++;
                nodo.addHijo(i);
                nodo.addHijo(s);
                RESULT=nodo;
            :}  
            | SCANF:i BLOQUE:s
            {:
                Nodo nodo = new Nodo("BLOQUE",parser.cont);
                parser.cont++;
                nodo.addHijo(i);
                nodo.addHijo(s);
                RESULT=nodo;
            :}  
            | PRINTF:i BLOQUE:s
            {:
                Nodo nodo = new Nodo("BLOQUE",parser.cont);
                parser.cont++;
                nodo.addHijo(i);
                nodo.addHijo(s);
                RESULT=nodo;
            :}  
            | CONTADOR:i BLOQUE:s
            {:
                Nodo nodo = new Nodo("BLOQUE",parser.cont);
                parser.cont++;
                nodo.addHijo(i);
                nodo.addHijo(s);
                RESULT=nodo;
            :}  
            |
            {:
                Nodo node = new Nodo("VACIO",parser.cont);
                parser.cont++;
                node.addHijo(new Nodo("VACIO",parser.cont++));
                parser.cont++;
                RESULT = node;
            :}
            
;


ITERADOR::= tkn_increment
        {: 
            Nodo nodo = new Nodo("ITERADOR",parser.cont);
            parser.cont++;
            RESULT=nodo;
        :}
        |tkn_decrement
        {: 
            Nodo nodo = new Nodo("ITERADOR",parser.cont);
            parser.cont++;
            RESULT=nodo;
        :}
        | tkn_opadicion tkn_oprel EXPR
        {: 
            Nodo nodo = new Nodo("ITERADOR",parser.cont);
            parser.cont++;
            RESULT=nodo;
        :}
        | tkn_opmulti tkn_oprel EXPR
        {: 
            Nodo nodo = new Nodo("ITERADOR",parser.cont);
            parser.cont++;
            RESULT=nodo;
        :}

;

CONDICION ::= CONDICIONP:s tkn_and:id CONDICION:o
                {:
                Nodo nodo= new Nodo("CONDICION",parser.cont);
                parser.cont++;
                nodo.addHijo(s);
                nodo.addHijo(new Nodo(id.toString(),parser.cont));
                parser.cont++;                
                nodo.addHijo(o);
                RESULT=nodo;
                :}
            | CONDICIONP:s tkn_or:id CONDICION:o
            {:
                Nodo nodo= new Nodo("CONDICION",parser.cont);
                parser.cont++;
                nodo.addHijo(s);
                nodo.addHijo(new Nodo(id.toString(),parser.cont));
                parser.cont++; 
                nodo.addHijo(o);
                RESULT=nodo;              
            :}

            | tkn_parentesisiz CONDICIONP:c tkn_parentesisde tkn_and:id CONDICION:c1
            {:
                Nodo nodo= new Nodo("CONDICION",parser.cont);
                parser.cont++;
                nodo.addHijo(c);
                nodo.addHijo(new Nodo(id.toString(),parser.cont));
                parser.cont++; 
                nodo.addHijo(c1);
                RESULT=nodo;              
            :}
            | tkn_parentesisiz CONDICIONP:c tkn_parentesisde tkn_or:id CONDICION:c1 
            {:
                Nodo nodo= new Nodo("CONDICION",parser.cont);
                parser.cont++;
                nodo.addHijo(c);
                nodo.addHijo(new Nodo(id.toString(),parser.cont));
                parser.cont++; 
                nodo.addHijo(c1);
                RESULT=nodo;              
            :}
            | tkn_parentesisiz CONDICIONP:c tkn_parentesisde
             {:
                Nodo nodo= new Nodo("CONDICION",parser.cont);
                parser.cont++;
                nodo.addHijo(c);
                RESULT=nodo;              
            :}
            | CONDICIONP:c
             {:
                Nodo nodo= new Nodo("CONDICION",parser.cont);
                parser.cont++;
                nodo.addHijo(c);
                RESULT=nodo;              
            :}

            | error {:parser.errores.add("Operador relacional ausente en condicion");:}
            | error tkn_and CONDICION {:parser.errores.add("Expresion erronea o ausente en condicion");:}

;

CONDICIONP::= EXPR:e tkn_oprel:id EXPR:f
             {:
                Nodo nodo= new Nodo("CONDICIONP",parser.cont);
                parser.cont++;
                nodo.addHijo(e);
                nodo.addHijo(new Nodo(id.toString(),parser.cont));
                parser.cont++;                
                nodo.addHijo(f);
                RESULT=nodo;
            :}

;

TIPO::= tkn_char
        {:
            Nodo nodo = new Nodo("char",parser.cont);
                parser.cont++;
                RESULT=nodo;
        :}

        |TIPOAPUNT:ap
        {:
            Nodo nodo = new Nodo("apun",parser.cont);
                parser.cont++;
                nodo.addHijo(ap);
                RESULT=nodo;
        :}
        |tkn_int
        {:
            Nodo nodo = new Nodo("int",parser.cont);
                parser.cont++;
                RESULT=nodo;
        :}
        |tkn_void
        {:
            Nodo nodo = new Nodo("void",parser.cont);
                parser.cont++;
                RESULT=nodo;
        :}
;


TIPOAPUNT ::= tkn_int tkn_opmulti
        {:
            Nodo nodo = new Nodo("int*",parser.cont);
                parser.cont++;
                RESULT=nodo;
        :}
        | tkn_char tkn_opmulti
        {:
            Nodo nodo = new Nodo("char*",parser.cont);
                parser.cont++;
                RESULT=nodo;
        :}
;

EXPR ::= EXPR:s tkn_opadicion:id EXPR:o
         {:
                Nodo nodo= new Nodo("expr",parser.cont);
                parser.cont++;
                nodo.addHijo(s);
                nodo.addHijo(new Nodo(id.toString(),parser.cont));
                parser.cont++;                
                nodo.addHijo(o);
                RESULT=nodo;
            :}

        
        | EXPR:s tkn_opmulti:id EXPR:o
         {:
                Nodo nodo= new Nodo("expr",parser.cont);
                parser.cont++;
                nodo.addHijo(s);
                nodo.addHijo(new Nodo(id.toString(),parser.cont));
                parser.cont++;                
                nodo.addHijo(o);
                RESULT=nodo;
                :}
        | EXPR:s tkn_opmod:id EXPR:o 
            {:
                Nodo nodo= new Nodo("expr",parser.cont);
                parser.cont++;
                nodo.addHijo(s);
                nodo.addHijo(new Nodo(id.toString(),parser.cont));
                parser.cont++;                
                nodo.addHijo(o);
                RESULT=nodo;
                :}
        | tkn_parentesisiz EXPR tkn_parentesisde
                {:
                Nodo nodo = new Nodo("EXPR",parser.cont);
                parser.cont++;
                RESULT=nodo;
                :}
        | tkn_id:id {:
                Nodo nodo = new Nodo(id.toString(),parser.cont);
                parser.cont++;
                RESULT=nodo;
                :}
        | tkn_num:num
                {:
                Nodo nodo = new Nodo(num.toString(),parser.cont);
                parser.cont++;
                RESULT=nodo;
                :}
        | tkn_caracter: car
            {:
                Nodo nodo = new Nodo(car.toString(),parser.cont);
                parser.cont++;
                RESULT=nodo;
            :}
        | error {:parser.errores.add("Expresión incorrecta");:}

;
ARGS::= ARGSPARAMS:a
         {:
                Nodo nodo = new Nodo("ARGSPARAM",parser.cont);
                parser.cont++;
                nodo.addHijo(a);
                RESULT=nodo;
            :}
        |{:
            Nodo node = new Nodo("VACIO",parser.cont);
            parser.cont++;
            RESULT = node;
         :}
;

ARGSPARAMS ::= tkn_id:id tkn_coma ARGSPARAMS:a
             {:
                Nodo nodo= new Nodo("ARGS",parser.cont);
                parser.cont++;
                nodo.addHijo(new Nodo(id.toString(),parser.cont));
                parser.cont++; 
                nodo.addHijo(a);
                RESULT=nodo;              
            :}
            | tkn_id:id
             {:
                Nodo nodo= new Nodo("ARGS",parser.cont);
                parser.cont++;
                nodo.addHijo(new Nodo(id.toString(),parser.cont));
                parser.cont++; 
                RESULT=nodo;              
            :}
;

CONTADOR ::= tkn_id ITERADOR tkn_puntocoma
             | tkn_id error tkn_puntocoma {:parser.errores.add("Iterador en identificador incorrecta");:}
;