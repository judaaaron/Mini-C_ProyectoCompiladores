package Compiladorcito;

import java_cup.runtime.*;
import java.util.ArrayList;
import java.util.*;
import java.io.*;

parser code {:
     ArrayList gramas = new ArrayList();
    public int cont = 0;
    public int maximo(){
    int a=5;
    return a;
}
    ArrayList errores=new ArrayList();
    public Symbol s;
    @Override
    public void syntax_error (Symbol s){
        if(s.left==-1){
        }else{
                errores.add("Syntax error en la línea: " + (s.left) + " , columna: " +(s.right)+ " con el símbolo = "+(s.value));
    }
}
    @Override
    public void unrecovered_syntax_error(Symbol s){
    if(s.left==-1){
    }else{
        errores.add("Error desconocido, por favor revise la linea: " + (s.left ) + " y columna:  " + (s.right )+ "Con simbolo: "+s.value);
    }    
    }
    public Symbol getS(){
        return this.s;
    }
:} ;



terminal tkn_opadicion,tkn_opmulti, tkn_break ;
terminal tkn_oprel ,tkn_main, tkn_igual, tkn_intp, tkn_charp;
terminal tkn_digitos,tkn_if ,tkn_while, tkn_else,tkn_parentesisiz ,tkn_parentesisde ,tkn_llaveiz ,tkn_llaveder ; 
terminal tkn_and,tkn_or,tkn_for,tkn_return, tkn_printf, tkn_scanf, tkn_increment, tkn_decrement;
terminal tkn_dospuntos,tkn_int ,tkn_char, tkn_id, tkn_puntocoma, tkn_ternario, tkn_num, tkn_coma, tkn_porcentajed, tkn_porcentajec, tkn_letra;
terminal tkn_comilla, tkn_comillas, tkn_ampersand, tkn_cadena, tkn_caracter;


non terminal INICIO, WHILE, IF, FOR, DECLARACION, BLOQUE, CONDICION, EXPRESION, ELSE, CONDICIONP, OPCONDICION, VALOR, TIPO, 
    IDINT, PRINTF, CONSTSTR, TERNARIO, CONTADOR, SCANF, FUNCION, FUNCIONPARAMS, DECLAPARAM, PROTOTIPO, MAIN, PROTOPARAMS, 
    FUNCIONES, RETURN, PARAMS, TIPOS, LLAMADO, CALLBACK, ARGSPARAMS, ARGS;

start with INICIO;

MAIN ::=  tkn_int tkn_main tkn_parentesisiz tkn_parentesisde tkn_llaveiz BLOQUE tkn_return tkn_num tkn_puntocoma tkn_llaveder FUNCIONES
;

DECLARACION::= TIPO IDINT tkn_puntocoma
;

IDINT::= tkn_id tkn_coma IDINT 
        | tkn_id 
        | tkn_id tkn_igual tkn_num tkn_coma IDINT 
        | tkn_id tkn_igual tkn_num 
        | tkn_id tkn_igual tkn_caracter tkn_coma IDINT
        | tkn_id tkn_igual tkn_caracter
        |
;

FUNCIONES::= FUNCION FUNCIONES:s
            |   
;

INICIO::= PROTOTIPO INICIO
            | MAIN   
;

FUNCIONPARAMS::= DECLAPARAM
            |
;

PROTOPARAMS::= PARAMS
            |
;

ARGS::= ARGSPARAMS
            |
;

PARAMS::= TIPO tkn_id tkn_coma PARAMS| TIPO tkn_coma PARAMS | TIPO | TIPO tkn_id
;

DECLAPARAM::= TIPO tkn_id tkn_coma DECLAPARAM| TIPO tkn_id
;

FUNCION::= TIPO tkn_id tkn_parentesisiz FUNCIONPARAMS tkn_parentesisde tkn_llaveiz BLOQUE tkn_return RETURN tkn_puntocoma tkn_llaveder 
;

ARGSPARAMS ::= tkn_id tkn_coma ARGSPARAMS| tkn_id
;

LLAMADO::= TIPO tkn_id tkn_igual tkn_id tkn_parentesisiz ARGS tkn_parentesisde tkn_puntocoma 
        | tkn_id tkn_parentesisiz ARGS tkn_parentesisde tkn_puntocoma
;

PROTOTIPO::= TIPO tkn_id tkn_parentesisiz PROTOPARAMS tkn_parentesisde tkn_puntocoma | DECLARACION
;

IF::= tkn_if tkn_parentesisiz CONDICION tkn_parentesisde tkn_llaveiz BLOQUE tkn_llaveder ELSE 
;

ELSE ::= tkn_else tkn_llaveiz BLOQUE tkn_llaveder
        | tkn_else IF
        |
;

FOR ::= tkn_for tkn_parentesisiz tkn_int tkn_id tkn_igual tkn_num tkn_puntocoma CONDICION tkn_puntocoma tkn_id tkn_increment tkn_parentesisde tkn_llaveiz BLOQUE tkn_llaveder
;

WHILE ::= tkn_while tkn_parentesisiz CONDICION tkn_parentesisde tkn_llaveiz BLOQUE tkn_llaveder
;

BLOQUE ::= WHILE BLOQUE:s
            | FOR BLOQUE:s
            | IF BLOQUE:s
            | DECLARACION:i BLOQUE:s
            | PRINTF BLOQUE:s
            | TERNARIO BLOQUE:s
            | CONTADOR BLOQUE:s
            | SCANF BLOQUE:s
            | LLAMADO BLOQUE:s
            |
;

CONDICION ::= CONDICIONP tkn_and CONDICION
            | CONDICIONP tkn_or CONDICION
            | tkn_parentesisiz CONDICIONP tkn_parentesisde tkn_and CONDICION 
            | tkn_parentesisiz CONDICIONP tkn_parentesisde tkn_or CONDICION 
            | tkn_parentesisiz CONDICIONP tkn_parentesisde
            | CONDICIONP
;

CONDICIONP::= VALOR OPCONDICION VALOR
;

OPCONDICION::= tkn_oprel 
                | tkn_igual 
;

VALOR::= tkn_digitos 
                | tkn_num 
                | tkn_id               
;

TIPO::= tkn_char
        |tkn_intp
        |tkn_charp
        |tkn_int
        | error {:parser.errores.add("No se puso un tipo valido de funcion");:}
;



PRINTF ::= tkn_printf tkn_parentesisiz tkn_cadena tkn_coma tkn_id tkn_parentesisde tkn_puntocoma
        | tkn_printf tkn_parentesisiz tkn_cadena tkn_parentesisde tkn_puntocoma
;

TERNARIO ::=  CONDICION tkn_ternario BLOQUE tkn_dospuntos BLOQUE tkn_puntocoma
;

CONTADOR ::= tkn_id tkn_increment tkn_puntocoma | tkn_id tkn_decrement tkn_puntocoma
;

SCANF::= tkn_scanf tkn_parentesisiz CONSTSTR tkn_coma tkn_ampersand tkn_id tkn_parentesisde tkn_puntocoma
;

RETURN::= tkn_id
          | tkn_num
          |tkn_caracter
;
