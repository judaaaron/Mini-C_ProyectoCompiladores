package Compiladorcito;

import java_cup.runtime.*;
import java.util.ArrayList;
import java.util.*;
import java.io.*;

parser code {:
    ArrayList gramas = new ArrayList();
    public Nodo raiz;
    public int cont = 0;
    public int maximo(){
    int a=5;
    return a;
}
    ArrayList errores=new ArrayList();
    public Symbol s;
    @Override
    public void syntax_error (Symbol s){
        if(s.left==-1){
        }else{
                errores.add("Syntax error en la línea: " + (s.left) + " , columna: " +(s.right)+ " con el símbolo = "+(s.value));
    }
}
    @Override
    public void unrecovered_syntax_error(Symbol s){
    if(s.left==-1){
    }else{
        errores.add("Error desconocido, por favor revise la linea: " + (s.left ) + " y columna:  " + (s.right )+ "Con simbolo: "+s.value);
    }    
    }
    public Symbol getS(){
        return this.s;
    }
:} ;



terminal tkn_opadicion,tkn_opmulti, tkn_break, tkn_opmod ;
terminal tkn_oprel ,tkn_main, tkn_intp, tkn_charp, tkn_void;
terminal tkn_if ,tkn_while, tkn_else,tkn_parentesisiz ,tkn_parentesisde ,tkn_llaveiz ,tkn_llaveder ; 
terminal tkn_and,tkn_or,tkn_for,tkn_return, tkn_printf, tkn_scanf, tkn_increment, tkn_decrement;
terminal tkn_dospuntos,tkn_int ,tkn_char, tkn_id, tkn_puntocoma, tkn_ternario, tkn_num, tkn_coma;
terminal tkn_ampersand, tkn_cadena, tkn_caracter;


non terminal Nodo WHILE, IF, FOR,CONDICION, ELSE, CONDICIONP, TIPO, 
    IDINT, TERNARIO, CONTADOR, SCANF, FUNCION, FUNCIONPARAMS, DECLAPARAM, PROTOTIPO, PROTOPARAMS, 
    RETURN, PARAMS, LLAMADO, ARGSPARAMS, ARGS, EXPRTERNARIO, EXPRFIN, EXPR, ASIGN, ITERADOR, ASIGNACION, DECLASIGN;
non terminal Nodo INICIO,MAIN,BLOQUE,FUNCIONES,PRINTF,DECLARACION, PROGRAM,PROTOTIPOS,LISTADO_FUNCIONES, DECLR, PROTOFUN;
precedence left tkn_opadicion;
precedence left tkn_opmulti, tkn_opmod;

start with INICIO;

INICIO::= PROGRAM
;

PROGRAM::= PROTOTIPO PROGRAM
          | FUNCION PROGRAM
          | ASIGN PROGRAM
;

PROTOTIPO::= PROTOFUN tkn_puntocoma
;

FUNCION::= PROTOFUN tkn_llaveiz BLOQUE tkn_return EXPR tkn_puntocoma tkn_llaveder | tkn_int tkn_main tkn_parentesisiz tkn_parentesisde tkn_llaveiz BLOQUE tkn_return EXPR tkn_puntocoma tkn_llaveder
;

PROTOFUN::= DECLR tkn_parentesisiz PARAMS tkn_parentesisde
;

DECLR::= TIPO tkn_id
;

ASIGNACION::= TIPO tkn_id tkn_oprel | tkn_id tkn_oprel
;

DECLASIGN::= DECLR tkn_oprel EXPR tkn_coma DECLASIGN 
            | DECLR tkn_oprel EXPR
            | DECLR tkn_coma DECLASIGN 
            | tkn_id tkn_coma DECLASIGN
            | tkn_id tkn_oprel EXPR tkn_coma DECLASIGN 
            | tkn_id tkn_oprel EXPR
            | DECLR 
            | DECLR tkn_oprel tkn_id tkn_parentesisiz ARGS tkn_parentesisde 
            | tkn_id tkn_oprel tkn_id tkn_parentesisiz ARGS tkn_parentesisde
;

ASIGN::= DECLASIGN tkn_puntocoma
;

PARAMS::= TIPO tkn_coma PARAMS
         | DECLR tkn_coma PARAMS
         | DECLR
         | TIPO
         | 
;

IF::= tkn_if tkn_parentesisiz CONDICION tkn_parentesisde tkn_llaveiz BLOQUE tkn_llaveder ELSE 
;

ELSE ::= tkn_else tkn_llaveiz BLOQUE tkn_llaveder
        | tkn_else IF
        |
;

FOR ::= tkn_for tkn_parentesisiz ASIGNACION EXPR tkn_puntocoma CONDICION tkn_puntocoma tkn_id ITERADOR tkn_parentesisde tkn_llaveiz BLOQUE:j tkn_llaveder  
;

WHILE ::= tkn_while tkn_parentesisiz CONDICION tkn_parentesisde tkn_llaveiz BLOQUE:j tkn_llaveder
;

PRINTF ::= tkn_printf tkn_parentesisiz tkn_cadena tkn_coma tkn_id tkn_parentesisde tkn_puntocoma
          | tkn_printf tkn_parentesisiz tkn_cadena tkn_parentesisde tkn_puntocoma
;

SCANF::= tkn_scanf tkn_parentesisiz tkn_cadena tkn_coma tkn_ampersand tkn_id tkn_parentesisde tkn_puntocoma
;

BLOQUE ::=  IF BLOQUE
            | FOR BLOQUE
            | WHILE BLOQUE
            | ASIGN BLOQUE
            | SCANF BLOQUE
            | PRINTF BLOQUE
            | CONTADOR BLOQUE
            |
;


ITERADOR::= tkn_increment
            |tkn_decrement
            | tkn_opadicion tkn_oprel EXPR
            | tkn_opmulti tkn_oprel EXPR

;

CONDICION ::= CONDICIONP tkn_and CONDICION
            | CONDICIONP tkn_or CONDICION
            | tkn_parentesisiz CONDICIONP tkn_parentesisde tkn_and CONDICION 
            | tkn_parentesisiz CONDICIONP tkn_parentesisde tkn_or CONDICION 
            | tkn_parentesisiz CONDICIONP tkn_parentesisde
            | CONDICIONP
;

CONDICIONP::= EXPR tkn_oprel EXPR
;

TIPO::= tkn_char
        |tkn_intp
        |tkn_charp
        |tkn_int
        |tkn_void
;

EXPR ::= EXPR tkn_opadicion EXPR 
        | EXPR tkn_opmulti EXPR 
        | EXPR tkn_opmod EXPR 
        | tkn_parentesisiz EXPR tkn_parentesisde
        | tkn_id 
        | tkn_num
        | tkn_caracter 

;
ARGS::= ARGSPARAMS
        |
;

ARGSPARAMS ::= tkn_id tkn_coma ARGSPARAMS| tkn_id
;

CONTADOR ::= tkn_id ITERADOR tkn_puntocoma
;


