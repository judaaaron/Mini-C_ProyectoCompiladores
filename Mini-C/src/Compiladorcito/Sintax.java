
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sat Aug 27 17:26:42 CST 2022
//----------------------------------------------------

package Compiladorcito;

import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sat Aug 27 17:26:42 CST 2022
  */
public class Sintax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\102\000\002\002\004\000\002\002\015\000\002\006" +
    "\005\000\002\017\005\000\002\017\003\000\002\017\007" +
    "\000\002\017\005\000\002\017\002\000\002\033\004\000" +
    "\002\033\002\000\002\031\004\000\002\031\003\000\002" +
    "\026\003\000\002\026\002\000\002\035\003\000\002\035" +
    "\002\000\002\032\006\000\002\032\005\000\002\032\003" +
    "\000\002\032\004\000\002\027\006\000\002\027\004\000" +
    "\002\025\015\000\002\030\010\000\002\004\012\000\002" +
    "\012\006\000\002\012\004\000\002\012\002\000\002\005" +
    "\021\000\002\003\011\000\002\007\004\000\002\007\004" +
    "\000\002\007\004\000\002\007\004\000\002\007\004\000" +
    "\002\007\004\000\002\007\004\000\002\007\004\000\002" +
    "\007\002\000\002\010\005\000\002\010\005\000\002\010" +
    "\007\000\002\010\007\000\002\010\005\000\002\010\003" +
    "\000\002\013\005\000\002\014\003\000\002\014\003\000" +
    "\002\015\003\000\002\015\003\000\002\015\003\000\002" +
    "\016\003\000\002\016\003\000\002\016\003\000\002\016" +
    "\003\000\002\021\005\000\002\021\005\000\002\020\011" +
    "\000\002\020\007\000\002\022\010\000\002\023\005\000" +
    "\002\023\005\000\002\024\012\000\002\034\003\000\002" +
    "\034\003\000\002\034\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\252\000\012\012\007\013\010\035\006\036\012\001" +
    "\002\000\012\012\007\013\010\035\006\036\012\001\002" +
    "\000\004\002\253\001\002\000\006\010\031\037\uffcb\001" +
    "\002\000\012\021\uffcd\037\uffcd\040\uffcd\043\uffcd\001\002" +
    "\000\012\021\uffcc\037\uffcc\040\uffcc\043\uffcc\001\002\000" +
    "\004\037\014\001\002\000\012\021\uffce\037\uffce\040\uffce" +
    "\043\uffce\001\002\000\004\002\ufff6\001\002\000\004\020" +
    "\015\001\002\000\014\012\007\013\010\021\ufff2\035\020" +
    "\036\012\001\002\000\004\021\027\001\002\000\004\021" +
    "\ufff3\001\002\000\012\021\uffcb\037\uffcb\040\uffcb\043\uffcb" +
    "\001\002\000\010\021\uffef\037\023\043\022\001\002\000" +
    "\012\012\007\013\010\035\020\036\012\001\002\000\006" +
    "\021\uffee\043\024\001\002\000\012\012\007\013\010\035" +
    "\020\036\012\001\002\000\004\021\ufff1\001\002\000\004" +
    "\021\ufff0\001\002\000\004\040\030\001\002\000\012\012" +
    "\uffea\013\uffea\035\uffea\036\uffea\001\002\000\004\020\032" +
    "\001\002\000\004\021\033\001\002\000\004\022\034\001" +
    "\002\000\036\012\007\013\010\014\046\015\052\016\055" +
    "\020\051\026\047\027\uffdb\030\037\031\056\035\020\036" +
    "\012\037\054\042\062\001\002\000\014\021\uffd5\024\250" +
    "\025\247\040\uffd5\041\uffd5\001\002\000\044\012\007\013" +
    "\010\014\046\015\052\016\055\020\051\023\uffdb\026\047" +
    "\027\uffdb\030\037\031\056\034\uffdb\035\020\036\012\037" +
    "\054\040\uffdb\042\062\001\002\000\004\020\235\001\002" +
    "\000\044\012\007\013\010\014\046\015\052\016\055\020" +
    "\051\023\uffdb\026\047\027\uffdb\030\037\031\056\034\uffdb" +
    "\035\020\036\012\037\054\040\uffdb\042\062\001\002\000" +
    "\044\012\007\013\010\014\046\015\052\016\055\020\051" +
    "\023\uffdb\026\047\027\uffdb\030\037\031\056\034\uffdb\035" +
    "\020\036\012\037\054\040\uffdb\042\062\001\002\000\044" +
    "\012\007\013\010\014\046\015\052\016\055\020\051\023" +
    "\uffdb\026\047\027\uffdb\030\037\031\056\034\uffdb\035\020" +
    "\036\012\037\054\040\uffdb\042\062\001\002\000\044\012" +
    "\007\013\010\014\046\015\052\016\055\020\051\023\uffdb" +
    "\026\047\027\uffdb\030\037\031\056\034\uffdb\035\020\036" +
    "\012\037\054\040\uffdb\042\062\001\002\000\004\027\177" +
    "\001\002\000\044\012\007\013\010\014\046\015\052\016" +
    "\055\020\051\023\uffdb\026\047\027\uffdb\030\037\031\056" +
    "\034\uffdb\035\020\036\012\037\054\040\uffdb\042\062\001" +
    "\002\000\020\007\uffd1\011\uffd1\021\uffd1\024\uffd1\025\uffd1" +
    "\040\uffd1\041\uffd1\001\002\000\004\020\160\001\002\000" +
    "\006\037\150\040\ufffa\001\002\000\010\014\046\037\073" +
    "\042\062\001\002\000\004\020\125\001\002\000\044\012" +
    "\007\013\010\014\046\015\052\016\055\020\051\023\uffdb" +
    "\026\047\027\uffdb\030\037\031\056\034\uffdb\035\020\036" +
    "\012\037\054\040\uffdb\042\062\001\002\000\012\007\uffcf" +
    "\011\uffcf\032\121\033\120\001\002\000\004\020\112\001" +
    "\002\000\004\020\076\001\002\000\044\012\007\013\010" +
    "\014\046\015\052\016\055\020\051\023\uffdb\026\047\027" +
    "\uffdb\030\037\031\056\034\uffdb\035\020\036\012\037\054" +
    "\040\uffdb\042\062\001\002\000\006\007\072\011\071\001" +
    "\002\000\004\041\063\001\002\000\020\007\uffd0\011\uffd0" +
    "\021\uffd0\024\uffd0\025\uffd0\040\uffd0\041\uffd0\001\002\000" +
    "\036\012\007\013\010\014\046\015\052\016\055\020\051" +
    "\026\047\030\037\031\056\034\uffdb\035\020\036\012\037" +
    "\054\042\062\001\002\000\004\034\065\001\002\000\036" +
    "\012\007\013\010\014\046\015\052\016\055\020\051\026" +
    "\047\030\037\031\056\035\020\036\012\037\054\040\uffdb" +
    "\042\062\001\002\000\004\040\067\001\002\000\044\012" +
    "\uffc6\013\uffc6\014\uffc6\015\uffc6\016\uffc6\020\uffc6\023\uffc6" +
    "\026\uffc6\027\uffc6\030\uffc6\031\uffc6\034\uffc6\035\uffc6\036" +
    "\uffc6\037\uffc6\040\uffc6\042\uffc6\001\002\000\010\014\046" +
    "\037\073\042\062\001\002\000\010\014\uffd2\037\uffd2\042" +
    "\uffd2\001\002\000\010\014\uffd3\037\uffd3\042\uffd3\001\002" +
    "\000\020\007\uffcf\011\uffcf\021\uffcf\024\uffcf\025\uffcf\040" +
    "\uffcf\041\uffcf\001\002\000\014\021\uffd4\024\uffd4\025\uffd4" +
    "\040\uffd4\041\uffd4\001\002\000\012\023\uffe2\027\uffe2\034" +
    "\uffe2\040\uffe2\001\002\000\004\050\100\001\002\000\004" +
    "\043\105\001\002\000\006\044\101\045\102\001\002\000" +
    "\004\050\104\001\002\000\004\050\103\001\002\000\004" +
    "\043\uffc9\001\002\000\004\043\uffca\001\002\000\004\051" +
    "\106\001\002\000\004\037\107\001\002\000\004\021\110" +
    "\001\002\000\004\040\111\001\002\000\044\012\uffc3\013" +
    "\uffc3\014\uffc3\015\uffc3\016\uffc3\020\uffc3\023\uffc3\026\uffc3" +
    "\027\uffc3\030\uffc3\031\uffc3\034\uffc3\035\uffc3\036\uffc3\037" +
    "\uffc3\040\uffc3\042\uffc3\001\002\000\012\014\046\020\051" +
    "\037\073\042\062\001\002\000\004\021\114\001\002\000" +
    "\004\022\115\001\002\000\036\012\007\013\010\014\046" +
    "\015\052\016\055\020\051\023\uffdb\026\047\030\037\031" +
    "\056\035\020\036\012\037\054\042\062\001\002\000\004" +
    "\023\117\001\002\000\044\012\uffe4\013\uffe4\014\uffe4\015" +
    "\uffe4\016\uffe4\020\uffe4\023\uffe4\026\uffe4\027\uffe4\030\uffe4" +
    "\031\uffe4\034\uffe4\035\uffe4\036\uffe4\037\uffe4\040\uffe4\042" +
    "\uffe4\001\002\000\004\040\123\001\002\000\004\040\122" +
    "\001\002\000\044\012\uffc5\013\uffc5\014\uffc5\015\uffc5\016" +
    "\uffc5\020\uffc5\023\uffc5\026\uffc5\027\uffc5\030\uffc5\031\uffc5" +
    "\034\uffc5\035\uffc5\036\uffc5\037\uffc5\040\uffc5\042\uffc5\001" +
    "\002\000\044\012\uffc4\013\uffc4\014\uffc4\015\uffc4\016\uffc4" +
    "\020\uffc4\023\uffc4\026\uffc4\027\uffc4\030\uffc4\031\uffc4\034" +
    "\uffc4\035\uffc4\036\uffc4\037\uffc4\040\uffc4\042\uffc4\001\002" +
    "\000\012\023\uffde\027\uffde\034\uffde\040\uffde\001\002\000" +
    "\012\014\046\020\051\037\073\042\062\001\002\000\004" +
    "\021\127\001\002\000\004\022\130\001\002\000\036\012" +
    "\007\013\010\014\046\015\052\016\055\020\051\023\uffdb" +
    "\026\047\030\037\031\056\035\020\036\012\037\054\042" +
    "\062\001\002\000\004\023\132\001\002\000\046\012\uffe6" +
    "\013\uffe6\014\uffe6\015\uffe6\016\uffe6\017\134\020\uffe6\023" +
    "\uffe6\026\uffe6\027\uffe6\030\uffe6\031\uffe6\034\uffe6\035\uffe6" +
    "\036\uffe6\037\uffe6\040\uffe6\042\uffe6\001\002\000\044\012" +
    "\uffe9\013\uffe9\014\uffe9\015\uffe9\016\uffe9\020\uffe9\023\uffe9" +
    "\026\uffe9\027\uffe9\030\uffe9\031\uffe9\034\uffe9\035\uffe9\036" +
    "\uffe9\037\uffe9\040\uffe9\042\uffe9\001\002\000\006\015\052" +
    "\022\136\001\002\000\044\012\uffe7\013\uffe7\014\uffe7\015" +
    "\uffe7\016\uffe7\020\uffe7\023\uffe7\026\uffe7\027\uffe7\030\uffe7" +
    "\031\uffe7\034\uffe7\035\uffe7\036\uffe7\037\uffe7\040\uffe7\042" +
    "\uffe7\001\002\000\036\012\007\013\010\014\046\015\052" +
    "\016\055\020\051\023\uffdb\026\047\030\037\031\056\035" +
    "\020\036\012\037\054\042\062\001\002\000\004\023\140" +
    "\001\002\000\044\012\uffe8\013\uffe8\014\uffe8\015\uffe8\016" +
    "\uffe8\020\uffe8\023\uffe8\026\uffe8\027\uffe8\030\uffe8\031\uffe8" +
    "\034\uffe8\035\uffe8\036\uffe8\037\uffe8\040\uffe8\042\uffe8\001" +
    "\002\000\004\021\142\001\002\000\014\021\uffd6\024\144" +
    "\025\143\040\uffd6\041\uffd6\001\002\000\012\014\046\020" +
    "\051\037\073\042\062\001\002\000\012\014\046\020\051" +
    "\037\073\042\062\001\002\000\010\021\uffd8\040\uffd8\041" +
    "\uffd8\001\002\000\010\021\uffd7\040\uffd7\041\uffd7\001\002" +
    "\000\004\040\157\001\002\000\010\011\152\040\ufffd\043" +
    "\151\001\002\000\006\037\150\040\ufffa\001\002\000\004" +
    "\042\153\001\002\000\006\040\ufffb\043\154\001\002\000" +
    "\006\037\150\040\ufffa\001\002\000\004\040\ufffc\001\002" +
    "\000\004\040\ufffe\001\002\000\044\012\uffff\013\uffff\014" +
    "\uffff\015\uffff\016\uffff\020\uffff\023\uffff\026\uffff\027\uffff" +
    "\030\uffff\031\uffff\034\uffff\035\uffff\036\uffff\037\uffff\040" +
    "\uffff\042\uffff\001\002\000\004\035\161\001\002\000\004" +
    "\037\162\001\002\000\004\011\163\001\002\000\004\042" +
    "\164\001\002\000\004\040\165\001\002\000\012\014\046" +
    "\020\051\037\073\042\062\001\002\000\004\040\167\001" +
    "\002\000\004\037\170\001\002\000\004\032\171\001\002" +
    "\000\004\021\172\001\002\000\004\022\173\001\002\000" +
    "\036\012\007\013\010\014\046\015\052\016\055\020\051" +
    "\023\uffdb\026\047\030\037\031\056\035\020\036\012\037" +
    "\054\042\062\001\002\000\004\023\175\001\002\000\044" +
    "\012\uffe5\013\uffe5\014\uffe5\015\uffe5\016\uffe5\020\uffe5\023" +
    "\uffe5\026\uffe5\027\uffe5\030\uffe5\031\uffe5\034\uffe5\035\uffe5" +
    "\036\uffe5\037\uffe5\040\uffe5\042\uffe5\001\002\000\012\023" +
    "\uffdf\027\uffdf\034\uffdf\040\uffdf\001\002\000\004\042\200" +
    "\001\002\000\004\040\201\001\002\000\004\023\202\001" +
    "\002\000\014\002\ufff8\012\007\013\010\035\020\036\012" +
    "\001\002\000\014\002\ufff8\012\007\013\010\035\020\036" +
    "\012\001\002\000\004\002\000\001\002\000\004\037\206" +
    "\001\002\000\004\020\207\001\002\000\014\012\007\013" +
    "\010\021\ufff4\035\020\036\012\001\002\000\004\021\ufff5" +
    "\001\002\000\004\021\216\001\002\000\004\037\213\001" +
    "\002\000\006\021\uffec\043\214\001\002\000\012\012\007" +
    "\013\010\035\020\036\012\001\002\000\004\021\uffed\001" +
    "\002\000\004\022\217\001\002\000\036\012\007\013\010" +
    "\014\046\015\052\016\055\020\051\026\047\027\uffdb\030" +
    "\037\031\056\035\020\036\012\037\054\042\062\001\002" +
    "\000\004\027\221\001\002\000\010\037\223\042\224\046" +
    "\225\001\002\000\004\040\226\001\002\000\004\040\uffc2" +
    "\001\002\000\004\040\uffc1\001\002\000\004\040\uffc0\001" +
    "\002\000\004\023\227\001\002\000\014\002\uffeb\012\uffeb" +
    "\013\uffeb\035\uffeb\036\uffeb\001\002\000\004\002\ufff9\001" +
    "\002\000\012\023\uffe1\027\uffe1\034\uffe1\040\uffe1\001\002" +
    "\000\012\023\uffe0\027\uffe0\034\uffe0\040\uffe0\001\002\000" +
    "\012\023\uffdc\027\uffdc\034\uffdc\040\uffdc\001\002\000\012" +
    "\023\uffe3\027\uffe3\034\uffe3\040\uffe3\001\002\000\006\037" +
    "\237\050\100\001\002\000\004\043\242\001\002\000\004" +
    "\021\240\001\002\000\004\040\241\001\002\000\044\012" +
    "\uffc7\013\uffc7\014\uffc7\015\uffc7\016\uffc7\020\uffc7\023\uffc7" +
    "\026\uffc7\027\uffc7\030\uffc7\031\uffc7\034\uffc7\035\uffc7\036" +
    "\uffc7\037\uffc7\040\uffc7\042\uffc7\001\002\000\004\037\243" +
    "\001\002\000\004\021\244\001\002\000\004\040\245\001" +
    "\002\000\044\012\uffc8\013\uffc8\014\uffc8\015\uffc8\016\uffc8" +
    "\020\uffc8\023\uffc8\026\uffc8\027\uffc8\030\uffc8\031\uffc8\034" +
    "\uffc8\035\uffc8\036\uffc8\037\uffc8\040\uffc8\042\uffc8\001\002" +
    "\000\012\023\uffdd\027\uffdd\034\uffdd\040\uffdd\001\002\000" +
    "\012\014\046\020\051\037\073\042\062\001\002\000\012" +
    "\014\046\020\051\037\073\042\062\001\002\000\010\021" +
    "\uffda\040\uffda\041\uffda\001\002\000\010\021\uffd9\040\uffd9" +
    "\041\uffd9\001\002\000\004\002\001\001\002\000\004\002" +
    "\ufff7\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\252\000\012\002\012\016\010\030\003\031\004\001" +
    "\001\000\012\002\012\016\010\030\003\031\253\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\016\020\032\016\035" +
    "\015\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\016\020\032\025\001" +
    "\001\000\002\001\001\000\006\016\020\032\024\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\034\003\037\004\042\005\056\006\041\007" +
    "\043\010\060\013\034\015\057\016\047\020\044\022\052" +
    "\023\035\024\040\001\001\000\002\001\001\000\034\003" +
    "\037\004\042\005\056\006\041\007\245\010\060\013\034" +
    "\015\057\016\047\020\044\022\052\023\035\024\040\001" +
    "\001\000\002\001\001\000\034\003\037\004\042\005\056" +
    "\006\041\007\233\010\060\013\034\015\057\016\047\020" +
    "\044\022\052\023\035\024\040\001\001\000\034\003\037" +
    "\004\042\005\056\006\041\007\232\010\060\013\034\015" +
    "\057\016\047\020\044\022\052\023\035\024\040\001\001" +
    "\000\034\003\037\004\042\005\056\006\041\007\231\010" +
    "\060\013\034\015\057\016\047\020\044\022\052\023\035" +
    "\024\040\001\001\000\034\003\037\004\042\005\056\006" +
    "\041\007\230\010\060\013\034\015\057\016\047\020\044" +
    "\022\052\023\035\024\040\001\001\000\002\001\001\000" +
    "\034\003\037\004\042\005\056\006\041\007\175\010\060" +
    "\013\034\015\057\016\047\020\044\022\052\023\035\024" +
    "\040\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\017\146\001\001\000\006\013\140\015\057\001\001\000" +
    "\002\001\001\000\034\003\037\004\042\005\056\006\041" +
    "\007\123\010\060\013\034\015\057\016\047\020\044\022" +
    "\052\023\035\024\040\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\034\003\037\004\042\005" +
    "\056\006\041\007\074\010\060\013\034\015\057\016\047" +
    "\020\044\022\052\023\035\024\040\001\001\000\004\014" +
    "\067\001\001\000\002\001\001\000\002\001\001\000\034" +
    "\003\037\004\042\005\056\006\041\007\063\010\060\013" +
    "\034\015\057\016\047\020\044\022\052\023\035\024\040" +
    "\001\001\000\002\001\001\000\034\003\037\004\042\005" +
    "\056\006\041\007\065\010\060\013\034\015\057\016\047" +
    "\020\044\022\052\023\035\024\040\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\015\073\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\021\076\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\010\112\013\034\015\057\001\001" +
    "\000\002\001\001\000\002\001\001\000\034\003\037\004" +
    "\042\005\056\006\041\007\115\010\060\013\034\015\057" +
    "\016\047\020\044\022\052\023\035\024\040\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\010\125\013\034\015\057\001\001\000\002" +
    "\001\001\000\002\001\001\000\034\003\037\004\042\005" +
    "\056\006\041\007\130\010\060\013\034\015\057\016\047" +
    "\020\044\022\052\023\035\024\040\001\001\000\002\001" +
    "\001\000\004\012\132\001\001\000\002\001\001\000\004" +
    "\004\134\001\001\000\002\001\001\000\034\003\037\004" +
    "\042\005\056\006\041\007\136\010\060\013\034\015\057" +
    "\016\047\020\044\022\052\023\035\024\040\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\010\145\013\034\015\057\001\001\000" +
    "\010\010\144\013\034\015\057\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\017\155\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\017\154\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\010\165\013\034\015\057\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\034\003\037\004\042\005\056\006\041" +
    "\007\173\010\060\013\034\015\057\016\047\020\044\022" +
    "\052\023\035\024\040\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\016\204\025\202\033\203" +
    "\001\001\000\010\016\204\025\202\033\227\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\016\211\026\210\027\207\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\016\211\027\214\001\001\000\002\001\001\000\002\001" +
    "\001\000\034\003\037\004\042\005\056\006\041\007\217" +
    "\010\060\013\034\015\057\016\047\020\044\022\052\023" +
    "\035\024\040\001\001\000\002\001\001\000\004\034\221" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\021\235\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\010" +
    "\251\013\034\015\057\001\001\000\010\010\250\013\034" +
    "\015\057\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // RETURN ::= tkn_letra 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RETURN",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // RETURN ::= tkn_num 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RETURN",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // RETURN ::= tkn_id 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RETURN",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // SCANF ::= tkn_scanf tkn_parentesisiz CONSTSTR tkn_coma tkn_ampersand tkn_id tkn_parentesisde tkn_puntocoma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SCANF",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // CONTADOR ::= tkn_id tkn_decrement tkn_puntocoma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTADOR",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // CONTADOR ::= tkn_id tkn_increment tkn_puntocoma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTADOR",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // TERNARIO ::= CONDICION tkn_ternario BLOQUE tkn_dospuntos BLOQUE tkn_puntocoma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TERNARIO",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // PRINTF ::= tkn_printf tkn_parentesisiz tkn_id tkn_parentesisde tkn_puntocoma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PRINTF",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // PRINTF ::= tkn_printf tkn_parentesisiz CONSTSTR tkn_coma tkn_id tkn_parentesisde tkn_puntocoma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PRINTF",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // CONSTSTR ::= tkn_comillas tkn_porcentajec tkn_comillas 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONSTSTR",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // CONSTSTR ::= tkn_comillas tkn_porcentajed tkn_comillas 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONSTSTR",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // TIPO ::= tkn_int 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // TIPO ::= tkn_charp 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // TIPO ::= tkn_intp 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // TIPO ::= tkn_char 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // VALOR ::= tkn_id 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VALOR",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // VALOR ::= tkn_num 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VALOR",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // VALOR ::= tkn_digitos 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VALOR",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // OPCONDICION ::= tkn_igual 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPCONDICION",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // OPCONDICION ::= tkn_oprel 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPCONDICION",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // CONDICIONP ::= VALOR OPCONDICION VALOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICIONP",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // CONDICION ::= CONDICIONP 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // CONDICION ::= tkn_parentesisiz CONDICIONP tkn_parentesisde 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // CONDICION ::= tkn_parentesisiz CONDICIONP tkn_parentesisde tkn_or CONDICION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // CONDICION ::= tkn_parentesisiz CONDICIONP tkn_parentesisde tkn_and CONDICION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // CONDICION ::= CONDICIONP tkn_or CONDICION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // CONDICION ::= CONDICIONP tkn_and CONDICION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // BLOQUE ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BLOQUE",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // BLOQUE ::= SCANF BLOQUE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BLOQUE",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // BLOQUE ::= CONTADOR BLOQUE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BLOQUE",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // BLOQUE ::= TERNARIO BLOQUE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BLOQUE",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // BLOQUE ::= PRINTF BLOQUE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BLOQUE",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // BLOQUE ::= DECLARACION BLOQUE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BLOQUE",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // BLOQUE ::= IF BLOQUE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BLOQUE",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // BLOQUE ::= FOR BLOQUE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BLOQUE",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // BLOQUE ::= WHILE BLOQUE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BLOQUE",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // WHILE ::= tkn_while tkn_parentesisiz CONDICION tkn_parentesisde tkn_llaveiz BLOQUE tkn_llaveder 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("WHILE",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // FOR ::= tkn_for tkn_parentesisiz tkn_int tkn_id tkn_igual tkn_num tkn_puntocoma CONDICION tkn_puntocoma tkn_id tkn_increment tkn_parentesisde tkn_llaveiz BLOQUE tkn_llaveder 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-14)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ELSE ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // ELSE ::= tkn_else IF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // ELSE ::= tkn_else tkn_llaveiz BLOQUE tkn_llaveder 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // IF ::= tkn_if tkn_parentesisiz CONDICION tkn_parentesisde tkn_llaveiz BLOQUE tkn_llaveder ELSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // PROTOTIPO ::= TIPO tkn_id tkn_parentesisiz PARAMS2 tkn_parentesisde tkn_puntocoma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PROTOTIPO",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // FUNCION ::= TIPO tkn_id tkn_parentesisiz PARAMS tkn_parentesisde tkn_llaveiz BLOQUE tkn_return RETURN tkn_puntocoma tkn_llaveder 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // DECLAPARAM ::= TIPO tkn_id 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLAPARAM",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // DECLAPARAM ::= TIPO tkn_id tkn_coma DECLAPARAM 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLAPARAM",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // PROTOPARAMS ::= TIPO tkn_id 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PROTOPARAMS",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // PROTOPARAMS ::= TIPO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PROTOPARAMS",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // PROTOPARAMS ::= TIPO tkn_coma PROTOPARAMS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PROTOPARAMS",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // PROTOPARAMS ::= TIPO tkn_id tkn_coma PROTOPARAMS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PROTOPARAMS",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // PARAMS2 ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMS2",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // PARAMS2 ::= PROTOPARAMS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMS2",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // PARAMS ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMS",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // PARAMS ::= DECLAPARAM 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMS",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // PROTOTIPOS ::= INICIO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PROTOTIPOS",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // PROTOTIPOS ::= PROTOTIPO PROTOTIPOS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PROTOTIPOS",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // FUNCIONES ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCIONES",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // FUNCIONES ::= FUNCION FUNCIONES 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCIONES",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // IDINT ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IDINT",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // IDINT ::= tkn_id tkn_igual tkn_num 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IDINT",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // IDINT ::= tkn_id tkn_igual tkn_num tkn_coma IDINT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IDINT",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // IDINT ::= tkn_id 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IDINT",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // IDINT ::= tkn_id tkn_coma IDINT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IDINT",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // DECLARACION ::= TIPO IDINT tkn_puntocoma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= tkn_int tkn_main tkn_parentesisiz tkn_parentesisde tkn_llaveiz BLOQUE tkn_return tkn_num tkn_puntocoma tkn_llaveder FUNCIONES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= PROTOTIPOS EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

