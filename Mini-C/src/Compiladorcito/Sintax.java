
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sat Aug 27 11:11:58 CST 2022
//----------------------------------------------------

package Compiladorcito;

import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sat Aug 27 11:11:58 CST 2022
  */
public class Sintax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\072\000\002\002\004\000\002\002\012\000\002\006" +
    "\005\000\002\017\005\000\002\017\003\000\002\017\007" +
    "\000\002\017\005\000\002\017\002\000\002\033\004\000" +
    "\002\033\002\000\002\026\003\000\002\026\002\000\002" +
    "\027\006\000\002\027\004\000\002\025\015\000\002\004" +
    "\012\000\002\012\006\000\002\012\004\000\002\012\002" +
    "\000\002\005\021\000\002\003\011\000\002\007\004\000" +
    "\002\007\004\000\002\007\004\000\002\007\004\000\002" +
    "\007\004\000\002\007\004\000\002\007\004\000\002\007" +
    "\004\000\002\007\004\000\002\007\002\000\002\010\005" +
    "\000\002\010\005\000\002\010\007\000\002\010\007\000" +
    "\002\010\005\000\002\010\003\000\002\013\005\000\002" +
    "\014\003\000\002\014\003\000\002\015\003\000\002\015" +
    "\003\000\002\015\003\000\002\016\003\000\002\016\003" +
    "\000\002\016\003\000\002\016\003\000\002\021\005\000" +
    "\002\021\005\000\002\020\011\000\002\020\007\000\002" +
    "\022\010\000\002\023\005\000\002\023\005\000\002\024" +
    "\012\000\002\034\003\000\002\034\003\000\002\034\003" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\232\000\004\035\004\001\002\000\004\010\007\001" +
    "\002\000\004\002\006\001\002\000\004\002\001\001\002" +
    "\000\004\020\010\001\002\000\004\021\011\001\002\000" +
    "\004\022\012\001\002\000\036\012\032\013\041\014\025" +
    "\015\034\016\036\020\030\023\uffe3\026\026\030\016\031" +
    "\037\035\031\036\013\037\035\042\044\001\002\000\006" +
    "\037\uffd5\040\uffd5\001\002\000\044\012\032\013\041\014" +
    "\025\015\034\016\036\020\030\023\uffe3\026\026\027\uffe3" +
    "\030\016\031\037\034\uffe3\035\031\036\013\037\035\040" +
    "\uffe3\042\044\001\002\000\014\021\uffdd\024\231\025\230" +
    "\040\uffdd\041\uffdd\001\002\000\004\020\217\001\002\000" +
    "\044\012\032\013\041\014\025\015\034\016\036\020\030" +
    "\023\uffe3\026\026\027\uffe3\030\016\031\037\034\uffe3\035" +
    "\031\036\013\037\035\040\uffe3\042\044\001\002\000\044" +
    "\012\032\013\041\014\025\015\034\016\036\020\030\023" +
    "\uffe3\026\026\027\uffe3\030\016\031\037\034\uffe3\035\031" +
    "\036\013\037\035\040\uffe3\042\044\001\002\000\044\012" +
    "\032\013\041\014\025\015\034\016\036\020\030\023\uffe3" +
    "\026\026\027\uffe3\030\016\031\037\034\uffe3\035\031\036" +
    "\013\037\035\040\uffe3\042\044\001\002\000\004\023\206" +
    "\001\002\000\044\012\032\013\041\014\025\015\034\016" +
    "\036\020\030\023\uffe3\026\026\027\uffe3\030\016\031\037" +
    "\034\uffe3\035\031\036\013\037\035\040\uffe3\042\044\001" +
    "\002\000\044\012\032\013\041\014\025\015\034\016\036" +
    "\020\030\023\uffe3\026\026\027\uffe3\030\016\031\037\034" +
    "\uffe3\035\031\036\013\037\035\040\uffe3\042\044\001\002" +
    "\000\020\007\uffd9\011\uffd9\021\uffd9\024\uffd9\025\uffd9\040" +
    "\uffd9\041\uffd9\001\002\000\004\020\166\001\002\000\006" +
    "\037\134\040\ufffa\001\002\000\010\014\025\037\057\042" +
    "\044\001\002\000\006\037\uffd6\040\uffd6\001\002\000\006" +
    "\037\uffd4\040\uffd4\001\002\000\044\012\032\013\041\014" +
    "\025\015\034\016\036\020\030\023\uffe3\026\026\027\uffe3" +
    "\030\016\031\037\034\uffe3\035\031\036\013\037\035\040" +
    "\uffe3\042\044\001\002\000\004\020\110\001\002\000\012" +
    "\007\uffd7\011\uffd7\032\105\033\104\001\002\000\004\020" +
    "\076\001\002\000\004\020\062\001\002\000\044\012\032" +
    "\013\041\014\025\015\034\016\036\020\030\023\uffe3\026" +
    "\026\027\uffe3\030\016\031\037\034\uffe3\035\031\036\013" +
    "\037\035\040\uffe3\042\044\001\002\000\006\037\uffd3\040" +
    "\uffd3\001\002\000\006\007\056\011\055\001\002\000\004" +
    "\041\047\001\002\000\020\007\uffd8\011\uffd8\021\uffd8\024" +
    "\uffd8\025\uffd8\040\uffd8\041\uffd8\001\002\000\044\012\032" +
    "\013\041\014\025\015\034\016\036\020\030\023\uffe3\026" +
    "\026\027\uffe3\030\016\031\037\034\uffe3\035\031\036\013" +
    "\037\035\040\uffe3\042\044\001\002\000\012\023\uffe4\027" +
    "\uffe4\034\uffe4\040\uffe4\001\002\000\036\012\032\013\041" +
    "\014\025\015\034\016\036\020\030\026\026\030\016\031" +
    "\037\034\uffe3\035\031\036\013\037\035\042\044\001\002" +
    "\000\004\034\051\001\002\000\036\012\032\013\041\014" +
    "\025\015\034\016\036\020\030\026\026\030\016\031\037" +
    "\035\031\036\013\037\035\040\uffe3\042\044\001\002\000" +
    "\004\040\053\001\002\000\044\012\uffce\013\uffce\014\uffce" +
    "\015\uffce\016\uffce\020\uffce\023\uffce\026\uffce\027\uffce\030" +
    "\uffce\031\uffce\034\uffce\035\uffce\036\uffce\037\uffce\040\uffce" +
    "\042\uffce\001\002\000\010\014\025\037\057\042\044\001" +
    "\002\000\010\014\uffda\037\uffda\042\uffda\001\002\000\010" +
    "\014\uffdb\037\uffdb\042\uffdb\001\002\000\020\007\uffd7\011" +
    "\uffd7\021\uffd7\024\uffd7\025\uffd7\040\uffd7\041\uffd7\001\002" +
    "\000\014\021\uffdc\024\uffdc\025\uffdc\040\uffdc\041\uffdc\001" +
    "\002\000\012\023\uffeb\027\uffeb\034\uffeb\040\uffeb\001\002" +
    "\000\004\050\064\001\002\000\004\043\071\001\002\000" +
    "\006\044\065\045\066\001\002\000\004\050\070\001\002" +
    "\000\004\050\067\001\002\000\004\043\uffd1\001\002\000" +
    "\004\043\uffd2\001\002\000\004\051\072\001\002\000\004" +
    "\037\073\001\002\000\004\021\074\001\002\000\004\040" +
    "\075\001\002\000\044\012\uffcb\013\uffcb\014\uffcb\015\uffcb" +
    "\016\uffcb\020\uffcb\023\uffcb\026\uffcb\027\uffcb\030\uffcb\031" +
    "\uffcb\034\uffcb\035\uffcb\036\uffcb\037\uffcb\040\uffcb\042\uffcb" +
    "\001\002\000\012\014\025\020\030\037\057\042\044\001" +
    "\002\000\004\021\100\001\002\000\004\022\101\001\002" +
    "\000\036\012\032\013\041\014\025\015\034\016\036\020" +
    "\030\023\uffe3\026\026\030\016\031\037\035\031\036\013" +
    "\037\035\042\044\001\002\000\004\023\103\001\002\000" +
    "\044\012\uffed\013\uffed\014\uffed\015\uffed\016\uffed\020\uffed" +
    "\023\uffed\026\uffed\027\uffed\030\uffed\031\uffed\034\uffed\035" +
    "\uffed\036\uffed\037\uffed\040\uffed\042\uffed\001\002\000\004" +
    "\040\107\001\002\000\004\040\106\001\002\000\044\012" +
    "\uffcd\013\uffcd\014\uffcd\015\uffcd\016\uffcd\020\uffcd\023\uffcd" +
    "\026\uffcd\027\uffcd\030\uffcd\031\uffcd\034\uffcd\035\uffcd\036" +
    "\uffcd\037\uffcd\040\uffcd\042\uffcd\001\002\000\044\012\uffcc" +
    "\013\uffcc\014\uffcc\015\uffcc\016\uffcc\020\uffcc\023\uffcc\026" +
    "\uffcc\027\uffcc\030\uffcc\031\uffcc\034\uffcc\035\uffcc\036\uffcc" +
    "\037\uffcc\040\uffcc\042\uffcc\001\002\000\012\014\025\020" +
    "\030\037\057\042\044\001\002\000\004\021\112\001\002" +
    "\000\004\022\113\001\002\000\036\012\032\013\041\014" +
    "\025\015\034\016\036\020\030\023\uffe3\026\026\030\016" +
    "\031\037\035\031\036\013\037\035\042\044\001\002\000" +
    "\004\023\115\001\002\000\046\012\uffef\013\uffef\014\uffef" +
    "\015\uffef\016\uffef\017\117\020\uffef\023\uffef\026\uffef\027" +
    "\uffef\030\uffef\031\uffef\034\uffef\035\uffef\036\uffef\037\uffef" +
    "\040\uffef\042\uffef\001\002\000\044\012\ufff2\013\ufff2\014" +
    "\ufff2\015\ufff2\016\ufff2\020\ufff2\023\ufff2\026\ufff2\027\ufff2" +
    "\030\ufff2\031\ufff2\034\ufff2\035\ufff2\036\ufff2\037\ufff2\040" +
    "\ufff2\042\ufff2\001\002\000\006\015\034\022\121\001\002" +
    "\000\044\012\ufff0\013\ufff0\014\ufff0\015\ufff0\016\ufff0\020" +
    "\ufff0\023\ufff0\026\ufff0\027\ufff0\030\ufff0\031\ufff0\034\ufff0" +
    "\035\ufff0\036\ufff0\037\ufff0\040\ufff0\042\ufff0\001\002\000" +
    "\036\012\032\013\041\014\025\015\034\016\036\020\030" +
    "\023\uffe3\026\026\030\016\031\037\035\031\036\013\037" +
    "\035\042\044\001\002\000\004\023\123\001\002\000\044" +
    "\012\ufff1\013\ufff1\014\ufff1\015\ufff1\016\ufff1\020\ufff1\023" +
    "\ufff1\026\ufff1\027\ufff1\030\ufff1\031\ufff1\034\ufff1\035\ufff1" +
    "\036\ufff1\037\ufff1\040\ufff1\042\ufff1\001\002\000\012\023" +
    "\uffe7\027\uffe7\034\uffe7\040\uffe7\001\002\000\004\021\126" +
    "\001\002\000\014\021\uffde\024\130\025\127\040\uffde\041" +
    "\uffde\001\002\000\012\014\025\020\030\037\057\042\044" +
    "\001\002\000\012\014\025\020\030\037\057\042\044\001" +
    "\002\000\010\021\uffe0\040\uffe0\041\uffe0\001\002\000\010" +
    "\021\uffdf\040\uffdf\041\uffdf\001\002\000\004\040\165\001" +
    "\002\000\012\011\136\020\137\040\ufffd\043\135\001\002" +
    "\000\006\037\163\040\ufffa\001\002\000\004\042\160\001" +
    "\002\000\014\012\032\013\041\021\ufff6\035\031\036\013" +
    "\001\002\000\004\021\ufff7\001\002\000\004\021\146\001" +
    "\002\000\004\037\143\001\002\000\006\021\ufff4\043\144" +
    "\001\002\000\012\012\032\013\041\035\031\036\013\001" +
    "\002\000\004\021\ufff5\001\002\000\004\022\147\001\002" +
    "\000\036\012\032\013\041\014\025\015\034\016\036\020" +
    "\030\026\026\027\uffe3\030\016\031\037\035\031\036\013" +
    "\037\035\042\044\001\002\000\004\027\151\001\002\000" +
    "\010\037\153\042\154\046\155\001\002\000\004\040\156" +
    "\001\002\000\004\040\uffca\001\002\000\004\040\uffc9\001" +
    "\002\000\004\040\uffc8\001\002\000\004\023\157\001\002" +
    "\000\046\002\ufff3\012\ufff3\013\ufff3\014\ufff3\015\ufff3\016" +
    "\ufff3\020\ufff3\023\ufff3\026\ufff3\027\ufff3\030\ufff3\031\ufff3" +
    "\034\ufff3\035\ufff3\036\ufff3\037\ufff3\040\ufff3\042\ufff3\001" +
    "\002\000\006\040\ufffb\043\161\001\002\000\006\037\163" +
    "\040\ufffa\001\002\000\004\040\ufffc\001\002\000\010\011" +
    "\136\040\ufffd\043\135\001\002\000\004\040\ufffe\001\002" +
    "\000\044\012\uffff\013\uffff\014\uffff\015\uffff\016\uffff\020" +
    "\uffff\023\uffff\026\uffff\027\uffff\030\uffff\031\uffff\034\uffff" +
    "\035\uffff\036\uffff\037\uffff\040\uffff\042\uffff\001\002\000" +
    "\004\035\167\001\002\000\004\037\170\001\002\000\004" +
    "\011\171\001\002\000\004\042\172\001\002\000\004\040" +
    "\173\001\002\000\012\014\025\020\030\037\057\042\044" +
    "\001\002\000\004\040\175\001\002\000\004\037\176\001" +
    "\002\000\004\032\177\001\002\000\004\021\200\001\002" +
    "\000\004\022\201\001\002\000\036\012\032\013\041\014" +
    "\025\015\034\016\036\020\030\023\uffe3\026\026\030\016" +
    "\031\037\035\031\036\013\037\035\042\044\001\002\000" +
    "\004\023\203\001\002\000\044\012\uffee\013\uffee\014\uffee" +
    "\015\uffee\016\uffee\020\uffee\023\uffee\026\uffee\027\uffee\030" +
    "\uffee\031\uffee\034\uffee\035\uffee\036\uffee\037\uffee\040\uffee" +
    "\042\uffee\001\002\000\012\023\uffe8\027\uffe8\034\uffe8\040" +
    "\uffe8\001\002\000\012\023\uffea\027\uffea\034\uffea\040\uffea" +
    "\001\002\000\014\002\ufff8\012\032\013\041\035\031\036" +
    "\013\001\002\000\014\002\ufff8\012\032\013\041\035\031" +
    "\036\013\001\002\000\004\002\000\001\002\000\004\037" +
    "\212\001\002\000\004\020\137\001\002\000\004\002\ufff9" +
    "\001\002\000\012\023\uffe9\027\uffe9\034\uffe9\040\uffe9\001" +
    "\002\000\012\023\uffe5\027\uffe5\034\uffe5\040\uffe5\001\002" +
    "\000\012\023\uffec\027\uffec\034\uffec\040\uffec\001\002\000" +
    "\006\037\221\050\064\001\002\000\004\043\224\001\002" +
    "\000\004\021\222\001\002\000\004\040\223\001\002\000" +
    "\044\012\uffcf\013\uffcf\014\uffcf\015\uffcf\016\uffcf\020\uffcf" +
    "\023\uffcf\026\uffcf\027\uffcf\030\uffcf\031\uffcf\034\uffcf\035" +
    "\uffcf\036\uffcf\037\uffcf\040\uffcf\042\uffcf\001\002\000\004" +
    "\037\225\001\002\000\004\021\226\001\002\000\004\040" +
    "\227\001\002\000\044\012\uffd0\013\uffd0\014\uffd0\015\uffd0" +
    "\016\uffd0\020\uffd0\023\uffd0\026\uffd0\027\uffd0\030\uffd0\031" +
    "\uffd0\034\uffd0\035\uffd0\036\uffd0\037\uffd0\040\uffd0\042\uffd0" +
    "\001\002\000\012\014\025\020\030\037\057\042\044\001" +
    "\002\000\012\014\025\020\030\037\057\042\044\001\002" +
    "\000\010\021\uffe2\040\uffe2\041\uffe2\001\002\000\010\021" +
    "\uffe1\040\uffe1\041\uffe1\001\002\000\012\023\uffe6\027\uffe6" +
    "\034\uffe6\040\uffe6\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\232\000\004\002\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\036\003\016\004\022\005" +
    "\037\006\020\007\021\010\042\013\014\015\041\016\026" +
    "\020\023\022\032\023\013\024\017\025\044\001\001\000" +
    "\002\001\001\000\036\003\016\004\022\005\037\006\020" +
    "\007\233\010\042\013\014\015\041\016\026\020\023\022" +
    "\032\023\013\024\017\025\044\001\001\000\002\001\001" +
    "\000\002\001\001\000\036\003\016\004\022\005\037\006" +
    "\020\007\215\010\042\013\014\015\041\016\026\020\023" +
    "\022\032\023\013\024\017\025\044\001\001\000\036\003" +
    "\016\004\022\005\037\006\020\007\214\010\042\013\014" +
    "\015\041\016\026\020\023\022\032\023\013\024\017\025" +
    "\044\001\001\000\036\003\016\004\022\005\037\006\020" +
    "\007\213\010\042\013\014\015\041\016\026\020\023\022" +
    "\032\023\013\024\017\025\044\001\001\000\002\001\001" +
    "\000\036\003\016\004\022\005\037\006\020\007\204\010" +
    "\042\013\014\015\041\016\026\020\023\022\032\023\013" +
    "\024\017\025\044\001\001\000\036\003\016\004\022\005" +
    "\037\006\020\007\203\010\042\013\014\015\041\016\026" +
    "\020\023\022\032\023\013\024\017\025\044\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\017\132\001\001" +
    "\000\006\013\124\015\041\001\001\000\002\001\001\000" +
    "\002\001\001\000\036\003\016\004\022\005\037\006\020" +
    "\007\123\010\042\013\014\015\041\016\026\020\023\022" +
    "\032\023\013\024\017\025\044\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\036\003\016\004\022\005\037\006\020\007\060\010\042" +
    "\013\014\015\041\016\026\020\023\022\032\023\013\024" +
    "\017\025\044\001\001\000\002\001\001\000\004\014\053" +
    "\001\001\000\002\001\001\000\002\001\001\000\036\003" +
    "\016\004\022\005\037\006\020\007\045\010\042\013\014" +
    "\015\041\016\026\020\023\022\032\023\013\024\017\025" +
    "\044\001\001\000\002\001\001\000\036\003\016\004\022" +
    "\005\037\006\020\007\047\010\042\013\014\015\041\016" +
    "\026\020\023\022\032\023\013\024\017\025\044\001\001" +
    "\000\002\001\001\000\036\003\016\004\022\005\037\006" +
    "\020\007\051\010\042\013\014\015\041\016\026\020\023" +
    "\022\032\023\013\024\017\025\044\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\015\057\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\021\062\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\010\076\013\014\015\041\001\001" +
    "\000\002\001\001\000\002\001\001\000\036\003\016\004" +
    "\022\005\037\006\020\007\101\010\042\013\014\015\041" +
    "\016\026\020\023\022\032\023\013\024\017\025\044\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\010\110\013\014\015\041\001\001\000\002\001\001" +
    "\000\002\001\001\000\036\003\016\004\022\005\037\006" +
    "\020\007\113\010\042\013\014\015\041\016\026\020\023" +
    "\022\032\023\013\024\017\025\044\001\001\000\002\001" +
    "\001\000\004\012\115\001\001\000\002\001\001\000\004" +
    "\004\117\001\001\000\002\001\001\000\036\003\016\004" +
    "\022\005\037\006\020\007\121\010\042\013\014\015\041" +
    "\016\026\020\023\022\032\023\013\024\017\025\044\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\010\131\013" +
    "\014\015\041\001\001\000\010\010\130\013\014\015\041" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\017\163\001\001\000\002" +
    "\001\001\000\010\016\141\026\140\027\137\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\016\141\027\144\001\001\000\002\001" +
    "\001\000\002\001\001\000\036\003\016\004\022\005\037" +
    "\006\020\007\147\010\042\013\014\015\041\016\026\020" +
    "\023\022\032\023\013\024\017\025\044\001\001\000\002" +
    "\001\001\000\004\034\151\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\017" +
    "\161\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\010\173\013\014\015\041\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\036\003\016\004\022\005\037\006" +
    "\020\007\201\010\042\013\014\015\041\016\026\020\023" +
    "\022\032\023\013\024\017\025\044\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\016\210\025\206\033\207\001\001\000\010\016" +
    "\210\025\206\033\212\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\021\217" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\010\232\013" +
    "\014\015\041\001\001\000\010\010\231\013\014\015\041" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // RETURN ::= tkn_letra 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RETURN",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // RETURN ::= tkn_num 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RETURN",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // RETURN ::= tkn_id 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RETURN",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // SCANF ::= tkn_scanf tkn_parentesisiz CONSTSTR tkn_coma tkn_ampersand tkn_id tkn_parentesisde tkn_puntocoma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SCANF",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // CONTADOR ::= tkn_id tkn_decrement tkn_puntocoma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTADOR",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // CONTADOR ::= tkn_id tkn_increment tkn_puntocoma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTADOR",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // TERNARIO ::= CONDICION tkn_ternario BLOQUE tkn_dospuntos BLOQUE tkn_puntocoma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TERNARIO",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // PRINTF ::= tkn_printf tkn_parentesisiz tkn_id tkn_parentesisde tkn_puntocoma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PRINTF",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // PRINTF ::= tkn_printf tkn_parentesisiz CONSTSTR tkn_coma tkn_id tkn_parentesisde tkn_puntocoma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PRINTF",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // CONSTSTR ::= tkn_comillas tkn_porcentajec tkn_comillas 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONSTSTR",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // CONSTSTR ::= tkn_comillas tkn_porcentajed tkn_comillas 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONSTSTR",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // TIPO ::= tkn_charp 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // TIPO ::= tkn_intp 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // TIPO ::= tkn_char 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // TIPO ::= tkn_int 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // VALOR ::= tkn_id 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VALOR",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // VALOR ::= tkn_num 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VALOR",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // VALOR ::= tkn_digitos 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VALOR",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // OPCONDICION ::= tkn_igual 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPCONDICION",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // OPCONDICION ::= tkn_oprel 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPCONDICION",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // CONDICIONP ::= VALOR OPCONDICION VALOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICIONP",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // CONDICION ::= CONDICIONP 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // CONDICION ::= tkn_parentesisiz CONDICIONP tkn_parentesisde 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // CONDICION ::= tkn_parentesisiz CONDICIONP tkn_parentesisde tkn_or CONDICION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // CONDICION ::= tkn_parentesisiz CONDICIONP tkn_parentesisde tkn_and CONDICION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // CONDICION ::= CONDICIONP tkn_or CONDICION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // CONDICION ::= CONDICIONP tkn_and CONDICION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // BLOQUE ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BLOQUE",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // BLOQUE ::= FUNCION BLOQUE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BLOQUE",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // BLOQUE ::= SCANF BLOQUE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BLOQUE",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // BLOQUE ::= CONTADOR BLOQUE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BLOQUE",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // BLOQUE ::= TERNARIO BLOQUE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BLOQUE",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // BLOQUE ::= PRINTF BLOQUE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BLOQUE",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // BLOQUE ::= DECLARACION BLOQUE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BLOQUE",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // BLOQUE ::= IF BLOQUE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BLOQUE",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // BLOQUE ::= FOR BLOQUE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BLOQUE",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // BLOQUE ::= WHILE BLOQUE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BLOQUE",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // WHILE ::= tkn_while tkn_parentesisiz CONDICION tkn_parentesisde tkn_llaveiz BLOQUE tkn_llaveder 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("WHILE",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // FOR ::= tkn_for tkn_parentesisiz tkn_int tkn_id tkn_igual tkn_num tkn_puntocoma CONDICION tkn_puntocoma tkn_id tkn_increment tkn_parentesisde tkn_llaveiz BLOQUE tkn_llaveder 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-14)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // ELSE ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // ELSE ::= tkn_else IF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // ELSE ::= tkn_else tkn_llaveiz BLOQUE tkn_llaveder 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // IF ::= tkn_if tkn_parentesisiz CONDICION tkn_parentesisde tkn_llaveiz BLOQUE tkn_llaveder ELSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // FUNCION ::= TIPO tkn_id tkn_parentesisiz PARAMS tkn_parentesisde tkn_llaveiz BLOQUE tkn_return RETURN tkn_puntocoma tkn_llaveder 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // DECLAPARAM ::= TIPO tkn_id 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLAPARAM",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // DECLAPARAM ::= TIPO tkn_id tkn_coma DECLAPARAM 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLAPARAM",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // PARAMS ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMS",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // PARAMS ::= DECLAPARAM 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMS",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // FUNCIONES ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCIONES",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // FUNCIONES ::= FUNCION FUNCIONES 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCIONES",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // IDINT ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IDINT",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // IDINT ::= tkn_id tkn_igual tkn_num 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IDINT",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // IDINT ::= tkn_id tkn_igual tkn_num tkn_coma IDINT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IDINT",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // IDINT ::= tkn_id 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IDINT",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // IDINT ::= tkn_id tkn_coma IDINT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IDINT",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // DECLARACION ::= TIPO IDINT tkn_puntocoma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= tkn_int tkn_main tkn_parentesisiz tkn_parentesisde tkn_llaveiz BLOQUE tkn_llaveder FUNCIONES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

