
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Aug 24 12:22:20 CST 2022
//----------------------------------------------------

package Compiladorcito;

import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Aug 24 12:22:20 CST 2022
  */
public class Sintax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\037\000\002\002\004\000\002\002\011\000\002\006" +
    "\007\000\002\006\005\000\002\017\005\000\002\017\003" +
    "\000\002\004\012\000\002\012\006\000\002\012\004\000" +
    "\002\012\002\000\002\005\021\000\002\003\011\000\002" +
    "\007\004\000\002\007\004\000\002\007\004\000\002\007" +
    "\004\000\002\007\002\000\002\010\005\000\002\010\005" +
    "\000\002\010\007\000\002\010\007\000\002\010\005\000" +
    "\002\010\003\000\002\013\005\000\002\014\003\000\002" +
    "\014\003\000\002\015\003\000\002\015\003\000\002\015" +
    "\003\000\002\016\003\000\002\016\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\124\000\004\035\004\001\002\000\004\010\007\001" +
    "\002\000\004\002\006\001\002\000\004\002\001\001\002" +
    "\000\004\020\010\001\002\000\004\021\011\001\002\000" +
    "\004\022\012\001\002\000\016\015\017\016\013\023\ufff1" +
    "\026\014\035\025\036\023\001\002\000\004\020\121\001" +
    "\002\000\004\020\103\001\002\000\016\015\017\016\013" +
    "\023\ufff1\026\014\035\025\036\023\001\002\000\016\015" +
    "\017\016\013\023\ufff1\026\014\035\025\036\023\001\002" +
    "\000\004\020\041\001\002\000\016\015\017\016\013\023" +
    "\ufff1\026\014\035\025\036\023\001\002\000\016\015\017" +
    "\016\013\023\ufff1\026\014\035\025\036\023\001\002\000" +
    "\004\037\030\001\002\000\004\037\uffe3\001\002\000\004" +
    "\023\026\001\002\000\004\037\uffe4\001\002\000\004\002" +
    "\000\001\002\000\006\011\033\040\034\001\002\000\010" +
    "\011\ufffc\040\ufffc\043\031\001\002\000\004\037\030\001" +
    "\002\000\006\011\ufffd\040\ufffd\001\002\000\004\042\035" +
    "\001\002\000\016\015\ufffe\016\ufffe\023\ufffe\026\ufffe\035" +
    "\ufffe\036\ufffe\001\002\000\004\040\036\001\002\000\016" +
    "\015\uffff\016\uffff\023\uffff\026\uffff\035\uffff\036\uffff\001" +
    "\002\000\004\023\ufff3\001\002\000\004\023\ufff2\001\002" +
    "\000\012\014\044\020\047\037\046\042\050\001\002\000" +
    "\012\021\uffeb\024\076\025\075\040\uffeb\001\002\000\004" +
    "\021\063\001\002\000\016\007\uffe7\011\uffe7\021\uffe7\024" +
    "\uffe7\025\uffe7\040\uffe7\001\002\000\006\007\061\011\060" +
    "\001\002\000\016\007\uffe5\011\uffe5\021\uffe5\024\uffe5\025" +
    "\uffe5\040\uffe5\001\002\000\010\014\044\037\046\042\050" +
    "\001\002\000\016\007\uffe6\011\uffe6\021\uffe6\024\uffe6\025" +
    "\uffe6\040\uffe6\001\002\000\004\021\052\001\002\000\012" +
    "\021\uffec\024\054\025\053\040\uffec\001\002\000\012\014" +
    "\044\020\047\037\046\042\050\001\002\000\012\014\044" +
    "\020\047\037\046\042\050\001\002\000\006\021\uffee\040" +
    "\uffee\001\002\000\006\021\uffed\040\uffed\001\002\000\010" +
    "\014\044\037\046\042\050\001\002\000\010\014\uffe8\037" +
    "\uffe8\042\uffe8\001\002\000\010\014\uffe9\037\uffe9\042\uffe9" +
    "\001\002\000\012\021\uffea\024\uffea\025\uffea\040\uffea\001" +
    "\002\000\004\022\064\001\002\000\016\015\017\016\013" +
    "\023\ufff1\026\014\035\025\036\023\001\002\000\004\023" +
    "\066\001\002\000\020\015\ufff8\016\ufff8\017\070\023\ufff8" +
    "\026\ufff8\035\ufff8\036\ufff8\001\002\000\016\015\ufffb\016" +
    "\ufffb\023\ufffb\026\ufffb\035\ufffb\036\ufffb\001\002\000\006" +
    "\015\017\022\072\001\002\000\016\015\ufff9\016\ufff9\023" +
    "\ufff9\026\ufff9\035\ufff9\036\ufff9\001\002\000\016\015\017" +
    "\016\013\023\ufff1\026\014\035\025\036\023\001\002\000" +
    "\004\023\074\001\002\000\016\015\ufffa\016\ufffa\023\ufffa" +
    "\026\ufffa\035\ufffa\036\ufffa\001\002\000\012\014\044\020" +
    "\047\037\046\042\050\001\002\000\012\014\044\020\047" +
    "\037\046\042\050\001\002\000\006\021\ufff0\040\ufff0\001" +
    "\002\000\006\021\uffef\040\uffef\001\002\000\004\023\ufff4" +
    "\001\002\000\004\023\ufff5\001\002\000\004\035\104\001" +
    "\002\000\004\037\105\001\002\000\004\011\106\001\002" +
    "\000\004\042\107\001\002\000\004\040\110\001\002\000" +
    "\012\014\044\020\047\037\046\042\050\001\002\000\004" +
    "\040\112\001\002\000\004\037\113\001\002\000\004\032" +
    "\114\001\002\000\004\021\115\001\002\000\004\022\116" +
    "\001\002\000\016\015\017\016\013\023\ufff1\026\014\035" +
    "\025\036\023\001\002\000\004\023\120\001\002\000\016" +
    "\015\ufff7\016\ufff7\023\ufff7\026\ufff7\035\ufff7\036\ufff7\001" +
    "\002\000\012\014\044\020\047\037\046\042\050\001\002" +
    "\000\004\021\123\001\002\000\004\022\124\001\002\000" +
    "\016\015\017\016\013\023\ufff1\026\014\035\025\036\023" +
    "\001\002\000\004\023\126\001\002\000\016\015\ufff6\016" +
    "\ufff6\023\ufff6\026\ufff6\035\ufff6\036\ufff6\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\124\000\004\002\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\003\014\004\020\005" +
    "\015\006\017\007\023\016\021\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\003\014\004\020\005\015\006" +
    "\017\007\101\016\021\001\001\000\016\003\014\004\020" +
    "\005\015\006\017\007\100\016\021\001\001\000\002\001" +
    "\001\000\016\003\014\004\020\005\015\006\017\007\037" +
    "\016\021\001\001\000\016\003\014\004\020\005\015\006" +
    "\017\007\036\016\021\001\001\000\004\017\026\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\017\031\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\010\042\013\041\015" +
    "\044\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\014\056\001\001\000\002\001\001\000" +
    "\006\013\050\015\044\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\010\055\013\041\015" +
    "\044\001\001\000\010\010\054\013\041\015\044\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\015\061\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\003\014\004\020\005\015\006" +
    "\017\007\064\016\021\001\001\000\002\001\001\000\004" +
    "\012\066\001\001\000\002\001\001\000\004\004\070\001" +
    "\001\000\002\001\001\000\016\003\014\004\020\005\015" +
    "\006\017\007\072\016\021\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\010\077\013\041\015\044\001\001" +
    "\000\010\010\076\013\041\015\044\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\010\110\013\041" +
    "\015\044\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\003\014\004\020\005\015\006\017\007\116\016\021\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\010\121" +
    "\013\041\015\044\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\003\014\004\020\005\015\006\017\007\124" +
    "\016\021\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // TIPO ::= tkn_char 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // TIPO ::= tkn_int 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // VALOR ::= tkn_id 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VALOR",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // VALOR ::= tkn_num 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VALOR",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // VALOR ::= tkn_digitos 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VALOR",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // OPCONDICION ::= tkn_igual 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPCONDICION",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // OPCONDICION ::= tkn_oprel 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPCONDICION",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // CONDICIONP ::= VALOR OPCONDICION VALOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICIONP",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // CONDICION ::= CONDICIONP 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // CONDICION ::= tkn_parentesisiz CONDICIONP tkn_parentesisde 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // CONDICION ::= tkn_parentesisiz CONDICIONP tkn_parentesisde tkn_or CONDICION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // CONDICION ::= tkn_parentesisiz CONDICIONP tkn_parentesisde tkn_and CONDICION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // CONDICION ::= CONDICIONP tkn_or CONDICION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // CONDICION ::= CONDICIONP tkn_and CONDICION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // BLOQUE ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BLOQUE",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // BLOQUE ::= DECLARACION BLOQUE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BLOQUE",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // BLOQUE ::= IF BLOQUE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BLOQUE",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // BLOQUE ::= FOR BLOQUE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BLOQUE",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // BLOQUE ::= WHILE BLOQUE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BLOQUE",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // WHILE ::= tkn_while tkn_parentesisiz CONDICION tkn_parentesisde tkn_llaveiz BLOQUE tkn_llaveder 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("WHILE",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // FOR ::= tkn_for tkn_parentesisiz tkn_int tkn_id tkn_igual tkn_num tkn_puntocoma CONDICION tkn_puntocoma tkn_id tkn_increment tkn_parentesisde tkn_llaveiz BLOQUE tkn_llaveder 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-14)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // ELSE ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // ELSE ::= tkn_else IF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // ELSE ::= tkn_else tkn_llaveiz BLOQUE tkn_llaveder 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // IF ::= tkn_if tkn_parentesisiz CONDICION tkn_parentesisde tkn_llaveiz BLOQUE tkn_llaveder ELSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // ID ::= tkn_id 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ID",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // ID ::= tkn_id tkn_coma ID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ID",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // DECLARACION ::= TIPO ID tkn_puntocoma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // DECLARACION ::= TIPO ID tkn_igual tkn_num tkn_puntocoma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= tkn_int tkn_main tkn_parentesisiz tkn_parentesisde tkn_llaveiz BLOQUE tkn_llaveder 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

