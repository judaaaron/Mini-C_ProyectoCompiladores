
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Aug 30 12:57:29 CST 2022
//----------------------------------------------------

package Compiladorcito;

import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Aug 30 12:57:29 CST 2022
  */
public class Sintax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\113\000\002\002\004\000\002\002\015\000\002\006" +
    "\005\000\002\017\005\000\002\017\003\000\002\017\007" +
    "\000\002\017\005\000\002\017\007\000\002\017\005\000" +
    "\002\017\002\000\002\033\004\000\002\033\002\000\002" +
    "\031\004\000\002\031\003\000\002\026\003\000\002\026" +
    "\002\000\002\035\003\000\002\035\002\000\002\042\003" +
    "\000\002\042\002\000\002\032\006\000\002\032\005\000" +
    "\002\032\003\000\002\032\004\000\002\027\006\000\002" +
    "\027\004\000\002\025\015\000\002\041\005\000\002\041" +
    "\003\000\002\040\007\000\002\037\006\000\002\037\003" +
    "\000\002\030\010\000\002\030\003\000\002\004\012\000" +
    "\002\012\006\000\002\012\004\000\002\012\002\000\002" +
    "\005\021\000\002\003\011\000\002\007\004\000\002\007" +
    "\004\000\002\007\004\000\002\007\004\000\002\007\004" +
    "\000\002\007\004\000\002\007\004\000\002\007\004\000" +
    "\002\007\004\000\002\007\002\000\002\010\005\000\002" +
    "\010\005\000\002\010\007\000\002\010\007\000\002\010" +
    "\005\000\002\010\003\000\002\013\005\000\002\014\003" +
    "\000\002\014\003\000\002\015\003\000\002\015\003\000" +
    "\002\015\003\000\002\016\003\000\002\016\003\000\002" +
    "\016\003\000\002\016\003\000\002\020\011\000\002\020" +
    "\007\000\002\022\010\000\002\023\005\000\002\023\005" +
    "\000\002\024\012\000\002\034\003\000\002\034\003\000" +
    "\002\034\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\267\000\012\012\013\013\007\035\014\036\011\001" +
    "\002\000\012\012\uffe0\013\uffe0\035\uffe0\036\uffe0\001\002" +
    "\000\004\002\ufff4\001\002\000\012\012\013\013\007\035" +
    "\014\036\011\001\002\000\012\021\uffc1\037\uffc1\040\uffc1" +
    "\043\uffc1\001\002\000\006\037\255\040\ufff8\001\002\000" +
    "\012\021\uffc3\037\uffc3\040\uffc3\043\uffc3\001\002\000\004" +
    "\002\254\001\002\000\012\021\uffc2\037\uffc2\040\uffc2\043" +
    "\uffc2\001\002\000\010\010\015\037\uffc0\040\uffc0\001\002" +
    "\000\004\020\016\001\002\000\004\021\017\001\002\000" +
    "\004\022\020\001\002\000\036\012\013\013\007\014\033" +
    "\015\042\016\044\020\036\026\034\027\uffd0\030\023\031" +
    "\045\035\037\036\011\037\043\042\051\001\002\000\014" +
    "\021\uffca\024\251\025\250\040\uffca\041\uffca\001\002\000" +
    "\044\012\013\013\007\014\033\015\042\016\044\020\036" +
    "\023\uffd0\026\034\027\uffd0\030\023\031\045\034\uffd0\035" +
    "\037\036\011\037\043\040\uffd0\042\051\001\002\000\004" +
    "\020\237\001\002\000\044\012\013\013\007\014\033\015" +
    "\042\016\044\020\036\023\uffd0\026\034\027\uffd0\030\023" +
    "\031\045\034\uffd0\035\037\036\011\037\043\040\uffd0\042" +
    "\051\001\002\000\044\012\013\013\007\014\033\015\042" +
    "\016\044\020\036\023\uffd0\026\034\027\uffd0\030\023\031" +
    "\045\034\uffd0\035\037\036\011\037\043\040\uffd0\042\051" +
    "\001\002\000\044\012\013\013\007\014\033\015\042\016" +
    "\044\020\036\023\uffd0\026\034\027\uffd0\030\023\031\045" +
    "\034\uffd0\035\037\036\011\037\043\040\uffd0\042\051\001" +
    "\002\000\044\012\uffe2\013\uffe2\014\uffe2\015\uffe2\016\uffe2" +
    "\020\uffe2\023\uffe2\026\uffe2\027\uffe2\030\uffe2\031\uffe2\034" +
    "\uffe2\035\uffe2\036\uffe2\037\uffe2\040\uffe2\042\uffe2\001\002" +
    "\000\004\027\202\001\002\000\044\012\013\013\007\014" +
    "\033\015\042\016\044\020\036\023\uffd0\026\034\027\uffd0" +
    "\030\023\031\045\034\uffd0\035\037\036\011\037\043\040" +
    "\uffd0\042\051\001\002\000\044\012\013\013\007\014\033" +
    "\015\042\016\044\020\036\023\uffd0\026\034\027\uffd0\030" +
    "\023\031\045\034\uffd0\035\037\036\011\037\043\040\uffd0" +
    "\042\051\001\002\000\020\007\uffc6\011\uffc6\021\uffc6\024" +
    "\uffc6\025\uffc6\040\uffc6\041\uffc6\001\002\000\004\020\162" +
    "\001\002\000\006\037\143\040\ufff8\001\002\000\010\014" +
    "\033\037\062\042\051\001\002\000\012\021\uffc0\037\uffc0" +
    "\040\uffc0\043\uffc0\001\002\000\044\012\013\013\007\014" +
    "\033\015\042\016\044\020\036\023\uffd0\026\034\027\uffd0" +
    "\030\023\031\045\034\uffd0\035\037\036\011\037\043\040" +
    "\uffd0\042\051\001\002\000\044\012\013\013\007\014\033" +
    "\015\042\016\044\020\036\023\uffd0\026\034\027\uffd0\030" +
    "\023\031\045\034\uffd0\035\037\036\011\037\043\040\uffd0" +
    "\042\051\001\002\000\004\020\116\001\002\000\014\007" +
    "\uffc4\011\uffc4\020\104\032\103\033\102\001\002\000\004" +
    "\020\074\001\002\000\004\020\065\001\002\000\044\012" +
    "\013\013\007\014\033\015\042\016\044\020\036\023\uffd0" +
    "\026\034\027\uffd0\030\023\031\045\034\uffd0\035\037\036" +
    "\011\037\043\040\uffd0\042\051\001\002\000\006\007\061" +
    "\011\060\001\002\000\004\041\052\001\002\000\020\007" +
    "\uffc5\011\uffc5\021\uffc5\024\uffc5\025\uffc5\040\uffc5\041\uffc5" +
    "\001\002\000\036\012\013\013\007\014\033\015\042\016" +
    "\044\020\036\026\034\030\023\031\045\034\uffd0\035\037" +
    "\036\011\037\043\042\051\001\002\000\004\034\054\001" +
    "\002\000\036\012\013\013\007\014\033\015\042\016\044" +
    "\020\036\026\034\030\023\031\045\035\037\036\011\037" +
    "\043\040\uffd0\042\051\001\002\000\004\040\056\001\002" +
    "\000\044\012\uffbd\013\uffbd\014\uffbd\015\uffbd\016\uffbd\020" +
    "\uffbd\023\uffbd\026\uffbd\027\uffbd\030\uffbd\031\uffbd\034\uffbd" +
    "\035\uffbd\036\uffbd\037\uffbd\040\uffbd\042\uffbd\001\002\000" +
    "\010\014\033\037\062\042\051\001\002\000\010\014\uffc7" +
    "\037\uffc7\042\uffc7\001\002\000\010\014\uffc8\037\uffc8\042" +
    "\uffc8\001\002\000\020\007\uffc4\011\uffc4\021\uffc4\024\uffc4" +
    "\025\uffc4\040\uffc4\041\uffc4\001\002\000\014\021\uffc9\024" +
    "\uffc9\025\uffc9\040\uffc9\041\uffc9\001\002\000\012\023\uffd8" +
    "\027\uffd8\034\uffd8\040\uffd8\001\002\000\002\001\002\000" +
    "\004\043\067\001\002\000\004\051\070\001\002\000\004" +
    "\037\071\001\002\000\004\021\072\001\002\000\004\040" +
    "\073\001\002\000\044\012\uffba\013\uffba\014\uffba\015\uffba" +
    "\016\uffba\020\uffba\023\uffba\026\uffba\027\uffba\030\uffba\031" +
    "\uffba\034\uffba\035\uffba\036\uffba\037\uffba\040\uffba\042\uffba" +
    "\001\002\000\012\014\033\020\036\037\062\042\051\001" +
    "\002\000\004\021\076\001\002\000\004\022\077\001\002" +
    "\000\036\012\013\013\007\014\033\015\042\016\044\020" +
    "\036\023\uffd0\026\034\030\023\031\045\035\037\036\011" +
    "\037\043\042\051\001\002\000\004\023\101\001\002\000" +
    "\044\012\uffda\013\uffda\014\uffda\015\uffda\016\uffda\020\uffda" +
    "\023\uffda\026\uffda\027\uffda\030\uffda\031\uffda\034\uffda\035" +
    "\uffda\036\uffda\037\uffda\040\uffda\042\uffda\001\002\000\004" +
    "\040\115\001\002\000\004\040\114\001\002\000\006\021" +
    "\uffee\037\106\001\002\000\004\021\112\001\002\000\006" +
    "\021\uffe5\043\110\001\002\000\004\021\uffef\001\002\000" +
    "\004\037\106\001\002\000\004\021\uffe6\001\002\000\004" +
    "\040\113\001\002\000\044\012\uffe4\013\uffe4\014\uffe4\015" +
    "\uffe4\016\uffe4\020\uffe4\023\uffe4\026\uffe4\027\uffe4\030\uffe4" +
    "\031\uffe4\034\uffe4\035\uffe4\036\uffe4\037\uffe4\040\uffe4\042" +
    "\uffe4\001\002\000\044\012\uffbc\013\uffbc\014\uffbc\015\uffbc" +
    "\016\uffbc\020\uffbc\023\uffbc\026\uffbc\027\uffbc\030\uffbc\031" +
    "\uffbc\034\uffbc\035\uffbc\036\uffbc\037\uffbc\040\uffbc\042\uffbc" +
    "\001\002\000\044\012\uffbb\013\uffbb\014\uffbb\015\uffbb\016" +
    "\uffbb\020\uffbb\023\uffbb\026\uffbb\027\uffbb\030\uffbb\031\uffbb" +
    "\034\uffbb\035\uffbb\036\uffbb\037\uffbb\040\uffbb\042\uffbb\001" +
    "\002\000\012\014\033\020\036\037\062\042\051\001\002" +
    "\000\004\021\120\001\002\000\004\022\121\001\002\000" +
    "\036\012\013\013\007\014\033\015\042\016\044\020\036" +
    "\023\uffd0\026\034\030\023\031\045\035\037\036\011\037" +
    "\043\042\051\001\002\000\004\023\123\001\002\000\046" +
    "\012\uffdc\013\uffdc\014\uffdc\015\uffdc\016\uffdc\017\125\020" +
    "\uffdc\023\uffdc\026\uffdc\027\uffdc\030\uffdc\031\uffdc\034\uffdc" +
    "\035\uffdc\036\uffdc\037\uffdc\040\uffdc\042\uffdc\001\002\000" +
    "\044\012\uffdf\013\uffdf\014\uffdf\015\uffdf\016\uffdf\020\uffdf" +
    "\023\uffdf\026\uffdf\027\uffdf\030\uffdf\031\uffdf\034\uffdf\035" +
    "\uffdf\036\uffdf\037\uffdf\040\uffdf\042\uffdf\001\002\000\006" +
    "\015\042\022\127\001\002\000\044\012\uffdd\013\uffdd\014" +
    "\uffdd\015\uffdd\016\uffdd\020\uffdd\023\uffdd\026\uffdd\027\uffdd" +
    "\030\uffdd\031\uffdd\034\uffdd\035\uffdd\036\uffdd\037\uffdd\040" +
    "\uffdd\042\uffdd\001\002\000\036\012\013\013\007\014\033" +
    "\015\042\016\044\020\036\023\uffd0\026\034\030\023\031" +
    "\045\035\037\036\011\037\043\042\051\001\002\000\004" +
    "\023\131\001\002\000\044\012\uffde\013\uffde\014\uffde\015" +
    "\uffde\016\uffde\020\uffde\023\uffde\026\uffde\027\uffde\030\uffde" +
    "\031\uffde\034\uffde\035\uffde\036\uffde\037\uffde\040\uffde\042" +
    "\uffde\001\002\000\012\023\uffd4\027\uffd4\034\uffd4\040\uffd4" +
    "\001\002\000\012\023\uffd1\027\uffd1\034\uffd1\040\uffd1\001" +
    "\002\000\004\021\135\001\002\000\014\021\uffcb\024\137" +
    "\025\136\040\uffcb\041\uffcb\001\002\000\012\014\033\020" +
    "\036\037\062\042\051\001\002\000\012\014\033\020\036" +
    "\037\062\042\051\001\002\000\010\021\uffcd\040\uffcd\041" +
    "\uffcd\001\002\000\010\021\uffcc\040\uffcc\041\uffcc\001\002" +
    "\000\004\040\161\001\002\000\010\011\145\040\ufffd\043" +
    "\144\001\002\000\006\037\154\040\ufff8\001\002\000\010" +
    "\037\147\042\150\053\146\001\002\000\006\040\ufff9\043" +
    "\156\001\002\000\004\020\104\001\002\000\006\040\ufffb" +
    "\043\152\001\002\000\044\012\uffe3\013\uffe3\014\uffe3\015" +
    "\uffe3\016\uffe3\020\uffe3\023\uffe3\026\uffe3\027\uffe3\030\uffe3" +
    "\031\uffe3\034\uffe3\035\uffe3\036\uffe3\037\uffe3\040\uffe3\042" +
    "\uffe3\001\002\000\006\037\154\040\ufff8\001\002\000\004" +
    "\040\ufffc\001\002\000\010\011\155\040\ufffd\043\144\001" +
    "\002\000\006\042\150\053\146\001\002\000\006\037\154" +
    "\040\ufff8\001\002\000\004\040\ufffa\001\002\000\004\040" +
    "\ufffe\001\002\000\044\012\uffff\013\uffff\014\uffff\015\uffff" +
    "\016\uffff\020\uffff\023\uffff\026\uffff\027\uffff\030\uffff\031" +
    "\uffff\034\uffff\035\uffff\036\uffff\037\uffff\040\uffff\042\uffff" +
    "\001\002\000\004\035\163\001\002\000\004\037\164\001" +
    "\002\000\004\011\165\001\002\000\004\042\166\001\002" +
    "\000\004\040\167\001\002\000\012\014\033\020\036\037" +
    "\062\042\051\001\002\000\004\040\171\001\002\000\004" +
    "\037\172\001\002\000\004\032\173\001\002\000\004\021" +
    "\174\001\002\000\004\022\175\001\002\000\036\012\013" +
    "\013\007\014\033\015\042\016\044\020\036\023\uffd0\026" +
    "\034\030\023\031\045\035\037\036\011\037\043\042\051" +
    "\001\002\000\004\023\177\001\002\000\044\012\uffdb\013" +
    "\uffdb\014\uffdb\015\uffdb\016\uffdb\020\uffdb\023\uffdb\026\uffdb" +
    "\027\uffdb\030\uffdb\031\uffdb\034\uffdb\035\uffdb\036\uffdb\037" +
    "\uffdb\040\uffdb\042\uffdb\001\002\000\012\023\uffd5\027\uffd5" +
    "\034\uffd5\040\uffd5\001\002\000\012\023\uffd7\027\uffd7\034" +
    "\uffd7\040\uffd7\001\002\000\004\042\203\001\002\000\004" +
    "\040\204\001\002\000\004\023\205\001\002\000\014\002" +
    "\ufff6\012\013\013\007\035\037\036\011\001\002\000\014" +
    "\002\ufff6\012\013\013\007\035\037\036\011\001\002\000" +
    "\004\002\000\001\002\000\004\037\211\001\002\000\004" +
    "\020\212\001\002\000\014\012\013\013\007\021\ufff2\035" +
    "\037\036\011\001\002\000\004\021\ufff3\001\002\000\004" +
    "\021\221\001\002\000\004\037\216\001\002\000\006\021" +
    "\uffe8\043\217\001\002\000\012\012\013\013\007\035\037" +
    "\036\011\001\002\000\004\021\uffe9\001\002\000\004\022" +
    "\222\001\002\000\036\012\013\013\007\014\033\015\042" +
    "\016\044\020\036\026\034\027\uffd0\030\023\031\045\035" +
    "\037\036\011\037\043\042\051\001\002\000\004\027\224" +
    "\001\002\000\010\037\227\042\230\053\225\001\002\000" +
    "\004\040\uffb7\001\002\000\004\040\231\001\002\000\004" +
    "\040\uffb9\001\002\000\004\040\uffb8\001\002\000\004\023" +
    "\232\001\002\000\014\002\uffe7\012\uffe7\013\uffe7\035\uffe7" +
    "\036\uffe7\001\002\000\004\002\ufff7\001\002\000\012\023" +
    "\uffd6\027\uffd6\034\uffd6\040\uffd6\001\002\000\012\023\uffd2" +
    "\027\uffd2\034\uffd2\040\uffd2\001\002\000\012\023\uffd9\027" +
    "\uffd9\034\uffd9\040\uffd9\001\002\000\004\052\240\001\002" +
    "\000\006\021\242\043\241\001\002\000\004\037\244\001" +
    "\002\000\004\040\243\001\002\000\044\012\uffbe\013\uffbe" +
    "\014\uffbe\015\uffbe\016\uffbe\020\uffbe\023\uffbe\026\uffbe\027" +
    "\uffbe\030\uffbe\031\uffbe\034\uffbe\035\uffbe\036\uffbe\037\uffbe" +
    "\040\uffbe\042\uffbe\001\002\000\004\021\245\001\002\000" +
    "\004\040\246\001\002\000\044\012\uffbf\013\uffbf\014\uffbf" +
    "\015\uffbf\016\uffbf\020\uffbf\023\uffbf\026\uffbf\027\uffbf\030" +
    "\uffbf\031\uffbf\034\uffbf\035\uffbf\036\uffbf\037\uffbf\040\uffbf" +
    "\042\uffbf\001\002\000\012\023\uffd3\027\uffd3\034\uffd3\040" +
    "\uffd3\001\002\000\012\014\033\020\036\037\062\042\051" +
    "\001\002\000\012\014\033\020\036\037\062\042\051\001" +
    "\002\000\010\021\uffcf\040\uffcf\041\uffcf\001\002\000\010" +
    "\021\uffce\040\uffce\041\uffce\001\002\000\004\002\001\001" +
    "\002\000\012\011\155\020\256\040\ufffd\043\144\001\002" +
    "\000\014\012\013\013\007\021\ufff0\035\037\036\011\001" +
    "\002\000\004\021\267\001\002\000\004\021\ufff1\001\002" +
    "\000\010\021\uffeb\037\263\043\262\001\002\000\012\012" +
    "\013\013\007\035\037\036\011\001\002\000\006\021\uffea" +
    "\043\264\001\002\000\012\012\013\013\007\035\037\036" +
    "\011\001\002\000\004\021\uffed\001\002\000\004\021\uffec" +
    "\001\002\000\004\040\270\001\002\000\012\012\uffe1\013" +
    "\uffe1\035\uffe1\036\uffe1\001\002\000\004\002\ufff5\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\267\000\014\002\004\006\003\016\007\030\005\031" +
    "\011\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\002\004\006\003\016\007\030\005\031\270\001\001\000" +
    "\002\001\001\000\004\017\141\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\040" +
    "\003\023\004\030\005\045\006\025\007\027\010\047\013" +
    "\020\015\046\016\034\020\031\022\040\023\021\024\024" +
    "\037\037\040\026\001\001\000\002\001\001\000\040\003" +
    "\023\004\030\005\045\006\025\007\246\010\047\013\020" +
    "\015\046\016\034\020\031\022\040\023\021\024\024\037" +
    "\037\040\026\001\001\000\002\001\001\000\040\003\023" +
    "\004\030\005\045\006\025\007\235\010\047\013\020\015" +
    "\046\016\034\020\031\022\040\023\021\024\024\037\037" +
    "\040\026\001\001\000\040\003\023\004\030\005\045\006" +
    "\025\007\234\010\047\013\020\015\046\016\034\020\031" +
    "\022\040\023\021\024\024\037\037\040\026\001\001\000" +
    "\040\003\023\004\030\005\045\006\025\007\233\010\047" +
    "\013\020\015\046\016\034\020\031\022\040\023\021\024" +
    "\024\037\037\040\026\001\001\000\002\001\001\000\002" +
    "\001\001\000\040\003\023\004\030\005\045\006\025\007" +
    "\200\010\047\013\020\015\046\016\034\020\031\022\040" +
    "\023\021\024\024\037\037\040\026\001\001\000\040\003" +
    "\023\004\030\005\045\006\025\007\177\010\047\013\020" +
    "\015\046\016\034\020\031\022\040\023\021\024\024\037" +
    "\037\040\026\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\017\141\001\001\000\006\013\133\015\046\001" +
    "\001\000\002\001\001\000\040\003\023\004\030\005\045" +
    "\006\025\007\132\010\047\013\020\015\046\016\034\020" +
    "\031\022\040\023\021\024\024\037\037\040\026\001\001" +
    "\000\040\003\023\004\030\005\045\006\025\007\131\010" +
    "\047\013\020\015\046\016\034\020\031\022\040\023\021" +
    "\024\024\037\037\040\026\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\040" +
    "\003\023\004\030\005\045\006\025\007\063\010\047\013" +
    "\020\015\046\016\034\020\031\022\040\023\021\024\024" +
    "\037\037\040\026\001\001\000\004\014\056\001\001\000" +
    "\002\001\001\000\002\001\001\000\040\003\023\004\030" +
    "\005\045\006\025\007\052\010\047\013\020\015\046\016" +
    "\034\020\031\022\040\023\021\024\024\037\037\040\026" +
    "\001\001\000\002\001\001\000\040\003\023\004\030\005" +
    "\045\006\025\007\054\010\047\013\020\015\046\016\034" +
    "\020\031\022\040\023\021\024\024\037\037\040\026\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\015\062" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\021\065" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\010\074\013\020\015\046\001\001\000\002\001" +
    "\001\000\002\001\001\000\040\003\023\004\030\005\045" +
    "\006\025\007\077\010\047\013\020\015\046\016\034\020" +
    "\031\022\040\023\021\024\024\037\037\040\026\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\041\106\042\104\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\041" +
    "\110\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\010" +
    "\116\013\020\015\046\001\001\000\002\001\001\000\002" +
    "\001\001\000\040\003\023\004\030\005\045\006\025\007" +
    "\121\010\047\013\020\015\046\016\034\020\031\022\040" +
    "\023\021\024\024\037\037\040\026\001\001\000\002\001" +
    "\001\000\004\012\123\001\001\000\002\001\001\000\004" +
    "\004\125\001\001\000\002\001\001\000\040\003\023\004" +
    "\030\005\045\006\025\007\127\010\047\013\020\015\046" +
    "\016\034\020\031\022\040\023\021\024\024\037\037\040" +
    "\026\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\010\140\013\020\015\046\001\001\000\010" +
    "\010\137\013\020\015\046\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\017\157\001\001\000\004\040\150\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\017\152\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\017\156\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\010\167\013\020\015\046\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\040\003\023\004" +
    "\030\005\045\006\025\007\175\010\047\013\020\015\046" +
    "\016\034\020\031\022\040\023\021\024\024\037\037\040" +
    "\026\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\016\207\025\205\033\206" +
    "\001\001\000\010\016\207\025\205\033\232\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\016\214\026\213\027\212\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\016\214\027\217\001\001\000\002\001\001\000\002\001" +
    "\001\000\040\003\023\004\030\005\045\006\025\007\222" +
    "\010\047\013\020\015\046\016\034\020\031\022\040\023" +
    "\021\024\024\037\037\040\026\001\001\000\002\001\001" +
    "\000\004\034\225\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\010\252\013\020\015\046\001" +
    "\001\000\010\010\251\013\020\015\046\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\016\260\032\257\035\256\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\016" +
    "\260\032\265\001\001\000\002\001\001\000\006\016\260" +
    "\032\264\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // RETURN ::= tkn_caracter 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RETURN",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // RETURN ::= tkn_num 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RETURN",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // RETURN ::= tkn_id 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RETURN",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // SCANF ::= tkn_scanf tkn_parentesisiz CONSTSTR tkn_coma tkn_ampersand tkn_id tkn_parentesisde tkn_puntocoma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SCANF",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // CONTADOR ::= tkn_id tkn_decrement tkn_puntocoma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTADOR",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // CONTADOR ::= tkn_id tkn_increment tkn_puntocoma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTADOR",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // TERNARIO ::= CONDICION tkn_ternario BLOQUE tkn_dospuntos BLOQUE tkn_puntocoma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TERNARIO",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // PRINTF ::= tkn_printf tkn_parentesisiz tkn_cadena tkn_parentesisde tkn_puntocoma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PRINTF",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // PRINTF ::= tkn_printf tkn_parentesisiz tkn_cadena tkn_coma tkn_id tkn_parentesisde tkn_puntocoma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PRINTF",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // TIPO ::= tkn_int 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // TIPO ::= tkn_charp 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // TIPO ::= tkn_intp 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // TIPO ::= tkn_char 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // VALOR ::= tkn_id 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VALOR",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // VALOR ::= tkn_num 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VALOR",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // VALOR ::= tkn_digitos 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VALOR",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // OPCONDICION ::= tkn_igual 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPCONDICION",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // OPCONDICION ::= tkn_oprel 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPCONDICION",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // CONDICIONP ::= VALOR OPCONDICION VALOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICIONP",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // CONDICION ::= CONDICIONP 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // CONDICION ::= tkn_parentesisiz CONDICIONP tkn_parentesisde 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // CONDICION ::= tkn_parentesisiz CONDICIONP tkn_parentesisde tkn_or CONDICION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // CONDICION ::= tkn_parentesisiz CONDICIONP tkn_parentesisde tkn_and CONDICION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // CONDICION ::= CONDICIONP tkn_or CONDICION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // CONDICION ::= CONDICIONP tkn_and CONDICION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // BLOQUE ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BLOQUE",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // BLOQUE ::= LLAMADO BLOQUE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BLOQUE",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // BLOQUE ::= SCANF BLOQUE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BLOQUE",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // BLOQUE ::= CONTADOR BLOQUE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BLOQUE",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // BLOQUE ::= TERNARIO BLOQUE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BLOQUE",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // BLOQUE ::= PRINTF BLOQUE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BLOQUE",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // BLOQUE ::= DECLARACION BLOQUE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BLOQUE",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // BLOQUE ::= IF BLOQUE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BLOQUE",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // BLOQUE ::= FOR BLOQUE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BLOQUE",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // BLOQUE ::= WHILE BLOQUE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BLOQUE",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // WHILE ::= tkn_while tkn_parentesisiz CONDICION tkn_parentesisde tkn_llaveiz BLOQUE tkn_llaveder 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("WHILE",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // FOR ::= tkn_for tkn_parentesisiz tkn_int tkn_id tkn_igual tkn_num tkn_puntocoma CONDICION tkn_puntocoma tkn_id tkn_increment tkn_parentesisde tkn_llaveiz BLOQUE tkn_llaveder 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-14)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // ELSE ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // ELSE ::= tkn_else IF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // ELSE ::= tkn_else tkn_llaveiz BLOQUE tkn_llaveder 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // IF ::= tkn_if tkn_parentesisiz CONDICION tkn_parentesisde tkn_llaveiz BLOQUE tkn_llaveder ELSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // PROTOTIPO ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PROTOTIPO",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // PROTOTIPO ::= TIPO tkn_id tkn_parentesisiz PARAMS2 tkn_parentesisde tkn_puntocoma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PROTOTIPO",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // LLAMADO ::= CALLBACK 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LLAMADO",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // LLAMADO ::= TIPO tkn_id tkn_igual CALLBACK 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LLAMADO",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // CALLBACK ::= tkn_id tkn_parentesisiz PARAMS3 tkn_parentesisde tkn_puntocoma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CALLBACK",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // CALLPARAMS ::= tkn_id 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CALLPARAMS",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // CALLPARAMS ::= tkn_id tkn_coma CALLPARAMS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CALLPARAMS",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // FUNCION ::= TIPO tkn_id tkn_parentesisiz PARAMS tkn_parentesisde tkn_llaveiz BLOQUE tkn_return RETURN tkn_puntocoma tkn_llaveder 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // DECLAPARAM ::= TIPO tkn_id 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLAPARAM",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // DECLAPARAM ::= TIPO tkn_id tkn_coma DECLAPARAM 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLAPARAM",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // PROTOPARAMS ::= TIPO tkn_id 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PROTOPARAMS",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // PROTOPARAMS ::= TIPO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PROTOPARAMS",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // PROTOPARAMS ::= TIPO tkn_coma PROTOPARAMS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PROTOPARAMS",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // PROTOPARAMS ::= TIPO tkn_id tkn_coma PROTOPARAMS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PROTOPARAMS",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // PARAMS3 ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMS3",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // PARAMS3 ::= CALLPARAMS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMS3",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // PARAMS2 ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMS2",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // PARAMS2 ::= PROTOPARAMS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMS2",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // PARAMS ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMS",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // PARAMS ::= DECLAPARAM 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMS",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // PROTOTIPOS ::= INICIO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PROTOTIPOS",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // PROTOTIPOS ::= PROTOTIPO PROTOTIPOS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PROTOTIPOS",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // FUNCIONES ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCIONES",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // FUNCIONES ::= FUNCION FUNCIONES 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCIONES",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // IDINT ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IDINT",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // IDINT ::= tkn_id tkn_igual tkn_caracter 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IDINT",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // IDINT ::= tkn_id tkn_igual tkn_caracter tkn_coma IDINT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IDINT",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // IDINT ::= tkn_id tkn_igual tkn_num 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IDINT",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // IDINT ::= tkn_id tkn_igual tkn_num tkn_coma IDINT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IDINT",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // IDINT ::= tkn_id 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IDINT",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // IDINT ::= tkn_id tkn_coma IDINT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IDINT",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // DECLARACION ::= TIPO IDINT tkn_puntocoma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= tkn_int tkn_main tkn_parentesisiz tkn_parentesisde tkn_llaveiz BLOQUE tkn_return tkn_num tkn_puntocoma tkn_llaveder FUNCIONES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= PROTOTIPOS EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

