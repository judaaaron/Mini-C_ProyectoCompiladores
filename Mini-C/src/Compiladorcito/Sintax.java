
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Aug 25 12:38:39 CST 2022
//----------------------------------------------------

package Compiladorcito;

import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Aug 25 12:38:39 CST 2022
  */
public class Sintax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\105\000\002\002\004\000\002\002\011\000\002\002" +
    "\012\000\002\006\005\000\002\006\005\000\002\032\005" +
    "\000\002\032\004\000\002\032\004\000\002\032\005\000" +
    "\002\021\005\000\002\021\003\000\002\021\007\000\002" +
    "\021\005\000\002\021\002\000\002\033\003\000\002\033" +
    "\004\000\002\022\005\000\002\022\003\000\002\022\011" +
    "\000\002\022\007\000\002\022\002\000\002\034\004\000" +
    "\002\034\003\000\002\034\002\000\002\030\015\000\002" +
    "\030\015\000\002\030\015\000\002\004\012\000\002\012" +
    "\006\000\002\012\004\000\002\012\002\000\002\005\021" +
    "\000\002\003\011\000\002\007\004\000\002\007\004\000" +
    "\002\007\004\000\002\007\004\000\002\007\004\000\002" +
    "\007\004\000\002\007\004\000\002\007\004\000\002\007" +
    "\004\000\002\007\002\000\002\010\005\000\002\010\005" +
    "\000\002\010\007\000\002\010\007\000\002\010\005\000" +
    "\002\010\003\000\002\013\005\000\002\014\003\000\002" +
    "\014\003\000\002\015\003\000\002\015\003\000\002\015" +
    "\003\000\002\016\003\000\002\016\003\000\002\017\003" +
    "\000\002\017\003\000\002\020\003\000\002\020\003\000" +
    "\002\024\005\000\002\024\005\000\002\023\011\000\002" +
    "\023\007\000\002\025\010\000\002\026\005\000\002\026" +
    "\005\000\002\027\012" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\265\000\004\035\004\001\002\000\004\010\007\001" +
    "\002\000\004\002\006\001\002\000\004\002\001\001\002" +
    "\000\004\020\010\001\002\000\004\021\011\001\002\000" +
    "\004\022\012\001\002\000\036\012\032\013\042\014\026" +
    "\015\033\016\037\020\027\023\uffd7\026\025\030\016\031" +
    "\040\035\031\036\013\037\035\042\045\001\002\000\020" +
    "\012\uffc6\013\uffc6\021\uffc6\035\uffc6\036\uffc6\037\uffc6\040" +
    "\uffc6\001\002\000\044\012\032\013\042\014\026\015\033" +
    "\016\037\020\027\023\uffd7\026\025\027\uffd7\030\016\031" +
    "\040\034\uffd7\035\031\036\013\037\035\040\uffd7\042\045" +
    "\001\002\000\014\021\uffd1\024\264\025\263\040\uffd1\041" +
    "\uffd1\001\002\000\004\020\252\001\002\000\044\012\032" +
    "\013\042\014\026\015\033\016\037\020\027\023\uffd7\026" +
    "\025\027\uffd7\030\016\031\040\034\uffd7\035\031\036\013" +
    "\037\035\040\uffd7\042\045\001\002\000\044\012\032\013" +
    "\042\014\026\015\033\016\037\020\027\023\uffd7\026\025" +
    "\027\uffd7\030\016\031\040\034\uffd7\035\031\036\013\037" +
    "\035\040\uffd7\042\045\001\002\000\044\012\032\013\042" +
    "\014\026\015\033\016\037\020\027\023\uffd7\026\025\027" +
    "\uffd7\030\016\031\040\034\uffd7\035\031\036\013\037\035" +
    "\040\uffd7\042\045\001\002\000\044\012\032\013\042\014" +
    "\026\015\033\016\037\020\027\023\uffd7\026\025\027\uffd7" +
    "\030\016\031\040\034\uffd7\035\031\036\013\037\035\040" +
    "\uffd7\042\045\001\002\000\004\023\240\001\002\000\044" +
    "\012\032\013\042\014\026\015\033\016\037\020\027\023" +
    "\uffd7\026\025\027\uffd7\030\016\031\040\034\uffd7\035\031" +
    "\036\013\037\035\040\uffd7\042\045\001\002\000\004\020" +
    "\221\001\002\000\020\007\uffcd\011\uffcd\021\uffcd\024\uffcd" +
    "\025\uffcd\040\uffcd\041\uffcd\001\002\000\010\014\026\037" +
    "\061\042\045\001\002\000\006\037\166\040\ufff4\001\002" +
    "\000\006\037\uffc8\040\uffc8\001\002\000\006\037\uffc7\040" +
    "\uffc7\001\002\000\004\020\151\001\002\000\044\012\032" +
    "\013\042\014\026\015\033\016\037\020\027\023\uffd7\026" +
    "\025\027\uffd7\030\016\031\040\034\uffd7\035\031\036\013" +
    "\037\035\040\uffd7\042\045\001\002\000\012\007\uffcb\011" +
    "\uffcb\032\145\033\144\001\002\000\006\037\105\040\uffed" +
    "\001\002\000\004\020\077\001\002\000\004\020\063\001" +
    "\002\000\044\012\032\013\042\014\026\015\033\016\037" +
    "\020\027\023\uffd7\026\025\027\uffd7\030\016\031\040\034" +
    "\uffd7\035\031\036\013\037\035\040\uffd7\042\045\001\002" +
    "\000\020\012\uffc5\013\uffc5\021\uffc5\035\uffc5\036\uffc5\037" +
    "\uffc5\040\uffc5\001\002\000\006\007\057\011\056\001\002" +
    "\000\004\041\050\001\002\000\020\007\uffcc\011\uffcc\021" +
    "\uffcc\024\uffcc\025\uffcc\040\uffcc\041\uffcc\001\002\000\044" +
    "\012\032\013\042\014\026\015\033\016\037\020\027\023" +
    "\uffd7\026\025\027\uffd7\030\016\031\040\034\uffd7\035\031" +
    "\036\013\037\035\040\uffd7\042\045\001\002\000\012\023" +
    "\uffd8\027\uffd8\034\uffd8\040\uffd8\001\002\000\036\012\032" +
    "\013\042\014\026\015\033\016\037\020\027\026\025\030" +
    "\016\031\040\034\uffd7\035\031\036\013\037\035\042\045" +
    "\001\002\000\004\034\052\001\002\000\036\012\032\013" +
    "\042\014\026\015\033\016\037\020\027\026\025\030\016" +
    "\031\040\035\031\036\013\037\035\040\uffd7\042\045\001" +
    "\002\000\004\040\054\001\002\000\044\012\uffc0\013\uffc0" +
    "\014\uffc0\015\uffc0\016\uffc0\020\uffc0\023\uffc0\026\uffc0\027" +
    "\uffc0\030\uffc0\031\uffc0\034\uffc0\035\uffc0\036\uffc0\037\uffc0" +
    "\040\uffc0\042\uffc0\001\002\000\010\014\026\037\061\042" +
    "\045\001\002\000\010\014\uffce\037\uffce\042\uffce\001\002" +
    "\000\010\014\uffcf\037\uffcf\042\uffcf\001\002\000\014\021" +
    "\uffd0\024\uffd0\025\uffd0\040\uffd0\041\uffd0\001\002\000\020" +
    "\007\uffcb\011\uffcb\021\uffcb\024\uffcb\025\uffcb\040\uffcb\041" +
    "\uffcb\001\002\000\012\023\uffdf\027\uffdf\034\uffdf\040\uffdf" +
    "\001\002\000\004\050\065\001\002\000\004\043\072\001" +
    "\002\000\006\044\066\045\067\001\002\000\004\050\071" +
    "\001\002\000\004\050\070\001\002\000\004\043\uffc3\001" +
    "\002\000\004\043\uffc4\001\002\000\004\051\073\001\002" +
    "\000\004\037\074\001\002\000\004\021\075\001\002\000" +
    "\004\040\076\001\002\000\044\012\uffbd\013\uffbd\014\uffbd" +
    "\015\uffbd\016\uffbd\020\uffbd\023\uffbd\026\uffbd\027\uffbd\030" +
    "\uffbd\031\uffbd\034\uffbd\035\uffbd\036\uffbd\037\uffbd\040\uffbd" +
    "\042\uffbd\001\002\000\012\014\026\020\027\037\061\042" +
    "\045\001\002\000\004\021\101\001\002\000\004\022\102" +
    "\001\002\000\036\012\032\013\042\014\026\015\033\016" +
    "\037\020\027\023\uffd7\026\025\030\016\031\040\035\031" +
    "\036\013\037\035\042\045\001\002\000\004\023\104\001" +
    "\002\000\044\012\uffe1\013\uffe1\014\uffe1\015\uffe1\016\uffe1" +
    "\020\uffe1\023\uffe1\026\uffe1\027\uffe1\030\uffe1\031\uffe1\034" +
    "\uffe1\035\uffe1\036\uffe1\037\uffe1\040\uffe1\042\uffe1\001\002" +
    "\000\012\011\111\020\112\040\ufff0\043\110\001\002\000" +
    "\004\040\107\001\002\000\044\012\ufffd\013\ufffd\014\ufffd" +
    "\015\ufffd\016\ufffd\020\ufffd\023\ufffd\026\ufffd\027\ufffd\030" +
    "\ufffd\031\ufffd\034\ufffd\035\ufffd\036\ufffd\037\ufffd\040\ufffd" +
    "\042\ufffd\001\002\000\006\037\141\040\uffed\001\002\000" +
    "\004\047\135\001\002\000\012\012\032\013\042\035\031" +
    "\036\013\001\002\000\004\021\126\001\002\000\004\037" +
    "\123\001\002\000\016\012\uffea\013\uffea\021\uffea\035\uffea" +
    "\036\uffea\037\117\001\002\000\014\012\032\013\042\021" +
    "\ufffb\035\031\036\013\001\002\000\016\012\uffeb\013\uffeb" +
    "\021\uffeb\035\uffeb\036\uffeb\043\120\001\002\000\014\012" +
    "\uffec\013\uffec\021\uffec\035\uffec\036\uffec\001\002\000\004" +
    "\021\ufff9\001\002\000\014\012\032\013\042\021\ufffa\035" +
    "\031\036\013\001\002\000\016\012\ufff3\013\ufff3\021\ufff3" +
    "\035\ufff3\036\ufff3\043\124\001\002\000\014\012\ufff2\013" +
    "\ufff2\021\ufff2\035\ufff2\036\ufff2\001\002\000\004\021\ufffc" +
    "\001\002\000\004\022\127\001\002\000\036\012\032\013" +
    "\042\014\026\015\033\016\037\020\027\026\025\027\uffd7" +
    "\030\016\031\040\035\031\036\013\037\035\042\045\001" +
    "\002\000\004\027\131\001\002\000\004\037\132\001\002" +
    "\000\004\040\133\001\002\000\004\023\134\001\002\000" +
    "\046\002\uffe7\012\uffe7\013\uffe7\014\uffe7\015\uffe7\016\uffe7" +
    "\020\uffe7\023\uffe7\026\uffe7\027\uffe7\030\uffe7\031\uffe7\034" +
    "\uffe7\035\uffe7\036\uffe7\037\uffe7\040\uffe7\042\uffe7\001\002" +
    "\000\004\046\136\001\002\000\004\047\137\001\002\000" +
    "\006\040\uffee\043\140\001\002\000\006\037\141\040\uffed" +
    "\001\002\000\010\011\111\040\ufff0\043\110\001\002\000" +
    "\004\040\uffef\001\002\000\004\040\ufff1\001\002\000\004" +
    "\040\147\001\002\000\004\040\146\001\002\000\044\012" +
    "\uffbf\013\uffbf\014\uffbf\015\uffbf\016\uffbf\020\uffbf\023\uffbf" +
    "\026\uffbf\027\uffbf\030\uffbf\031\uffbf\034\uffbf\035\uffbf\036" +
    "\uffbf\037\uffbf\040\uffbf\042\uffbf\001\002\000\044\012\uffbe" +
    "\013\uffbe\014\uffbe\015\uffbe\016\uffbe\020\uffbe\023\uffbe\026" +
    "\uffbe\027\uffbe\030\uffbe\031\uffbe\034\uffbe\035\uffbe\036\uffbe" +
    "\037\uffbe\040\uffbe\042\uffbe\001\002\000\012\023\uffdb\027" +
    "\uffdb\034\uffdb\040\uffdb\001\002\000\012\014\026\020\027" +
    "\037\061\042\045\001\002\000\004\021\153\001\002\000" +
    "\004\022\154\001\002\000\036\012\032\013\042\014\026" +
    "\015\033\016\037\020\027\023\uffd7\026\025\030\016\031" +
    "\040\035\031\036\013\037\035\042\045\001\002\000\004" +
    "\023\156\001\002\000\046\012\uffe3\013\uffe3\014\uffe3\015" +
    "\uffe3\016\uffe3\017\160\020\uffe3\023\uffe3\026\uffe3\027\uffe3" +
    "\030\uffe3\031\uffe3\034\uffe3\035\uffe3\036\uffe3\037\uffe3\040" +
    "\uffe3\042\uffe3\001\002\000\044\012\uffe6\013\uffe6\014\uffe6" +
    "\015\uffe6\016\uffe6\020\uffe6\023\uffe6\026\uffe6\027\uffe6\030" +
    "\uffe6\031\uffe6\034\uffe6\035\uffe6\036\uffe6\037\uffe6\040\uffe6" +
    "\042\uffe6\001\002\000\006\015\033\022\162\001\002\000" +
    "\044\012\uffe4\013\uffe4\014\uffe4\015\uffe4\016\uffe4\020\uffe4" +
    "\023\uffe4\026\uffe4\027\uffe4\030\uffe4\031\uffe4\034\uffe4\035" +
    "\uffe4\036\uffe4\037\uffe4\040\uffe4\042\uffe4\001\002\000\036" +
    "\012\032\013\042\014\026\015\033\016\037\020\027\023" +
    "\uffd7\026\025\030\016\031\040\035\031\036\013\037\035" +
    "\042\045\001\002\000\004\023\164\001\002\000\044\012" +
    "\uffe5\013\uffe5\014\uffe5\015\uffe5\016\uffe5\020\uffe5\023\uffe5" +
    "\026\uffe5\027\uffe5\030\uffe5\031\uffe5\034\uffe5\035\uffe5\036" +
    "\uffe5\037\uffe5\040\uffe5\042\uffe5\001\002\000\004\040\212" +
    "\001\002\000\012\011\170\020\171\040\ufff7\043\167\001" +
    "\002\000\006\037\210\040\ufff4\001\002\000\004\042\205" +
    "\001\002\000\012\012\032\013\042\035\031\036\013\001" +
    "\002\000\004\021\173\001\002\000\004\022\174\001\002" +
    "\000\036\012\032\013\042\014\026\015\033\016\037\020" +
    "\027\026\025\027\uffd7\030\016\031\040\035\031\036\013" +
    "\037\035\042\045\001\002\000\004\027\176\001\002\000" +
    "\006\037\177\042\200\001\002\000\004\040\203\001\002" +
    "\000\004\040\201\001\002\000\004\023\202\001\002\000" +
    "\046\002\uffe8\012\uffe8\013\uffe8\014\uffe8\015\uffe8\016\uffe8" +
    "\020\uffe8\023\uffe8\026\uffe8\027\uffe8\030\uffe8\031\uffe8\034" +
    "\uffe8\035\uffe8\036\uffe8\037\uffe8\040\uffe8\042\uffe8\001\002" +
    "\000\004\023\204\001\002\000\046\002\uffe9\012\uffe9\013" +
    "\uffe9\014\uffe9\015\uffe9\016\uffe9\020\uffe9\023\uffe9\026\uffe9" +
    "\027\uffe9\030\uffe9\031\uffe9\034\uffe9\035\uffe9\036\uffe9\037" +
    "\uffe9\040\uffe9\042\uffe9\001\002\000\006\040\ufff5\043\206" +
    "\001\002\000\006\037\210\040\ufff4\001\002\000\004\040" +
    "\ufff6\001\002\000\010\011\170\040\ufff7\043\167\001\002" +
    "\000\004\040\ufff8\001\002\000\044\012\ufffe\013\ufffe\014" +
    "\ufffe\015\ufffe\016\ufffe\020\ufffe\023\ufffe\026\ufffe\027\ufffe" +
    "\030\ufffe\031\ufffe\034\ufffe\035\ufffe\036\ufffe\037\ufffe\040" +
    "\ufffe\042\ufffe\001\002\000\004\021\214\001\002\000\014" +
    "\021\uffd2\024\216\025\215\040\uffd2\041\uffd2\001\002\000" +
    "\012\014\026\020\027\037\061\042\045\001\002\000\012" +
    "\014\026\020\027\037\061\042\045\001\002\000\010\021" +
    "\uffd4\040\uffd4\041\uffd4\001\002\000\010\021\uffd3\040\uffd3" +
    "\041\uffd3\001\002\000\004\035\222\001\002\000\004\037" +
    "\223\001\002\000\004\011\224\001\002\000\004\042\225" +
    "\001\002\000\004\040\226\001\002\000\012\014\026\020" +
    "\027\037\061\042\045\001\002\000\004\040\230\001\002" +
    "\000\004\037\231\001\002\000\004\032\232\001\002\000" +
    "\004\021\233\001\002\000\004\022\234\001\002\000\036" +
    "\012\032\013\042\014\026\015\033\016\037\020\027\023" +
    "\uffd7\026\025\030\016\031\040\035\031\036\013\037\035" +
    "\042\045\001\002\000\004\023\236\001\002\000\044\012" +
    "\uffe2\013\uffe2\014\uffe2\015\uffe2\016\uffe2\020\uffe2\023\uffe2" +
    "\026\uffe2\027\uffe2\030\uffe2\031\uffe2\034\uffe2\035\uffe2\036" +
    "\uffe2\037\uffe2\040\uffe2\042\uffe2\001\002\000\012\023\uffdc" +
    "\027\uffdc\034\uffdc\040\uffdc\001\002\000\014\002\000\012" +
    "\032\013\042\035\031\036\013\001\002\000\004\037\245" +
    "\001\002\000\004\002\uffff\001\002\000\004\037\244\001" +
    "\002\000\004\020\112\001\002\000\004\020\171\001\002" +
    "\000\012\023\uffde\027\uffde\034\uffde\040\uffde\001\002\000" +
    "\012\023\uffdd\027\uffdd\034\uffdd\040\uffdd\001\002\000\012" +
    "\023\uffd9\027\uffd9\034\uffd9\040\uffd9\001\002\000\012\023" +
    "\uffe0\027\uffe0\034\uffe0\040\uffe0\001\002\000\006\037\254" +
    "\050\065\001\002\000\004\043\257\001\002\000\004\021" +
    "\255\001\002\000\004\040\256\001\002\000\044\012\uffc1" +
    "\013\uffc1\014\uffc1\015\uffc1\016\uffc1\020\uffc1\023\uffc1\026" +
    "\uffc1\027\uffc1\030\uffc1\031\uffc1\034\uffc1\035\uffc1\036\uffc1" +
    "\037\uffc1\040\uffc1\042\uffc1\001\002\000\004\037\260\001" +
    "\002\000\004\021\261\001\002\000\004\040\262\001\002" +
    "\000\044\012\uffc2\013\uffc2\014\uffc2\015\uffc2\016\uffc2\020" +
    "\uffc2\023\uffc2\026\uffc2\027\uffc2\030\uffc2\031\uffc2\034\uffc2" +
    "\035\uffc2\036\uffc2\037\uffc2\040\uffc2\042\uffc2\001\002\000" +
    "\012\014\026\020\027\037\061\042\045\001\002\000\012" +
    "\014\026\020\027\037\061\042\045\001\002\000\010\021" +
    "\uffd6\040\uffd6\041\uffd6\001\002\000\010\021\uffd5\040\uffd5" +
    "\041\uffd5\001\002\000\012\023\uffda\027\uffda\034\uffda\040" +
    "\uffda\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\265\000\004\002\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\040\003\016\004\021\005" +
    "\040\006\020\007\022\010\043\013\014\015\042\017\027" +
    "\020\035\023\023\025\033\026\013\027\017\030\045\001" +
    "\001\000\002\001\001\000\040\003\016\004\021\005\040" +
    "\006\020\007\266\010\043\013\014\015\042\017\027\020" +
    "\035\023\023\025\033\026\013\027\017\030\045\001\001" +
    "\000\002\001\001\000\002\001\001\000\040\003\016\004" +
    "\021\005\040\006\020\007\250\010\043\013\014\015\042" +
    "\017\027\020\035\023\023\025\033\026\013\027\017\030" +
    "\045\001\001\000\040\003\016\004\021\005\040\006\020" +
    "\007\247\010\043\013\014\015\042\017\027\020\035\023" +
    "\023\025\033\026\013\027\017\030\045\001\001\000\040" +
    "\003\016\004\021\005\040\006\020\007\246\010\043\013" +
    "\014\015\042\017\027\020\035\023\023\025\033\026\013" +
    "\027\017\030\045\001\001\000\040\003\016\004\021\005" +
    "\040\006\020\007\245\010\043\013\014\015\042\017\027" +
    "\020\035\023\023\025\033\026\013\027\017\030\045\001" +
    "\001\000\002\001\001\000\040\003\016\004\021\005\040" +
    "\006\020\007\236\010\043\013\014\015\042\017\027\020" +
    "\035\023\023\025\033\026\013\027\017\030\045\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\013\212\015" +
    "\042\001\001\000\004\021\164\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\040\003\016\004" +
    "\021\005\040\006\020\007\147\010\043\013\014\015\042" +
    "\017\027\020\035\023\023\025\033\026\013\027\017\030" +
    "\045\001\001\000\002\001\001\000\004\022\105\001\001" +
    "\000\002\001\001\000\002\001\001\000\040\003\016\004" +
    "\021\005\040\006\020\007\061\010\043\013\014\015\042" +
    "\017\027\020\035\023\023\025\033\026\013\027\017\030" +
    "\045\001\001\000\002\001\001\000\004\014\054\001\001" +
    "\000\002\001\001\000\002\001\001\000\040\003\016\004" +
    "\021\005\040\006\020\007\046\010\043\013\014\015\042" +
    "\017\027\020\035\023\023\025\033\026\013\027\017\030" +
    "\045\001\001\000\002\001\001\000\040\003\016\004\021" +
    "\005\040\006\020\007\050\010\043\013\014\015\042\017" +
    "\027\020\035\023\023\025\033\026\013\027\017\030\045" +
    "\001\001\000\002\001\001\000\040\003\016\004\021\005" +
    "\040\006\020\007\052\010\043\013\014\015\042\017\027" +
    "\020\035\023\023\025\033\026\013\027\017\030\045\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\015\057" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\024\063" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\010\077\013\014" +
    "\015\042\001\001\000\002\001\001\000\002\001\001\000" +
    "\040\003\016\004\021\005\040\006\020\007\102\010\043" +
    "\013\014\015\042\017\027\020\035\023\023\025\033\026" +
    "\013\027\017\030\045\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\022\142\001\001\000\002\001\001\000\010" +
    "\017\113\020\114\032\112\001\001\000\002\001\001\000" +
    "\004\033\121\001\001\000\004\034\115\001\001\000\010" +
    "\017\113\020\114\032\120\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\017\113\020\114" +
    "\032\124\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\040\003\016\004\021" +
    "\005\040\006\020\007\127\010\043\013\014\015\042\017" +
    "\027\020\035\023\023\025\033\026\013\027\017\030\045" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\022\141\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\010\151\013\014" +
    "\015\042\001\001\000\002\001\001\000\002\001\001\000" +
    "\040\003\016\004\021\005\040\006\020\007\154\010\043" +
    "\013\014\015\042\017\027\020\035\023\023\025\033\026" +
    "\013\027\017\030\045\001\001\000\002\001\001\000\004" +
    "\012\156\001\001\000\002\001\001\000\004\004\160\001" +
    "\001\000\002\001\001\000\040\003\016\004\021\005\040" +
    "\006\020\007\162\010\043\013\014\015\042\017\027\020" +
    "\035\023\023\025\033\026\013\027\017\030\045\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\021\210\001\001\000\002\001\001" +
    "\000\010\017\113\020\114\032\171\001\001\000\002\001" +
    "\001\000\002\001\001\000\040\003\016\004\021\005\040" +
    "\006\020\007\174\010\043\013\014\015\042\017\027\020" +
    "\035\023\023\025\033\026\013\027\017\030\045\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\021" +
    "\206\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\010\217\013\014\015\042\001\001\000\010" +
    "\010\216\013\014\015\042\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\010" +
    "\226\013\014\015\042\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\040\003\016\004\021\005\040\006\020\007\234" +
    "\010\043\013\014\015\042\017\027\020\035\023\023\025" +
    "\033\026\013\027\017\030\045\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\017\240\020" +
    "\242\030\241\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\024\252\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\010\265\013\014\015\042\001\001\000\010" +
    "\010\264\013\014\015\042\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // SCANF ::= tkn_scanf tkn_parentesisiz CONSTSTR tkn_coma tkn_ampersand tkn_id tkn_parentesisde tkn_puntocoma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SCANF",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // CONTADOR ::= tkn_id tkn_decrement tkn_puntocoma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTADOR",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // CONTADOR ::= tkn_id tkn_increment tkn_puntocoma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTADOR",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // TERNARIO ::= CONDICION tkn_ternario BLOQUE tkn_dospuntos BLOQUE tkn_puntocoma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TERNARIO",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // PRINTF ::= tkn_printf tkn_parentesisiz tkn_id tkn_parentesisde tkn_puntocoma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PRINTF",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // PRINTF ::= tkn_printf tkn_parentesisiz CONSTSTR tkn_coma tkn_id tkn_parentesisde tkn_puntocoma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PRINTF",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // CONSTSTR ::= tkn_comillas tkn_porcentajec tkn_comillas 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONSTSTR",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // CONSTSTR ::= tkn_comillas tkn_porcentajed tkn_comillas 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONSTSTR",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // TIPOCHAR ::= tkn_charp 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPOCHAR",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // TIPOCHAR ::= tkn_char 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPOCHAR",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // TIPOINT ::= tkn_intp 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPOINT",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // TIPOINT ::= tkn_int 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPOINT",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // TIPO ::= TIPOCHAR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // TIPO ::= TIPOINT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // VALOR ::= tkn_id 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VALOR",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // VALOR ::= tkn_num 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VALOR",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // VALOR ::= tkn_digitos 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VALOR",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // OPCONDICION ::= tkn_igual 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPCONDICION",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // OPCONDICION ::= tkn_oprel 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPCONDICION",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // CONDICIONP ::= VALOR OPCONDICION VALOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICIONP",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // CONDICION ::= CONDICIONP 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // CONDICION ::= tkn_parentesisiz CONDICIONP tkn_parentesisde 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // CONDICION ::= tkn_parentesisiz CONDICIONP tkn_parentesisde tkn_or CONDICION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // CONDICION ::= tkn_parentesisiz CONDICIONP tkn_parentesisde tkn_and CONDICION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // CONDICION ::= CONDICIONP tkn_or CONDICION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // CONDICION ::= CONDICIONP tkn_and CONDICION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // BLOQUE ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BLOQUE",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // BLOQUE ::= FUNCION BLOQUE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BLOQUE",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // BLOQUE ::= SCANF BLOQUE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BLOQUE",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // BLOQUE ::= CONTADOR BLOQUE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BLOQUE",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // BLOQUE ::= TERNARIO BLOQUE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BLOQUE",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // BLOQUE ::= PRINTF BLOQUE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BLOQUE",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // BLOQUE ::= DECLARACION BLOQUE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BLOQUE",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // BLOQUE ::= IF BLOQUE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BLOQUE",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // BLOQUE ::= FOR BLOQUE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BLOQUE",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // BLOQUE ::= WHILE BLOQUE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BLOQUE",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // WHILE ::= tkn_while tkn_parentesisiz CONDICION tkn_parentesisde tkn_llaveiz BLOQUE tkn_llaveder 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("WHILE",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // FOR ::= tkn_for tkn_parentesisiz tkn_int tkn_id tkn_igual tkn_num tkn_puntocoma CONDICION tkn_puntocoma tkn_id tkn_increment tkn_parentesisde tkn_llaveiz BLOQUE tkn_llaveder 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-14)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // ELSE ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ELSE ::= tkn_else IF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ELSE ::= tkn_else tkn_llaveiz BLOQUE tkn_llaveder 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // IF ::= tkn_if tkn_parentesisiz CONDICION tkn_parentesisde tkn_llaveiz BLOQUE tkn_llaveder ELSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // FUNCION ::= TIPOCHAR tkn_id tkn_parentesisiz DECLAPARAM tkn_parentesisde tkn_llaveiz BLOQUE tkn_return tkn_id tkn_puntocoma tkn_llaveder 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // FUNCION ::= TIPOINT tkn_id tkn_parentesisiz DECLAPARAM tkn_parentesisde tkn_llaveiz BLOQUE tkn_return tkn_num tkn_puntocoma tkn_llaveder 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // FUNCION ::= TIPOINT tkn_id tkn_parentesisiz DECLAPARAM tkn_parentesisde tkn_llaveiz BLOQUE tkn_return tkn_id tkn_puntocoma tkn_llaveder 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // IDCHAR2 ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IDCHAR2",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // IDCHAR2 ::= tkn_id 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IDCHAR2",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // IDCHAR2 ::= tkn_id tkn_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IDCHAR2",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // IDCHAR ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IDCHAR",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // IDCHAR ::= tkn_id tkn_igual tkn_comilla tkn_letra tkn_comilla 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IDCHAR",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // IDCHAR ::= tkn_id tkn_igual tkn_comilla tkn_letra tkn_comilla tkn_coma IDCHAR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IDCHAR",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // IDCHAR ::= tkn_id 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IDCHAR",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // IDCHAR ::= tkn_id tkn_coma IDCHAR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IDCHAR",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // IDINT2 ::= tkn_id tkn_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IDINT2",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // IDINT2 ::= tkn_id 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IDINT2",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // IDINT ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IDINT",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // IDINT ::= tkn_id tkn_igual tkn_num 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IDINT",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // IDINT ::= tkn_id tkn_igual tkn_num tkn_coma IDINT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IDINT",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // IDINT ::= tkn_id 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IDINT",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // IDINT ::= tkn_id tkn_coma IDINT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IDINT",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // DECLAPARAM ::= TIPOCHAR IDCHAR2 DECLAPARAM 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLAPARAM",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // DECLAPARAM ::= TIPOINT IDINT2 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLAPARAM",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // DECLAPARAM ::= TIPOCHAR IDCHAR2 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLAPARAM",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // DECLAPARAM ::= TIPOINT IDINT2 DECLAPARAM 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLAPARAM",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // DECLARACION ::= TIPOCHAR IDCHAR tkn_puntocoma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // DECLARACION ::= TIPOINT IDINT tkn_puntocoma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= tkn_int tkn_main tkn_parentesisiz tkn_parentesisde tkn_llaveiz BLOQUE tkn_llaveder FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= tkn_int tkn_main tkn_parentesisiz tkn_parentesisde tkn_llaveiz BLOQUE tkn_llaveder 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

