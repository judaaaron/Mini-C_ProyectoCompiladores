
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Aug 24 22:48:49 CST 2022
//----------------------------------------------------

package Compiladorcito;

import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Aug 24 22:48:49 CST 2022
  */
public class Sintax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\065\000\002\002\004\000\002\002\011\000\002\006" +
    "\005\000\002\006\005\000\002\021\005\000\002\021\003" +
    "\000\002\021\007\000\002\021\005\000\002\021\002\000" +
    "\002\022\005\000\002\022\003\000\002\022\011\000\002" +
    "\022\007\000\002\022\002\000\002\004\012\000\002\012" +
    "\006\000\002\012\004\000\002\012\002\000\002\005\021" +
    "\000\002\003\011\000\002\007\004\000\002\007\004\000" +
    "\002\007\004\000\002\007\004\000\002\007\004\000\002" +
    "\007\004\000\002\007\004\000\002\007\002\000\002\010" +
    "\005\000\002\010\005\000\002\010\007\000\002\010\007" +
    "\000\002\010\005\000\002\010\003\000\002\013\005\000" +
    "\002\014\003\000\002\014\003\000\002\015\003\000\002" +
    "\015\003\000\002\015\003\000\002\016\003\000\002\016" +
    "\003\000\002\017\003\000\002\017\003\000\002\020\003" +
    "\000\002\020\003\000\002\024\005\000\002\024\005\000" +
    "\002\023\011\000\002\023\007\000\002\025\010\000\002" +
    "\026\005\000\002\026\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\203\000\004\035\004\001\002\000\004\010\007\001" +
    "\002\000\004\002\006\001\002\000\004\002\001\001\002" +
    "\000\004\020\010\001\002\000\004\021\011\001\002\000" +
    "\004\022\012\001\002\000\034\012\031\013\040\014\024" +
    "\015\033\016\035\020\026\023\uffe6\026\025\030\016\035" +
    "\030\036\013\037\034\042\043\001\002\000\006\037\uffd5" +
    "\040\uffd5\001\002\000\014\021\uffe0\024\203\025\202\040" +
    "\uffe0\041\uffe0\001\002\000\040\012\031\013\040\014\024" +
    "\015\033\016\035\020\026\023\uffe6\026\025\030\016\034" +
    "\uffe6\035\030\036\013\037\034\040\uffe6\042\043\001\002" +
    "\000\004\020\163\001\002\000\040\012\031\013\040\014" +
    "\024\015\033\016\035\020\026\023\uffe6\026\025\030\016" +
    "\034\uffe6\035\030\036\013\037\034\040\uffe6\042\043\001" +
    "\002\000\040\012\031\013\040\014\024\015\033\016\035" +
    "\020\026\023\uffe6\026\025\030\016\034\uffe6\035\030\036" +
    "\013\037\034\040\uffe6\042\043\001\002\000\040\012\031" +
    "\013\040\014\024\015\033\016\035\020\026\023\uffe6\026" +
    "\025\030\016\034\uffe6\035\030\036\013\037\034\040\uffe6" +
    "\042\043\001\002\000\004\023\157\001\002\000\040\012" +
    "\031\013\040\014\024\015\033\016\035\020\026\023\uffe6" +
    "\026\025\030\016\034\uffe6\035\030\036\013\037\034\040" +
    "\uffe6\042\043\001\002\000\020\007\uffdc\011\uffdc\021\uffdc" +
    "\024\uffdc\025\uffdc\040\uffdc\041\uffdc\001\002\000\004\020" +
    "\140\001\002\000\010\014\024\037\054\042\043\001\002" +
    "\000\006\037\122\040\ufff9\001\002\000\006\037\uffd7\040" +
    "\uffd7\001\002\000\006\037\uffd6\040\uffd6\001\002\000\040" +
    "\012\031\013\040\014\024\015\033\016\035\020\026\023" +
    "\uffe6\026\025\030\016\034\uffe6\035\030\036\013\037\034" +
    "\040\uffe6\042\043\001\002\000\004\020\104\001\002\000" +
    "\012\007\uffda\011\uffda\032\101\033\100\001\002\000\004" +
    "\020\072\001\002\000\006\037\057\040\ufff4\001\002\000" +
    "\040\012\031\013\040\014\024\015\033\016\035\020\026" +
    "\023\uffe6\026\025\030\016\034\uffe6\035\030\036\013\037" +
    "\034\040\uffe6\042\043\001\002\000\006\037\uffd4\040\uffd4" +
    "\001\002\000\006\007\053\011\052\001\002\000\004\041" +
    "\044\001\002\000\020\007\uffdb\011\uffdb\021\uffdb\024\uffdb" +
    "\025\uffdb\040\uffdb\041\uffdb\001\002\000\034\012\031\013" +
    "\040\014\024\015\033\016\035\020\026\026\025\030\016" +
    "\034\uffe6\035\030\036\013\037\034\042\043\001\002\000" +
    "\004\034\046\001\002\000\034\012\031\013\040\014\024" +
    "\015\033\016\035\020\026\026\025\030\016\035\030\036" +
    "\013\037\034\040\uffe6\042\043\001\002\000\004\040\050" +
    "\001\002\000\040\012\uffcf\013\uffcf\014\uffcf\015\uffcf\016" +
    "\uffcf\020\uffcf\023\uffcf\026\uffcf\030\uffcf\034\uffcf\035\uffcf" +
    "\036\uffcf\037\uffcf\040\uffcf\042\uffcf\001\002\000\010\014" +
    "\024\037\054\042\043\001\002\000\010\014\uffdd\037\uffdd" +
    "\042\uffdd\001\002\000\010\014\uffde\037\uffde\042\uffde\001" +
    "\002\000\020\007\uffda\011\uffda\021\uffda\024\uffda\025\uffda" +
    "\040\uffda\041\uffda\001\002\000\014\021\uffdf\024\uffdf\025" +
    "\uffdf\040\uffdf\041\uffdf\001\002\000\010\023\uffec\034\uffec" +
    "\040\uffec\001\002\000\010\011\063\040\ufff7\043\062\001" +
    "\002\000\004\040\061\001\002\000\040\012\ufffe\013\ufffe" +
    "\014\ufffe\015\ufffe\016\ufffe\020\ufffe\023\ufffe\026\ufffe\030" +
    "\ufffe\034\ufffe\035\ufffe\036\ufffe\037\ufffe\040\ufffe\042\ufffe" +
    "\001\002\000\006\037\057\040\ufff4\001\002\000\004\047" +
    "\064\001\002\000\004\046\065\001\002\000\004\047\066" +
    "\001\002\000\006\040\ufff5\043\067\001\002\000\006\037" +
    "\057\040\ufff4\001\002\000\004\040\ufff6\001\002\000\004" +
    "\040\ufff8\001\002\000\012\014\024\020\026\037\054\042" +
    "\043\001\002\000\004\021\074\001\002\000\004\022\075" +
    "\001\002\000\034\012\031\013\040\014\024\015\033\016" +
    "\035\020\026\023\uffe6\026\025\030\016\035\030\036\013" +
    "\037\034\042\043\001\002\000\004\023\077\001\002\000" +
    "\040\012\uffee\013\uffee\014\uffee\015\uffee\016\uffee\020\uffee" +
    "\023\uffee\026\uffee\030\uffee\034\uffee\035\uffee\036\uffee\037" +
    "\uffee\040\uffee\042\uffee\001\002\000\004\040\103\001\002" +
    "\000\004\040\102\001\002\000\040\012\uffce\013\uffce\014" +
    "\uffce\015\uffce\016\uffce\020\uffce\023\uffce\026\uffce\030\uffce" +
    "\034\uffce\035\uffce\036\uffce\037\uffce\040\uffce\042\uffce\001" +
    "\002\000\040\012\uffcd\013\uffcd\014\uffcd\015\uffcd\016\uffcd" +
    "\020\uffcd\023\uffcd\026\uffcd\030\uffcd\034\uffcd\035\uffcd\036" +
    "\uffcd\037\uffcd\040\uffcd\042\uffcd\001\002\000\012\014\024" +
    "\020\026\037\054\042\043\001\002\000\004\021\106\001" +
    "\002\000\004\022\107\001\002\000\034\012\031\013\040" +
    "\014\024\015\033\016\035\020\026\023\uffe6\026\025\030" +
    "\016\035\030\036\013\037\034\042\043\001\002\000\004" +
    "\023\111\001\002\000\042\012\ufff0\013\ufff0\014\ufff0\015" +
    "\ufff0\016\ufff0\017\113\020\ufff0\023\ufff0\026\ufff0\030\ufff0" +
    "\034\ufff0\035\ufff0\036\ufff0\037\ufff0\040\ufff0\042\ufff0\001" +
    "\002\000\040\012\ufff3\013\ufff3\014\ufff3\015\ufff3\016\ufff3" +
    "\020\ufff3\023\ufff3\026\ufff3\030\ufff3\034\ufff3\035\ufff3\036" +
    "\ufff3\037\ufff3\040\ufff3\042\ufff3\001\002\000\006\015\033" +
    "\022\115\001\002\000\040\012\ufff1\013\ufff1\014\ufff1\015" +
    "\ufff1\016\ufff1\020\ufff1\023\ufff1\026\ufff1\030\ufff1\034\ufff1" +
    "\035\ufff1\036\ufff1\037\ufff1\040\ufff1\042\ufff1\001\002\000" +
    "\034\012\031\013\040\014\024\015\033\016\035\020\026" +
    "\023\uffe6\026\025\030\016\035\030\036\013\037\034\042" +
    "\043\001\002\000\004\023\117\001\002\000\040\012\ufff2" +
    "\013\ufff2\014\ufff2\015\ufff2\016\ufff2\020\ufff2\023\ufff2\026" +
    "\ufff2\030\ufff2\034\ufff2\035\ufff2\036\ufff2\037\ufff2\040\ufff2" +
    "\042\ufff2\001\002\000\010\023\uffe8\034\uffe8\040\uffe8\001" +
    "\002\000\004\040\131\001\002\000\010\011\124\040\ufffc" +
    "\043\123\001\002\000\006\037\122\040\ufff9\001\002\000" +
    "\004\042\125\001\002\000\006\040\ufffa\043\126\001\002" +
    "\000\006\037\122\040\ufff9\001\002\000\004\040\ufffb\001" +
    "\002\000\004\040\ufffd\001\002\000\040\012\uffff\013\uffff" +
    "\014\uffff\015\uffff\016\uffff\020\uffff\023\uffff\026\uffff\030" +
    "\uffff\034\uffff\035\uffff\036\uffff\037\uffff\040\uffff\042\uffff" +
    "\001\002\000\004\021\133\001\002\000\014\021\uffe1\024" +
    "\135\025\134\040\uffe1\041\uffe1\001\002\000\012\014\024" +
    "\020\026\037\054\042\043\001\002\000\012\014\024\020" +
    "\026\037\054\042\043\001\002\000\010\021\uffe3\040\uffe3" +
    "\041\uffe3\001\002\000\010\021\uffe2\040\uffe2\041\uffe2\001" +
    "\002\000\004\035\141\001\002\000\004\037\142\001\002" +
    "\000\004\011\143\001\002\000\004\042\144\001\002\000" +
    "\004\040\145\001\002\000\012\014\024\020\026\037\054" +
    "\042\043\001\002\000\004\040\147\001\002\000\004\037" +
    "\150\001\002\000\004\032\151\001\002\000\004\021\152" +
    "\001\002\000\004\022\153\001\002\000\034\012\031\013" +
    "\040\014\024\015\033\016\035\020\026\023\uffe6\026\025" +
    "\030\016\035\030\036\013\037\034\042\043\001\002\000" +
    "\004\023\155\001\002\000\040\012\uffef\013\uffef\014\uffef" +
    "\015\uffef\016\uffef\020\uffef\023\uffef\026\uffef\030\uffef\034" +
    "\uffef\035\uffef\036\uffef\037\uffef\040\uffef\042\uffef\001\002" +
    "\000\010\023\uffe9\034\uffe9\040\uffe9\001\002\000\004\002" +
    "\000\001\002\000\010\023\uffeb\034\uffeb\040\uffeb\001\002" +
    "\000\010\023\uffea\034\uffea\040\uffea\001\002\000\010\023" +
    "\uffed\034\uffed\040\uffed\001\002\000\006\037\166\050\165" +
    "\001\002\000\004\043\175\001\002\000\006\044\171\045" +
    "\172\001\002\000\004\021\167\001\002\000\004\040\170" +
    "\001\002\000\040\012\uffd0\013\uffd0\014\uffd0\015\uffd0\016" +
    "\uffd0\020\uffd0\023\uffd0\026\uffd0\030\uffd0\034\uffd0\035\uffd0" +
    "\036\uffd0\037\uffd0\040\uffd0\042\uffd0\001\002\000\004\050" +
    "\174\001\002\000\004\050\173\001\002\000\004\043\uffd2" +
    "\001\002\000\004\043\uffd3\001\002\000\004\037\176\001" +
    "\002\000\004\021\177\001\002\000\004\040\200\001\002" +
    "\000\040\012\uffd1\013\uffd1\014\uffd1\015\uffd1\016\uffd1\020" +
    "\uffd1\023\uffd1\026\uffd1\030\uffd1\034\uffd1\035\uffd1\036\uffd1" +
    "\037\uffd1\040\uffd1\042\uffd1\001\002\000\010\023\uffe7\034" +
    "\uffe7\040\uffe7\001\002\000\012\014\024\020\026\037\054" +
    "\042\043\001\002\000\012\014\024\020\026\037\054\042" +
    "\043\001\002\000\010\021\uffe5\040\uffe5\041\uffe5\001\002" +
    "\000\010\021\uffe4\040\uffe4\041\uffe4\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\203\000\004\002\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\034\003\016\004\020\005" +
    "\036\006\017\007\021\010\041\013\013\015\040\017\026" +
    "\020\035\023\022\025\031\026\014\001\001\000\002\001" +
    "\001\000\002\001\001\000\034\003\016\004\020\005\036" +
    "\006\017\007\200\010\041\013\013\015\040\017\026\020" +
    "\035\023\022\025\031\026\014\001\001\000\002\001\001" +
    "\000\034\003\016\004\020\005\036\006\017\007\161\010" +
    "\041\013\013\015\040\017\026\020\035\023\022\025\031" +
    "\026\014\001\001\000\034\003\016\004\020\005\036\006" +
    "\017\007\160\010\041\013\013\015\040\017\026\020\035" +
    "\023\022\025\031\026\014\001\001\000\034\003\016\004" +
    "\020\005\036\006\017\007\157\010\041\013\013\015\040" +
    "\017\026\020\035\023\022\025\031\026\014\001\001\000" +
    "\002\001\001\000\034\003\016\004\020\005\036\006\017" +
    "\007\155\010\041\013\013\015\040\017\026\020\035\023" +
    "\022\025\031\026\014\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\013\131\015\040\001\001\000\004\021" +
    "\120\001\001\000\002\001\001\000\002\001\001\000\034" +
    "\003\016\004\020\005\036\006\017\007\117\010\041\013" +
    "\013\015\040\017\026\020\035\023\022\025\031\026\014" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\022\057\001\001\000\034\003\016\004\020" +
    "\005\036\006\017\007\055\010\041\013\013\015\040\017" +
    "\026\020\035\023\022\025\031\026\014\001\001\000\002" +
    "\001\001\000\004\014\050\001\001\000\002\001\001\000" +
    "\002\001\001\000\034\003\016\004\020\005\036\006\017" +
    "\007\044\010\041\013\013\015\040\017\026\020\035\023" +
    "\022\025\031\026\014\001\001\000\002\001\001\000\034" +
    "\003\016\004\020\005\036\006\017\007\046\010\041\013" +
    "\013\015\040\017\026\020\035\023\022\025\031\026\014" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\015" +
    "\054\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\022\070" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\022\067\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\010\072\013\013\015" +
    "\040\001\001\000\002\001\001\000\002\001\001\000\034" +
    "\003\016\004\020\005\036\006\017\007\075\010\041\013" +
    "\013\015\040\017\026\020\035\023\022\025\031\026\014" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\010\104\013\013\015\040\001\001\000\002\001" +
    "\001\000\002\001\001\000\034\003\016\004\020\005\036" +
    "\006\017\007\107\010\041\013\013\015\040\017\026\020" +
    "\035\023\022\025\031\026\014\001\001\000\002\001\001" +
    "\000\004\012\111\001\001\000\002\001\001\000\004\004" +
    "\113\001\001\000\002\001\001\000\034\003\016\004\020" +
    "\005\036\006\017\007\115\010\041\013\013\015\040\017" +
    "\026\020\035\023\022\025\031\026\014\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\021\127\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\021\126\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\010\136\013\013\015" +
    "\040\001\001\000\010\010\135\013\013\015\040\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\010\145\013\013\015\040\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\034\003\016\004\020\005" +
    "\036\006\017\007\153\010\041\013\013\015\040\017\026" +
    "\020\035\023\022\025\031\026\014\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\024\163\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\010\204" +
    "\013\013\015\040\001\001\000\010\010\203\013\013\015" +
    "\040\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // CONTADOR ::= tkn_id tkn_decrement tkn_puntocoma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTADOR",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // CONTADOR ::= tkn_id tkn_increment tkn_puntocoma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTADOR",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // TERNARIO ::= CONDICION tkn_ternario BLOQUE tkn_dospuntos BLOQUE tkn_puntocoma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TERNARIO",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // PRINTF ::= tkn_printf tkn_parentesisiz tkn_id tkn_parentesisde tkn_puntocoma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PRINTF",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // PRINTF ::= tkn_printf tkn_parentesisiz CONSTSTR tkn_coma tkn_id tkn_parentesisde tkn_puntocoma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PRINTF",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // CONSTSTR ::= tkn_comillas tkn_porcentajec tkn_comillas 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONSTSTR",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // CONSTSTR ::= tkn_comillas tkn_porcentajed tkn_comillas 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONSTSTR",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // TIPOCHAR ::= tkn_charp 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPOCHAR",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // TIPOCHAR ::= tkn_char 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPOCHAR",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // TIPOINT ::= tkn_intp 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPOINT",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // TIPOINT ::= tkn_int 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPOINT",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // TIPO ::= TIPOCHAR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // TIPO ::= TIPOINT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // VALOR ::= tkn_id 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VALOR",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // VALOR ::= tkn_num 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VALOR",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // VALOR ::= tkn_digitos 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VALOR",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // OPCONDICION ::= tkn_igual 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPCONDICION",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // OPCONDICION ::= tkn_oprel 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPCONDICION",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // CONDICIONP ::= VALOR OPCONDICION VALOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICIONP",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // CONDICION ::= CONDICIONP 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // CONDICION ::= tkn_parentesisiz CONDICIONP tkn_parentesisde 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // CONDICION ::= tkn_parentesisiz CONDICIONP tkn_parentesisde tkn_or CONDICION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // CONDICION ::= tkn_parentesisiz CONDICIONP tkn_parentesisde tkn_and CONDICION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // CONDICION ::= CONDICIONP tkn_or CONDICION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // CONDICION ::= CONDICIONP tkn_and CONDICION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // BLOQUE ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BLOQUE",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // BLOQUE ::= CONTADOR BLOQUE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BLOQUE",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // BLOQUE ::= TERNARIO BLOQUE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BLOQUE",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // BLOQUE ::= PRINTF BLOQUE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BLOQUE",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // BLOQUE ::= DECLARACION BLOQUE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BLOQUE",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // BLOQUE ::= IF BLOQUE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BLOQUE",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // BLOQUE ::= FOR BLOQUE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BLOQUE",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // BLOQUE ::= WHILE BLOQUE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BLOQUE",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // WHILE ::= tkn_while tkn_parentesisiz CONDICION tkn_parentesisde tkn_llaveiz BLOQUE tkn_llaveder 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("WHILE",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // FOR ::= tkn_for tkn_parentesisiz tkn_int tkn_id tkn_igual tkn_num tkn_puntocoma CONDICION tkn_puntocoma tkn_id tkn_increment tkn_parentesisde tkn_llaveiz BLOQUE tkn_llaveder 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-14)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // ELSE ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // ELSE ::= tkn_else IF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // ELSE ::= tkn_else tkn_llaveiz BLOQUE tkn_llaveder 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // IF ::= tkn_if tkn_parentesisiz CONDICION tkn_parentesisde tkn_llaveiz BLOQUE tkn_llaveder ELSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // IDCHAR ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IDCHAR",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // IDCHAR ::= tkn_id tkn_igual tkn_comilla tkn_letra tkn_comilla 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IDCHAR",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // IDCHAR ::= tkn_id tkn_igual tkn_comilla tkn_letra tkn_comilla tkn_coma IDCHAR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IDCHAR",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // IDCHAR ::= tkn_id 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IDCHAR",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // IDCHAR ::= tkn_id tkn_coma IDCHAR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IDCHAR",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // IDINT ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IDINT",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // IDINT ::= tkn_id tkn_igual tkn_num 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IDINT",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // IDINT ::= tkn_id tkn_igual tkn_num tkn_coma IDINT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IDINT",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // IDINT ::= tkn_id 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IDINT",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // IDINT ::= tkn_id tkn_coma IDINT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IDINT",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // DECLARACION ::= TIPOCHAR IDCHAR tkn_puntocoma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // DECLARACION ::= TIPOINT IDINT tkn_puntocoma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= tkn_int tkn_main tkn_parentesisiz tkn_parentesisde tkn_llaveiz BLOQUE tkn_llaveder 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

