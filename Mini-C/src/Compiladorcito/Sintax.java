
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Aug 29 12:56:01 CST 2022
//----------------------------------------------------

package Compiladorcito;

import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Aug 29 12:56:01 CST 2022
  */
public class Sintax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\110\000\002\002\004\000\002\002\015\000\002\006" +
    "\005\000\002\017\005\000\002\017\003\000\002\017\007" +
    "\000\002\017\005\000\002\017\002\000\002\033\004\000" +
    "\002\033\002\000\002\031\004\000\002\031\003\000\002" +
    "\026\003\000\002\026\002\000\002\035\003\000\002\035" +
    "\002\000\002\042\003\000\002\042\002\000\002\032\006" +
    "\000\002\032\005\000\002\032\003\000\002\032\004\000" +
    "\002\027\006\000\002\027\004\000\002\025\015\000\002" +
    "\041\005\000\002\041\003\000\002\040\007\000\002\037" +
    "\006\000\002\037\003\000\002\030\010\000\002\004\012" +
    "\000\002\012\006\000\002\012\004\000\002\012\002\000" +
    "\002\005\021\000\002\003\011\000\002\007\004\000\002" +
    "\007\004\000\002\007\004\000\002\007\004\000\002\007" +
    "\004\000\002\007\004\000\002\007\004\000\002\007\004" +
    "\000\002\007\004\000\002\007\002\000\002\010\005\000" +
    "\002\010\005\000\002\010\007\000\002\010\007\000\002" +
    "\010\005\000\002\010\003\000\002\013\005\000\002\014" +
    "\003\000\002\014\003\000\002\015\003\000\002\015\003" +
    "\000\002\015\003\000\002\016\003\000\002\016\003\000" +
    "\002\016\003\000\002\016\003\000\002\020\011\000\002" +
    "\020\007\000\002\022\010\000\002\023\005\000\002\023" +
    "\005\000\002\024\012\000\002\034\003\000\002\034\003" +
    "\000\002\034\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\263\000\012\012\010\013\007\035\006\036\012\001" +
    "\002\000\012\012\010\013\007\035\006\036\012\001\002" +
    "\000\004\002\264\001\002\000\006\010\031\037\uffc3\001" +
    "\002\000\012\021\uffc4\037\uffc4\040\uffc4\043\uffc4\001\002" +
    "\000\012\021\uffc5\037\uffc5\040\uffc5\043\uffc5\001\002\000" +
    "\004\037\014\001\002\000\012\021\uffc6\037\uffc6\040\uffc6" +
    "\043\uffc6\001\002\000\004\002\ufff6\001\002\000\004\020" +
    "\015\001\002\000\014\012\010\013\007\021\ufff2\035\020" +
    "\036\012\001\002\000\004\021\027\001\002\000\004\021" +
    "\ufff3\001\002\000\012\021\uffc3\037\uffc3\040\uffc3\043\uffc3" +
    "\001\002\000\010\021\uffed\037\023\043\022\001\002\000" +
    "\012\012\010\013\007\035\020\036\012\001\002\000\006" +
    "\021\uffec\043\024\001\002\000\012\012\010\013\007\035" +
    "\020\036\012\001\002\000\004\021\uffef\001\002\000\004" +
    "\021\uffee\001\002\000\004\040\030\001\002\000\012\012" +
    "\uffe3\013\uffe3\035\uffe3\036\uffe3\001\002\000\004\020\032" +
    "\001\002\000\004\021\033\001\002\000\004\022\034\001" +
    "\002\000\036\012\010\013\007\014\050\015\054\016\057" +
    "\020\052\026\047\027\uffd3\030\037\031\060\035\020\036" +
    "\012\037\056\042\064\001\002\000\014\021\uffcd\024\261" +
    "\025\260\040\uffcd\041\uffcd\001\002\000\044\012\010\013" +
    "\007\014\050\015\054\016\057\020\052\023\uffd3\026\047" +
    "\027\uffd3\030\037\031\060\034\uffd3\035\020\036\012\037" +
    "\056\040\uffd3\042\064\001\002\000\004\020\247\001\002" +
    "\000\044\012\010\013\007\014\050\015\054\016\057\020" +
    "\052\023\uffd3\026\047\027\uffd3\030\037\031\060\034\uffd3" +
    "\035\020\036\012\037\056\040\uffd3\042\064\001\002\000" +
    "\044\012\010\013\007\014\050\015\054\016\057\020\052" +
    "\023\uffd3\026\047\027\uffd3\030\037\031\060\034\uffd3\035" +
    "\020\036\012\037\056\040\uffd3\042\064\001\002\000\044" +
    "\012\010\013\007\014\050\015\054\016\057\020\052\023" +
    "\uffd3\026\047\027\uffd3\030\037\031\060\034\uffd3\035\020" +
    "\036\012\037\056\040\uffd3\042\064\001\002\000\044\012" +
    "\uffe4\013\uffe4\014\uffe4\015\uffe4\016\uffe4\020\uffe4\023\uffe4" +
    "\026\uffe4\027\uffe4\030\uffe4\031\uffe4\034\uffe4\035\uffe4\036" +
    "\uffe4\037\uffe4\040\uffe4\042\uffe4\001\002\000\044\012\010" +
    "\013\007\014\050\015\054\016\057\020\052\023\uffd3\026" +
    "\047\027\uffd3\030\037\031\060\034\uffd3\035\020\036\012" +
    "\037\056\040\uffd3\042\064\001\002\000\004\027\211\001" +
    "\002\000\044\012\010\013\007\014\050\015\054\016\057" +
    "\020\052\023\uffd3\026\047\027\uffd3\030\037\031\060\034" +
    "\uffd3\035\020\036\012\037\056\040\uffd3\042\064\001\002" +
    "\000\004\020\172\001\002\000\020\007\uffc9\011\uffc9\021" +
    "\uffc9\024\uffc9\025\uffc9\040\uffc9\041\uffc9\001\002\000\006" +
    "\037\156\040\ufffa\001\002\000\010\014\050\037\075\042" +
    "\064\001\002\000\044\012\010\013\007\014\050\015\054" +
    "\016\057\020\052\023\uffd3\026\047\027\uffd3\030\037\031" +
    "\060\034\uffd3\035\020\036\012\037\056\040\uffd3\042\064" +
    "\001\002\000\004\020\132\001\002\000\044\012\010\013" +
    "\007\014\050\015\054\016\057\020\052\023\uffd3\026\047" +
    "\027\uffd3\030\037\031\060\034\uffd3\035\020\036\012\037" +
    "\056\040\uffd3\042\064\001\002\000\014\007\uffc7\011\uffc7" +
    "\020\117\032\116\033\115\001\002\000\004\020\107\001" +
    "\002\000\004\020\100\001\002\000\044\012\010\013\007" +
    "\014\050\015\054\016\057\020\052\023\uffd3\026\047\027" +
    "\uffd3\030\037\031\060\034\uffd3\035\020\036\012\037\056" +
    "\040\uffd3\042\064\001\002\000\006\007\074\011\073\001" +
    "\002\000\004\041\065\001\002\000\020\007\uffc8\011\uffc8" +
    "\021\uffc8\024\uffc8\025\uffc8\040\uffc8\041\uffc8\001\002\000" +
    "\036\012\010\013\007\014\050\015\054\016\057\020\052" +
    "\026\047\030\037\031\060\034\uffd3\035\020\036\012\037" +
    "\056\042\064\001\002\000\004\034\067\001\002\000\036" +
    "\012\010\013\007\014\050\015\054\016\057\020\052\026" +
    "\047\030\037\031\060\035\020\036\012\037\056\040\uffd3" +
    "\042\064\001\002\000\004\040\071\001\002\000\044\012" +
    "\uffc0\013\uffc0\014\uffc0\015\uffc0\016\uffc0\020\uffc0\023\uffc0" +
    "\026\uffc0\027\uffc0\030\uffc0\031\uffc0\034\uffc0\035\uffc0\036" +
    "\uffc0\037\uffc0\040\uffc0\042\uffc0\001\002\000\010\014\050" +
    "\037\075\042\064\001\002\000\010\014\uffca\037\uffca\042" +
    "\uffca\001\002\000\010\014\uffcb\037\uffcb\042\uffcb\001\002" +
    "\000\020\007\uffc7\011\uffc7\021\uffc7\024\uffc7\025\uffc7\040" +
    "\uffc7\041\uffc7\001\002\000\014\021\uffcc\024\uffcc\025\uffcc" +
    "\040\uffcc\041\uffcc\001\002\000\012\023\uffdb\027\uffdb\034" +
    "\uffdb\040\uffdb\001\002\000\002\001\002\000\004\043\102" +
    "\001\002\000\004\051\103\001\002\000\004\037\104\001" +
    "\002\000\004\021\105\001\002\000\004\040\106\001\002" +
    "\000\044\012\uffbd\013\uffbd\014\uffbd\015\uffbd\016\uffbd\020" +
    "\uffbd\023\uffbd\026\uffbd\027\uffbd\030\uffbd\031\uffbd\034\uffbd" +
    "\035\uffbd\036\uffbd\037\uffbd\040\uffbd\042\uffbd\001\002\000" +
    "\012\014\050\020\052\037\075\042\064\001\002\000\004" +
    "\021\111\001\002\000\004\022\112\001\002\000\036\012" +
    "\010\013\007\014\050\015\054\016\057\020\052\023\uffd3" +
    "\026\047\030\037\031\060\035\020\036\012\037\056\042" +
    "\064\001\002\000\004\023\114\001\002\000\044\012\uffdd" +
    "\013\uffdd\014\uffdd\015\uffdd\016\uffdd\020\uffdd\023\uffdd\026" +
    "\uffdd\027\uffdd\030\uffdd\031\uffdd\034\uffdd\035\uffdd\036\uffdd" +
    "\037\uffdd\040\uffdd\042\uffdd\001\002\000\004\040\130\001" +
    "\002\000\004\040\127\001\002\000\006\021\ufff0\037\121" +
    "\001\002\000\004\021\125\001\002\000\006\021\uffe7\043" +
    "\123\001\002\000\004\021\ufff1\001\002\000\004\037\121" +
    "\001\002\000\004\021\uffe8\001\002\000\004\040\126\001" +
    "\002\000\044\012\uffe6\013\uffe6\014\uffe6\015\uffe6\016\uffe6" +
    "\020\uffe6\023\uffe6\026\uffe6\027\uffe6\030\uffe6\031\uffe6\034" +
    "\uffe6\035\uffe6\036\uffe6\037\uffe6\040\uffe6\042\uffe6\001\002" +
    "\000\044\012\uffbf\013\uffbf\014\uffbf\015\uffbf\016\uffbf\020" +
    "\uffbf\023\uffbf\026\uffbf\027\uffbf\030\uffbf\031\uffbf\034\uffbf" +
    "\035\uffbf\036\uffbf\037\uffbf\040\uffbf\042\uffbf\001\002\000" +
    "\044\012\uffbe\013\uffbe\014\uffbe\015\uffbe\016\uffbe\020\uffbe" +
    "\023\uffbe\026\uffbe\027\uffbe\030\uffbe\031\uffbe\034\uffbe\035" +
    "\uffbe\036\uffbe\037\uffbe\040\uffbe\042\uffbe\001\002\000\012" +
    "\023\uffd7\027\uffd7\034\uffd7\040\uffd7\001\002\000\012\014" +
    "\050\020\052\037\075\042\064\001\002\000\004\021\134" +
    "\001\002\000\004\022\135\001\002\000\036\012\010\013" +
    "\007\014\050\015\054\016\057\020\052\023\uffd3\026\047" +
    "\030\037\031\060\035\020\036\012\037\056\042\064\001" +
    "\002\000\004\023\137\001\002\000\046\012\uffdf\013\uffdf" +
    "\014\uffdf\015\uffdf\016\uffdf\017\140\020\uffdf\023\uffdf\026" +
    "\uffdf\027\uffdf\030\uffdf\031\uffdf\034\uffdf\035\uffdf\036\uffdf" +
    "\037\uffdf\040\uffdf\042\uffdf\001\002\000\006\015\054\022" +
    "\143\001\002\000\044\012\uffe2\013\uffe2\014\uffe2\015\uffe2" +
    "\016\uffe2\020\uffe2\023\uffe2\026\uffe2\027\uffe2\030\uffe2\031" +
    "\uffe2\034\uffe2\035\uffe2\036\uffe2\037\uffe2\040\uffe2\042\uffe2" +
    "\001\002\000\044\012\uffe0\013\uffe0\014\uffe0\015\uffe0\016" +
    "\uffe0\020\uffe0\023\uffe0\026\uffe0\027\uffe0\030\uffe0\031\uffe0" +
    "\034\uffe0\035\uffe0\036\uffe0\037\uffe0\040\uffe0\042\uffe0\001" +
    "\002\000\036\012\010\013\007\014\050\015\054\016\057" +
    "\020\052\023\uffd3\026\047\030\037\031\060\035\020\036" +
    "\012\037\056\042\064\001\002\000\004\023\145\001\002" +
    "\000\044\012\uffe1\013\uffe1\014\uffe1\015\uffe1\016\uffe1\020" +
    "\uffe1\023\uffe1\026\uffe1\027\uffe1\030\uffe1\031\uffe1\034\uffe1" +
    "\035\uffe1\036\uffe1\037\uffe1\040\uffe1\042\uffe1\001\002\000" +
    "\012\023\uffd4\027\uffd4\034\uffd4\040\uffd4\001\002\000\004" +
    "\021\150\001\002\000\014\021\uffce\024\152\025\151\040" +
    "\uffce\041\uffce\001\002\000\012\014\050\020\052\037\075" +
    "\042\064\001\002\000\012\014\050\020\052\037\075\042" +
    "\064\001\002\000\010\021\uffd0\040\uffd0\041\uffd0\001\002" +
    "\000\010\021\uffcf\040\uffcf\041\uffcf\001\002\000\004\040" +
    "\171\001\002\000\010\011\160\040\ufffd\043\157\001\002" +
    "\000\006\037\166\040\ufffa\001\002\000\006\037\161\042" +
    "\162\001\002\000\004\020\117\001\002\000\006\040\ufffb" +
    "\043\164\001\002\000\044\012\uffe5\013\uffe5\014\uffe5\015" +
    "\uffe5\016\uffe5\020\uffe5\023\uffe5\026\uffe5\027\uffe5\030\uffe5" +
    "\031\uffe5\034\uffe5\035\uffe5\036\uffe5\037\uffe5\040\uffe5\042" +
    "\uffe5\001\002\000\006\037\166\040\ufffa\001\002\000\004" +
    "\040\ufffc\001\002\000\010\011\167\040\ufffd\043\157\001" +
    "\002\000\004\042\162\001\002\000\004\040\ufffe\001\002" +
    "\000\044\012\uffff\013\uffff\014\uffff\015\uffff\016\uffff\020" +
    "\uffff\023\uffff\026\uffff\027\uffff\030\uffff\031\uffff\034\uffff" +
    "\035\uffff\036\uffff\037\uffff\040\uffff\042\uffff\001\002\000" +
    "\004\035\173\001\002\000\004\037\174\001\002\000\004" +
    "\011\175\001\002\000\004\042\176\001\002\000\004\040" +
    "\177\001\002\000\012\014\050\020\052\037\075\042\064" +
    "\001\002\000\004\040\201\001\002\000\004\037\202\001" +
    "\002\000\004\032\203\001\002\000\004\021\204\001\002" +
    "\000\004\022\205\001\002\000\036\012\010\013\007\014" +
    "\050\015\054\016\057\020\052\023\uffd3\026\047\030\037" +
    "\031\060\035\020\036\012\037\056\042\064\001\002\000" +
    "\004\023\207\001\002\000\044\012\uffde\013\uffde\014\uffde" +
    "\015\uffde\016\uffde\020\uffde\023\uffde\026\uffde\027\uffde\030" +
    "\uffde\031\uffde\034\uffde\035\uffde\036\uffde\037\uffde\040\uffde" +
    "\042\uffde\001\002\000\012\023\uffd8\027\uffd8\034\uffd8\040" +
    "\uffd8\001\002\000\004\042\212\001\002\000\004\040\213" +
    "\001\002\000\004\023\214\001\002\000\014\002\ufff8\012" +
    "\010\013\007\035\020\036\012\001\002\000\014\002\ufff8" +
    "\012\010\013\007\035\020\036\012\001\002\000\004\002" +
    "\000\001\002\000\004\037\220\001\002\000\004\020\221" +
    "\001\002\000\014\012\010\013\007\021\ufff4\035\020\036" +
    "\012\001\002\000\004\021\ufff5\001\002\000\004\021\230" +
    "\001\002\000\004\037\225\001\002\000\006\021\uffea\043" +
    "\226\001\002\000\012\012\010\013\007\035\020\036\012" +
    "\001\002\000\004\021\uffeb\001\002\000\004\022\231\001" +
    "\002\000\036\012\010\013\007\014\050\015\054\016\057" +
    "\020\052\026\047\027\uffd3\030\037\031\060\035\020\036" +
    "\012\037\056\042\064\001\002\000\004\027\233\001\002" +
    "\000\010\037\235\042\236\046\237\001\002\000\004\040" +
    "\240\001\002\000\004\040\uffbc\001\002\000\004\040\uffbb" +
    "\001\002\000\004\040\uffba\001\002\000\004\023\241\001" +
    "\002\000\014\002\uffe9\012\uffe9\013\uffe9\035\uffe9\036\uffe9" +
    "\001\002\000\004\002\ufff9\001\002\000\012\023\uffda\027" +
    "\uffda\034\uffda\040\uffda\001\002\000\012\023\uffd9\027\uffd9" +
    "\034\uffd9\040\uffd9\001\002\000\012\023\uffd5\027\uffd5\034" +
    "\uffd5\040\uffd5\001\002\000\012\023\uffdc\027\uffdc\034\uffdc" +
    "\040\uffdc\001\002\000\004\052\250\001\002\000\006\021" +
    "\252\043\251\001\002\000\004\037\254\001\002\000\004" +
    "\040\253\001\002\000\044\012\uffc1\013\uffc1\014\uffc1\015" +
    "\uffc1\016\uffc1\020\uffc1\023\uffc1\026\uffc1\027\uffc1\030\uffc1" +
    "\031\uffc1\034\uffc1\035\uffc1\036\uffc1\037\uffc1\040\uffc1\042" +
    "\uffc1\001\002\000\004\021\255\001\002\000\004\040\256" +
    "\001\002\000\044\012\uffc2\013\uffc2\014\uffc2\015\uffc2\016" +
    "\uffc2\020\uffc2\023\uffc2\026\uffc2\027\uffc2\030\uffc2\031\uffc2" +
    "\034\uffc2\035\uffc2\036\uffc2\037\uffc2\040\uffc2\042\uffc2\001" +
    "\002\000\012\023\uffd6\027\uffd6\034\uffd6\040\uffd6\001\002" +
    "\000\012\014\050\020\052\037\075\042\064\001\002\000" +
    "\012\014\050\020\052\037\075\042\064\001\002\000\010" +
    "\021\uffd2\040\uffd2\041\uffd2\001\002\000\010\021\uffd1\040" +
    "\uffd1\041\uffd1\001\002\000\004\002\001\001\002\000\004" +
    "\002\ufff7\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\263\000\012\002\012\016\010\030\003\031\004\001" +
    "\001\000\012\002\012\016\010\030\003\031\264\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\016\020\032\016\035" +
    "\015\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\016\020\032\025\001" +
    "\001\000\002\001\001\000\006\016\020\032\024\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\040\003\037\004\043\005\060\006\041\007" +
    "\044\010\062\013\034\015\061\016\050\020\045\022\054" +
    "\023\035\024\040\037\052\040\042\001\001\000\002\001" +
    "\001\000\040\003\037\004\043\005\060\006\041\007\256" +
    "\010\062\013\034\015\061\016\050\020\045\022\054\023" +
    "\035\024\040\037\052\040\042\001\001\000\002\001\001" +
    "\000\040\003\037\004\043\005\060\006\041\007\245\010" +
    "\062\013\034\015\061\016\050\020\045\022\054\023\035" +
    "\024\040\037\052\040\042\001\001\000\040\003\037\004" +
    "\043\005\060\006\041\007\244\010\062\013\034\015\061" +
    "\016\050\020\045\022\054\023\035\024\040\037\052\040" +
    "\042\001\001\000\040\003\037\004\043\005\060\006\041" +
    "\007\243\010\062\013\034\015\061\016\050\020\045\022" +
    "\054\023\035\024\040\037\052\040\042\001\001\000\002" +
    "\001\001\000\040\003\037\004\043\005\060\006\041\007" +
    "\242\010\062\013\034\015\061\016\050\020\045\022\054" +
    "\023\035\024\040\037\052\040\042\001\001\000\002\001" +
    "\001\000\040\003\037\004\043\005\060\006\041\007\207" +
    "\010\062\013\034\015\061\016\050\020\045\022\054\023" +
    "\035\024\040\037\052\040\042\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\017\154\001\001\000\006\013" +
    "\146\015\061\001\001\000\040\003\037\004\043\005\060" +
    "\006\041\007\145\010\062\013\034\015\061\016\050\020" +
    "\045\022\054\023\035\024\040\037\052\040\042\001\001" +
    "\000\002\001\001\000\040\003\037\004\043\005\060\006" +
    "\041\007\130\010\062\013\034\015\061\016\050\020\045" +
    "\022\054\023\035\024\040\037\052\040\042\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\040" +
    "\003\037\004\043\005\060\006\041\007\076\010\062\013" +
    "\034\015\061\016\050\020\045\022\054\023\035\024\040" +
    "\037\052\040\042\001\001\000\004\014\071\001\001\000" +
    "\002\001\001\000\002\001\001\000\040\003\037\004\043" +
    "\005\060\006\041\007\065\010\062\013\034\015\061\016" +
    "\050\020\045\022\054\023\035\024\040\037\052\040\042" +
    "\001\001\000\002\001\001\000\040\003\037\004\043\005" +
    "\060\006\041\007\067\010\062\013\034\015\061\016\050" +
    "\020\045\022\054\023\035\024\040\037\052\040\042\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\015\075" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\021\100" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\010\107\013\034\015\061\001\001\000\002\001" +
    "\001\000\002\001\001\000\040\003\037\004\043\005\060" +
    "\006\041\007\112\010\062\013\034\015\061\016\050\020" +
    "\045\022\054\023\035\024\040\037\052\040\042\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\041\121\042\117\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\041" +
    "\123\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\010\132\013\034\015\061\001\001\000\002" +
    "\001\001\000\002\001\001\000\040\003\037\004\043\005" +
    "\060\006\041\007\135\010\062\013\034\015\061\016\050" +
    "\020\045\022\054\023\035\024\040\037\052\040\042\001" +
    "\001\000\002\001\001\000\004\012\140\001\001\000\004" +
    "\004\141\001\001\000\002\001\001\000\002\001\001\000" +
    "\040\003\037\004\043\005\060\006\041\007\143\010\062" +
    "\013\034\015\061\016\050\020\045\022\054\023\035\024" +
    "\040\037\052\040\042\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\010\153\013\034\015\061\001\001\000\010" +
    "\010\152\013\034\015\061\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\017\167\001\001\000\004\040\162\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\017\164" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\010\177\013\034\015\061\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\040\003\037\004\043" +
    "\005\060\006\041\007\205\010\062\013\034\015\061\016" +
    "\050\020\045\022\054\023\035\024\040\037\052\040\042" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\016\216\025\214\033\215\001\001\000\010\016" +
    "\216\025\214\033\241\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\016\223\026\222\027" +
    "\221\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\016\223\027\226\001" +
    "\001\000\002\001\001\000\002\001\001\000\040\003\037" +
    "\004\043\005\060\006\041\007\231\010\062\013\034\015" +
    "\061\016\050\020\045\022\054\023\035\024\040\037\052" +
    "\040\042\001\001\000\002\001\001\000\004\034\233\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\010\262\013\034\015\061\001\001" +
    "\000\010\010\261\013\034\015\061\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // RETURN ::= tkn_letra 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RETURN",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // RETURN ::= tkn_num 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RETURN",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // RETURN ::= tkn_id 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RETURN",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // SCANF ::= tkn_scanf tkn_parentesisiz CONSTSTR tkn_coma tkn_ampersand tkn_id tkn_parentesisde tkn_puntocoma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SCANF",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // CONTADOR ::= tkn_id tkn_decrement tkn_puntocoma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTADOR",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // CONTADOR ::= tkn_id tkn_increment tkn_puntocoma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTADOR",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // TERNARIO ::= CONDICION tkn_ternario BLOQUE tkn_dospuntos BLOQUE tkn_puntocoma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TERNARIO",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // PRINTF ::= tkn_printf tkn_parentesisiz tkn_id2 tkn_parentesisde tkn_puntocoma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PRINTF",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // PRINTF ::= tkn_printf tkn_parentesisiz tkn_id2 tkn_coma tkn_id tkn_parentesisde tkn_puntocoma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PRINTF",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // TIPO ::= tkn_int 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // TIPO ::= tkn_charp 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // TIPO ::= tkn_intp 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // TIPO ::= tkn_char 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // VALOR ::= tkn_id 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VALOR",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // VALOR ::= tkn_num 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VALOR",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // VALOR ::= tkn_digitos 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VALOR",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // OPCONDICION ::= tkn_igual 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPCONDICION",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // OPCONDICION ::= tkn_oprel 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPCONDICION",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // CONDICIONP ::= VALOR OPCONDICION VALOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICIONP",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // CONDICION ::= CONDICIONP 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // CONDICION ::= tkn_parentesisiz CONDICIONP tkn_parentesisde 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // CONDICION ::= tkn_parentesisiz CONDICIONP tkn_parentesisde tkn_or CONDICION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // CONDICION ::= tkn_parentesisiz CONDICIONP tkn_parentesisde tkn_and CONDICION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // CONDICION ::= CONDICIONP tkn_or CONDICION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // CONDICION ::= CONDICIONP tkn_and CONDICION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // BLOQUE ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BLOQUE",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // BLOQUE ::= LLAMADO BLOQUE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BLOQUE",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // BLOQUE ::= SCANF BLOQUE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BLOQUE",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // BLOQUE ::= CONTADOR BLOQUE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BLOQUE",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // BLOQUE ::= TERNARIO BLOQUE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BLOQUE",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // BLOQUE ::= PRINTF BLOQUE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BLOQUE",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // BLOQUE ::= DECLARACION BLOQUE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BLOQUE",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // BLOQUE ::= IF BLOQUE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BLOQUE",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // BLOQUE ::= FOR BLOQUE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BLOQUE",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // BLOQUE ::= WHILE BLOQUE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BLOQUE",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // WHILE ::= tkn_while tkn_parentesisiz CONDICION tkn_parentesisde tkn_llaveiz BLOQUE tkn_llaveder 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("WHILE",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // FOR ::= tkn_for tkn_parentesisiz tkn_int tkn_id tkn_igual tkn_num tkn_puntocoma CONDICION tkn_puntocoma tkn_id tkn_increment tkn_parentesisde tkn_llaveiz BLOQUE tkn_llaveder 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-14)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // ELSE ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // ELSE ::= tkn_else IF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // ELSE ::= tkn_else tkn_llaveiz BLOQUE tkn_llaveder 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // IF ::= tkn_if tkn_parentesisiz CONDICION tkn_parentesisde tkn_llaveiz BLOQUE tkn_llaveder ELSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // PROTOTIPO ::= TIPO tkn_id tkn_parentesisiz PARAMS2 tkn_parentesisde tkn_puntocoma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PROTOTIPO",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // LLAMADO ::= CALLBACK 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LLAMADO",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // LLAMADO ::= TIPO tkn_id tkn_igual CALLBACK 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LLAMADO",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // CALLBACK ::= tkn_id tkn_parentesisiz PARAMS3 tkn_parentesisde tkn_puntocoma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CALLBACK",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // CALLPARAMS ::= tkn_id 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CALLPARAMS",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // CALLPARAMS ::= tkn_id tkn_coma CALLPARAMS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CALLPARAMS",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // FUNCION ::= TIPO tkn_id tkn_parentesisiz PARAMS tkn_parentesisde tkn_llaveiz BLOQUE tkn_return RETURN tkn_puntocoma tkn_llaveder 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // DECLAPARAM ::= TIPO tkn_id 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLAPARAM",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // DECLAPARAM ::= TIPO tkn_id tkn_coma DECLAPARAM 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLAPARAM",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // PROTOPARAMS ::= TIPO tkn_id 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PROTOPARAMS",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // PROTOPARAMS ::= TIPO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PROTOPARAMS",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // PROTOPARAMS ::= TIPO tkn_coma PROTOPARAMS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PROTOPARAMS",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // PROTOPARAMS ::= TIPO tkn_id tkn_coma PROTOPARAMS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PROTOPARAMS",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // PARAMS3 ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMS3",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // PARAMS3 ::= CALLPARAMS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMS3",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // PARAMS2 ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMS2",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // PARAMS2 ::= PROTOPARAMS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMS2",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // PARAMS ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMS",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // PARAMS ::= DECLAPARAM 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMS",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // PROTOTIPOS ::= INICIO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PROTOTIPOS",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // PROTOTIPOS ::= PROTOTIPO PROTOTIPOS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PROTOTIPOS",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // FUNCIONES ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCIONES",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // FUNCIONES ::= FUNCION FUNCIONES 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCIONES",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // IDINT ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IDINT",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // IDINT ::= tkn_id tkn_igual tkn_num 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IDINT",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // IDINT ::= tkn_id tkn_igual tkn_num tkn_coma IDINT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IDINT",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // IDINT ::= tkn_id 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IDINT",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // IDINT ::= tkn_id tkn_coma IDINT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IDINT",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // DECLARACION ::= TIPO IDINT tkn_puntocoma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= tkn_int tkn_main tkn_parentesisiz tkn_parentesisde tkn_llaveiz BLOQUE tkn_return tkn_num tkn_puntocoma tkn_llaveder FUNCIONES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= PROTOTIPOS EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

