
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Fri Sep 16 22:34:17 CST 2022
//----------------------------------------------------

package Compiladorcito;

import java_cup.runtime.*;
import java.util.ArrayList;
import java.util.*;
import java.io.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Fri Sep 16 22:34:17 CST 2022
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\154\000\002\002\004\000\002\025\003\000\002\030" +
    "\004\000\002\030\004\000\002\030\004\000\002\030\002" +
    "\000\002\014\004\000\002\013\011\000\002\032\006\000" +
    "\002\031\004\000\002\031\004\000\002\023\005\000\002" +
    "\023\004\000\002\023\005\000\002\024\007\000\002\024" +
    "\005\000\002\024\005\000\002\024\005\000\002\024\005" +
    "\000\002\024\007\000\002\024\005\000\002\024\005\000" +
    "\002\024\003\000\002\024\010\000\002\024\010\000\002" +
    "\024\010\000\002\024\010\000\002\024\006\000\002\024" +
    "\006\000\002\021\004\000\002\015\005\000\002\015\005" +
    "\000\002\015\003\000\002\015\003\000\002\015\002\000" +
    "\002\034\011\000\002\003\012\000\002\003\012\000\002" +
    "\003\012\000\002\003\012\000\002\006\006\000\002\006" +
    "\004\000\002\006\006\000\002\006\002\000\002\004\017" +
    "\000\002\004\017\000\002\004\017\000\002\004\017\000" +
    "\002\004\017\000\002\002\011\000\002\002\011\000\002" +
    "\002\011\000\002\002\011\000\002\027\011\000\002\027" +
    "\007\000\002\027\011\000\002\027\011\000\002\027\011" +
    "\000\002\027\011\000\002\027\011\000\002\027\011\000" +
    "\002\012\012\000\002\012\012\000\002\012\012\000\002" +
    "\012\012\000\002\012\012\000\002\012\012\000\002\026" +
    "\004\000\002\026\004\000\002\026\004\000\002\026\004" +
    "\000\002\026\004\000\002\026\004\000\002\026\004\000" +
    "\002\026\002\000\002\022\003\000\002\022\003\000\002" +
    "\022\005\000\002\022\005\000\002\005\005\000\002\005" +
    "\005\000\002\005\007\000\002\005\007\000\002\005\005" +
    "\000\002\005\003\000\002\005\003\000\002\005\005\000" +
    "\002\007\005\000\002\010\003\000\002\010\003\000\002" +
    "\010\003\000\002\010\003\000\002\033\004\000\002\033" +
    "\004\000\002\020\005\000\002\020\005\000\002\020\005" +
    "\000\002\020\005\000\002\020\003\000\002\020\003\000" +
    "\002\020\003\000\002\020\003\000\002\017\003\000\002" +
    "\017\002\000\002\016\005\000\002\016\003\000\002\011" +
    "\005\000\002\011\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0107\000\016\002\ufffc\003\016\014\005\035\021\036" +
    "\015\044\004\001\002\000\004\040\u0109\001\002\000\012" +
    "\003\uffa6\021\uffa6\037\uffa6\043\uffa6\001\002\000\004\002" +
    "\000\001\002\000\004\002\u0108\001\002\000\016\002\ufffc" +
    "\003\016\014\005\035\021\036\015\044\004\001\002\000" +
    "\016\002\ufffc\003\016\014\005\035\021\036\015\044\004" +
    "\001\002\000\006\022\041\040\040\001\002\000\004\020" +
    "\027\001\002\000\004\037\026\001\002\000\014\003\uffa9" +
    "\005\025\021\uffa9\037\uffa9\043\uffa9\001\002\000\004\037" +
    "\024\001\002\000\016\002\ufffc\003\016\014\005\035\021" +
    "\036\015\044\004\001\002\000\012\003\uffa8\021\uffa8\037" +
    "\uffa8\043\uffa8\001\002\000\014\003\uffa7\005\022\021\uffa7" +
    "\037\uffa7\043\uffa7\001\002\000\012\003\uffa5\021\uffa5\037" +
    "\uffa5\043\uffa5\001\002\000\004\002\ufffe\001\002\000\010" +
    "\020\ufff7\021\ufff7\043\ufff7\001\002\000\012\003\uffa4\021" +
    "\uffa4\037\uffa4\043\uffa4\001\002\000\010\020\ufff8\021\ufff8" +
    "\043\ufff8\001\002\000\014\003\016\014\005\021\uffdf\035" +
    "\021\036\015\001\002\000\006\021\uffe1\043\036\001\002" +
    "\000\004\021\035\001\002\000\010\021\uffe0\037\026\043" +
    "\033\001\002\000\014\003\016\014\005\021\uffdf\035\021" +
    "\036\015\001\002\000\004\021\uffe3\001\002\000\006\022" +
    "\ufff9\040\ufff9\001\002\000\014\003\016\014\005\021\uffdf" +
    "\035\021\036\015\001\002\000\004\021\uffe2\001\002\000" +
    "\016\002\ufffb\003\ufffb\014\ufffb\035\ufffb\036\ufffb\044\ufffb" +
    "\001\002\000\022\015\051\016\042\026\043\027\uffb7\030" +
    "\057\031\047\037\053\044\004\001\002\000\006\003\363" +
    "\020\364\001\002\000\006\003\300\020\301\001\002\000" +
    "\024\015\051\016\042\023\uffb7\026\043\027\uffb7\030\057" +
    "\031\047\037\053\044\004\001\002\000\024\015\051\016" +
    "\042\023\uffb7\026\043\027\uffb7\030\057\031\047\037\053" +
    "\044\004\001\002\000\024\015\051\016\042\023\uffb7\026" +
    "\043\027\uffb7\030\057\031\047\037\053\044\004\001\002" +
    "\000\006\003\240\020\241\001\002\000\024\015\051\016" +
    "\042\023\uffb7\026\043\027\uffb7\030\057\031\047\037\053" +
    "\044\004\001\002\000\006\003\155\020\156\001\002\000" +
    "\024\015\051\016\042\023\uffb7\026\043\027\uffb7\030\057" +
    "\031\047\037\053\044\004\001\002\000\014\003\141\004" +
    "\144\005\142\032\143\033\140\001\002\000\024\015\051" +
    "\016\042\023\uffb7\026\043\027\uffb7\030\057\031\047\037" +
    "\053\044\004\001\002\000\024\015\051\016\042\023\uffb7" +
    "\026\043\027\uffb7\030\057\031\047\037\053\044\004\001" +
    "\002\000\004\027\115\001\002\000\006\003\060\020\061" +
    "\001\002\000\004\045\110\001\002\000\006\003\062\045" +
    "\063\001\002\000\004\043\104\001\002\000\010\003\065" +
    "\021\066\043\064\001\002\000\006\003\073\037\074\001" +
    "\002\000\004\037\070\001\002\000\004\040\067\001\002" +
    "\000\024\015\uffcb\016\uffcb\023\uffcb\026\uffcb\027\uffcb\030" +
    "\uffcb\031\uffcb\037\uffcb\044\uffcb\001\002\000\004\021\071" +
    "\001\002\000\004\040\072\001\002\000\024\015\uffca\016" +
    "\uffca\023\uffca\026\uffca\027\uffca\030\uffca\031\uffca\037\uffca" +
    "\044\uffca\001\002\000\004\021\102\001\002\000\006\003" +
    "\075\021\076\001\002\000\004\040\101\001\002\000\006" +
    "\003\077\040\100\001\002\000\024\015\uffc7\016\uffc7\023" +
    "\uffc7\026\uffc7\027\uffc7\030\uffc7\031\uffc7\037\uffc7\044\uffc7" +
    "\001\002\000\024\015\uffcc\016\uffcc\023\uffcc\026\uffcc\027" +
    "\uffcc\030\uffcc\031\uffcc\037\uffcc\044\uffcc\001\002\000\024" +
    "\015\uffc8\016\uffc8\023\uffc8\026\uffc8\027\uffc8\030\uffc8\031" +
    "\uffc8\037\uffc8\044\uffc8\001\002\000\004\040\103\001\002" +
    "\000\024\015\uffc9\016\uffc9\023\uffc9\026\uffc9\027\uffc9\030" +
    "\uffc9\031\uffc9\037\uffc9\044\uffc9\001\002\000\004\037\105" +
    "\001\002\000\004\021\106\001\002\000\004\040\107\001" +
    "\002\000\024\015\uffc5\016\uffc5\023\uffc5\026\uffc5\027\uffc5" +
    "\030\uffc5\031\uffc5\037\uffc5\044\uffc5\001\002\000\004\043" +
    "\111\001\002\000\004\037\112\001\002\000\004\021\113" +
    "\001\002\000\004\040\114\001\002\000\024\015\uffc6\016" +
    "\uffc6\023\uffc6\026\uffc6\027\uffc6\030\uffc6\031\uffc6\037\uffc6" +
    "\044\uffc6\001\002\000\014\003\120\020\122\037\121\042" +
    "\123\046\116\001\002\000\024\003\uff9d\004\uff9d\005\uff9d" +
    "\007\uff9d\010\uff9d\021\uff9d\024\uff9d\025\uff9d\040\uff9d\001" +
    "\002\000\012\004\130\005\126\007\125\040\134\001\002" +
    "\000\024\003\uff9c\004\uff9c\005\uff9c\007\uff9c\010\uff9c\021" +
    "\uff9c\024\uff9c\025\uff9c\040\uff9c\001\002\000\024\003\uff9f" +
    "\004\uff9f\005\uff9f\007\uff9f\010\uff9f\021\uff9f\024\uff9f\025" +
    "\uff9f\040\uff9f\001\002\000\014\003\120\020\122\037\121" +
    "\042\123\046\116\001\002\000\024\003\uff9e\004\uff9e\005" +
    "\uff9e\007\uff9e\010\uff9e\021\uff9e\024\uff9e\025\uff9e\040\uff9e" +
    "\001\002\000\012\004\130\005\126\007\125\021\127\001" +
    "\002\000\014\003\120\020\122\037\121\042\123\046\116" +
    "\001\002\000\014\003\120\020\122\037\121\042\123\046" +
    "\116\001\002\000\024\003\uffa0\004\uffa0\005\uffa0\007\uffa0" +
    "\010\uffa0\021\uffa0\024\uffa0\025\uffa0\040\uffa0\001\002\000" +
    "\014\003\120\020\122\037\121\042\123\046\116\001\002" +
    "\000\024\003\uffa3\004\uffa3\005\126\007\125\010\uffa3\021" +
    "\uffa3\024\uffa3\025\uffa3\040\uffa3\001\002\000\024\003\uffa2" +
    "\004\uffa2\005\uffa2\007\uffa2\010\uffa2\021\uffa2\024\uffa2\025" +
    "\uffa2\040\uffa2\001\002\000\024\003\uffa1\004\uffa1\005\uffa1" +
    "\007\uffa1\010\uffa1\021\uffa1\024\uffa1\025\uffa1\040\uffa1\001" +
    "\002\000\004\023\135\001\002\000\016\002\ufffa\003\ufffa" +
    "\014\ufffa\035\ufffa\036\ufffa\044\ufffa\001\002\000\006\023" +
    "\uffbe\027\uffbe\001\002\000\006\023\uffbb\027\uffbb\001\002" +
    "\000\010\003\uffb5\021\uffb5\040\uffb5\001\002\000\004\040" +
    "\153\001\002\000\004\010\151\001\002\000\010\003\uffb6" +
    "\021\uffb6\040\uffb6\001\002\000\004\010\147\001\002\000" +
    "\004\040\146\001\002\000\024\015\uff97\016\uff97\023\uff97" +
    "\026\uff97\027\uff97\030\uff97\031\uff97\037\uff97\044\uff97\001" +
    "\002\000\014\003\120\020\122\037\121\042\123\046\116" +
    "\001\002\000\016\003\uffb4\004\130\005\126\007\125\021" +
    "\uffb4\040\uffb4\001\002\000\014\003\120\020\122\037\121" +
    "\042\123\046\116\001\002\000\016\003\uffb3\004\130\005" +
    "\126\007\125\021\uffb3\040\uffb3\001\002\000\024\015\uff96" +
    "\016\uff96\023\uff96\026\uff96\027\uff96\030\uff96\031\uff96\037" +
    "\uff96\044\uff96\001\002\000\006\023\uffb8\027\uffb8\001\002" +
    "\000\014\003\162\020\163\037\121\042\123\046\116\001" +
    "\002\000\014\003\162\020\163\037\121\042\123\046\116" +
    "\001\002\000\014\003\uffad\021\uffad\024\226\025\225\040" +
    "\uffad\001\002\000\006\003\177\021\200\001\002\000\012" +
    "\004\130\005\126\007\125\010\166\001\002\000\022\003" +
    "\uffac\004\uff9c\005\uff9c\007\uff9c\010\uff9c\021\uffac\024\175" +
    "\040\uffac\001\002\000\014\003\120\020\122\037\121\042" +
    "\123\046\116\001\002\000\004\021\170\001\002\000\014" +
    "\004\130\005\126\007\125\010\166\021\127\001\002\000" +
    "\014\003\120\020\122\037\121\042\123\046\116\001\002" +
    "\000\022\003\uffaa\004\130\005\126\007\125\021\uffaa\024" +
    "\uffaa\025\uffaa\040\uffaa\001\002\000\014\003\uffae\021\uffae" +
    "\024\172\025\171\040\uffae\001\002\000\014\003\162\020" +
    "\163\037\121\042\123\046\116\001\002\000\014\003\162" +
    "\020\163\037\121\042\123\046\116\001\002\000\010\003" +
    "\uffb0\021\uffb0\040\uffb0\001\002\000\010\003\uffaf\021\uffaf" +
    "\040\uffaf\001\002\000\014\003\162\020\163\037\121\042" +
    "\123\046\116\001\002\000\010\003\uffab\021\uffab\040\uffab" +
    "\001\002\000\004\022\221\001\002\000\006\003\201\022" +
    "\202\001\002\000\022\015\051\016\042\023\uffb7\026\043" +
    "\030\057\031\047\037\053\044\004\001\002\000\022\015" +
    "\051\016\042\023\uffb7\026\043\030\057\031\047\037\053" +
    "\044\004\001\002\000\004\023\204\001\002\000\026\015" +
    "\uffd6\016\uffd6\017\206\023\uffd6\026\uffd6\027\uffd6\030\uffd6" +
    "\031\uffd6\037\uffd6\044\uffd6\001\002\000\024\015\uffdd\016" +
    "\uffdd\023\uffdd\026\uffdd\027\uffdd\030\uffdd\031\uffdd\037\uffdd" +
    "\044\uffdd\001\002\000\010\003\207\015\051\022\211\001" +
    "\002\000\022\015\051\016\042\023\uffb7\026\043\030\057" +
    "\031\047\037\053\044\004\001\002\000\024\015\uffd8\016" +
    "\uffd8\023\uffd8\026\uffd8\027\uffd8\030\uffd8\031\uffd8\037\uffd8" +
    "\044\uffd8\001\002\000\022\015\051\016\042\023\uffb7\026" +
    "\043\030\057\031\047\037\053\044\004\001\002\000\004" +
    "\023\213\001\002\000\024\015\uffd9\016\uffd9\023\uffd9\026" +
    "\uffd9\027\uffd9\030\uffd9\031\uffd9\037\uffd9\044\uffd9\001\002" +
    "\000\004\023\215\001\002\000\024\015\uffd7\016\uffd7\023" +
    "\uffd7\026\uffd7\027\uffd7\030\uffd7\031\uffd7\037\uffd7\044\uffd7" +
    "\001\002\000\004\023\217\001\002\000\026\015\uffd6\016" +
    "\uffd6\017\206\023\uffd6\026\uffd6\027\uffd6\030\uffd6\031\uffd6" +
    "\037\uffd6\044\uffd6\001\002\000\024\015\uffdc\016\uffdc\023" +
    "\uffdc\026\uffdc\027\uffdc\030\uffdc\031\uffdc\037\uffdc\044\uffdc" +
    "\001\002\000\022\015\051\016\042\023\uffb7\026\043\030" +
    "\057\031\047\037\053\044\004\001\002\000\004\023\223" +
    "\001\002\000\026\015\uffd6\016\uffd6\017\206\023\uffd6\026" +
    "\uffd6\027\uffd6\030\uffd6\031\uffd6\037\uffd6\044\uffd6\001\002" +
    "\000\024\015\uffda\016\uffda\023\uffda\026\uffda\027\uffda\030" +
    "\uffda\031\uffda\037\uffda\044\uffda\001\002\000\014\003\162" +
    "\020\163\037\121\042\123\046\116\001\002\000\014\003" +
    "\162\020\163\037\121\042\123\046\116\001\002\000\010" +
    "\003\uffb2\021\uffb2\040\uffb2\001\002\000\010\003\uffb1\021" +
    "\uffb1\040\uffb1\001\002\000\004\021\232\001\002\000\004" +
    "\022\233\001\002\000\022\015\051\016\042\023\uffb7\026" +
    "\043\030\057\031\047\037\053\044\004\001\002\000\004" +
    "\023\235\001\002\000\026\015\uffd6\016\uffd6\017\206\023" +
    "\uffd6\026\uffd6\027\uffd6\030\uffd6\031\uffd6\037\uffd6\044\uffd6" +
    "\001\002\000\024\015\uffdb\016\uffdb\023\uffdb\026\uffdb\027" +
    "\uffdb\030\uffdb\031\uffdb\037\uffdb\044\uffdb\001\002\000\006" +
    "\023\uffba\027\uffba\001\002\000\004\045\267\001\002\000" +
    "\006\003\242\045\243\001\002\000\004\043\262\001\002" +
    "\000\004\043\244\001\002\000\006\003\245\044\246\001" +
    "\002\000\004\037\257\001\002\000\006\003\247\037\250" +
    "\001\002\000\004\021\255\001\002\000\006\003\251\021" +
    "\252\001\002\000\004\040\254\001\002\000\004\040\253" +
    "\001\002\000\024\015\uffc4\016\uffc4\023\uffc4\026\uffc4\027" +
    "\uffc4\030\uffc4\031\uffc4\037\uffc4\044\uffc4\001\002\000\024" +
    "\015\uffc1\016\uffc1\023\uffc1\026\uffc1\027\uffc1\030\uffc1\031" +
    "\uffc1\037\uffc1\044\uffc1\001\002\000\004\040\256\001\002" +
    "\000\024\015\uffc2\016\uffc2\023\uffc2\026\uffc2\027\uffc2\030" +
    "\uffc2\031\uffc2\037\uffc2\044\uffc2\001\002\000\004\021\260" +
    "\001\002\000\004\040\261\001\002\000\024\015\uffc3\016" +
    "\uffc3\023\uffc3\026\uffc3\027\uffc3\030\uffc3\031\uffc3\037\uffc3" +
    "\044\uffc3\001\002\000\004\044\263\001\002\000\004\037" +
    "\264\001\002\000\004\021\265\001\002\000\004\040\266" +
    "\001\002\000\024\015\uffbf\016\uffbf\023\uffbf\026\uffbf\027" +
    "\uffbf\030\uffbf\031\uffbf\037\uffbf\044\uffbf\001\002\000\004" +
    "\043\270\001\002\000\004\044\271\001\002\000\004\037" +
    "\272\001\002\000\004\021\273\001\002\000\004\040\274" +
    "\001\002\000\024\015\uffc0\016\uffc0\023\uffc0\026\uffc0\027" +
    "\uffc0\030\uffc0\031\uffc0\037\uffc0\044\uffc0\001\002\000\006" +
    "\023\uffbd\027\uffbd\001\002\000\006\023\uffb9\027\uffb9\001" +
    "\002\000\006\023\uffbc\027\uffbc\001\002\000\012\014\005" +
    "\035\021\036\015\037\304\001\002\000\014\003\303\014" +
    "\005\035\021\036\015\037\304\001\002\000\014\003\120" +
    "\020\122\037\121\042\123\046\116\001\002\000\014\003" +
    "\120\020\122\037\121\042\123\046\116\001\002\000\004" +
    "\010\312\001\002\000\006\003\306\037\307\001\002\000" +
    "\004\010\311\001\002\000\004\010\310\001\002\000\014" +
    "\003\ufff6\020\ufff6\037\ufff6\042\ufff6\046\ufff6\001\002\000" +
    "\014\003\ufff4\020\ufff4\037\ufff4\042\ufff4\046\ufff4\001\002" +
    "\000\014\003\ufff5\020\ufff5\037\ufff5\042\ufff5\046\ufff5\001" +
    "\002\000\012\004\130\005\126\007\125\040\314\001\002" +
    "\000\014\003\162\020\163\037\121\042\123\046\116\001" +
    "\002\000\004\040\316\001\002\000\004\037\317\001\002" +
    "\000\012\004\144\005\142\032\143\033\140\001\002\000" +
    "\004\021\321\001\002\000\004\022\322\001\002\000\022" +
    "\015\051\016\042\023\uffb7\026\043\030\057\031\047\037" +
    "\053\044\004\001\002\000\004\023\324\001\002\000\024" +
    "\015\uffd2\016\uffd2\023\uffd2\026\uffd2\027\uffd2\030\uffd2\031" +
    "\uffd2\037\uffd2\044\uffd2\001\002\000\012\004\130\005\126" +
    "\007\125\040\326\001\002\000\014\003\162\020\163\037" +
    "\121\042\123\046\116\001\002\000\004\040\330\001\002" +
    "\000\004\037\331\001\002\000\014\003\332\004\144\005" +
    "\142\032\143\033\140\001\002\000\004\021\344\001\002" +
    "\000\006\003\334\021\335\001\002\000\004\022\341\001" +
    "\002\000\004\022\336\001\002\000\022\015\051\016\042" +
    "\023\uffb7\026\043\030\057\031\047\037\053\044\004\001" +
    "\002\000\004\023\340\001\002\000\024\015\uffd5\016\uffd5" +
    "\023\uffd5\026\uffd5\027\uffd5\030\uffd5\031\uffd5\037\uffd5\044" +
    "\uffd5\001\002\000\022\015\051\016\042\023\uffb7\026\043" +
    "\030\057\031\047\037\053\044\004\001\002\000\004\023" +
    "\343\001\002\000\024\015\uffd3\016\uffd3\023\uffd3\026\uffd3" +
    "\027\uffd3\030\uffd3\031\uffd3\037\uffd3\044\uffd3\001\002\000" +
    "\004\022\345\001\002\000\022\015\051\016\042\023\uffb7" +
    "\026\043\030\057\031\047\037\053\044\004\001\002\000" +
    "\004\023\347\001\002\000\024\015\uffd1\016\uffd1\023\uffd1" +
    "\026\uffd1\027\uffd1\030\uffd1\031\uffd1\037\uffd1\044\uffd1\001" +
    "\002\000\014\003\120\020\122\037\121\042\123\046\116" +
    "\001\002\000\012\004\130\005\126\007\125\040\352\001" +
    "\002\000\014\003\162\020\163\037\121\042\123\046\116" +
    "\001\002\000\004\040\354\001\002\000\004\037\355\001" +
    "\002\000\012\004\144\005\142\032\143\033\140\001\002" +
    "\000\004\021\357\001\002\000\004\022\360\001\002\000" +
    "\022\015\051\016\042\023\uffb7\026\043\030\057\031\047" +
    "\037\053\044\004\001\002\000\004\023\362\001\002\000" +
    "\024\015\uffd4\016\uffd4\023\uffd4\026\uffd4\027\uffd4\030\uffd4" +
    "\031\uffd4\037\uffd4\044\uffd4\001\002\000\014\003\162\020" +
    "\163\037\121\042\123\046\116\001\002\000\014\003\162" +
    "\020\163\037\121\042\123\046\116\001\002\000\006\003" +
    "\366\021\367\001\002\000\004\022\376\001\002\000\006" +
    "\003\370\022\371\001\002\000\022\015\051\016\042\023" +
    "\uffb7\026\043\030\057\031\047\037\053\044\004\001\002" +
    "\000\022\015\051\016\042\023\uffb7\026\043\030\057\031" +
    "\047\037\053\044\004\001\002\000\004\023\373\001\002" +
    "\000\024\015\uffd0\016\uffd0\023\uffd0\026\uffd0\027\uffd0\030" +
    "\uffd0\031\uffd0\037\uffd0\044\uffd0\001\002\000\004\023\375" +
    "\001\002\000\024\015\uffcf\016\uffcf\023\uffcf\026\uffcf\027" +
    "\uffcf\030\uffcf\031\uffcf\037\uffcf\044\uffcf\001\002\000\022" +
    "\015\051\016\042\023\uffb7\026\043\030\057\031\047\037" +
    "\053\044\004\001\002\000\004\023\u0100\001\002\000\024" +
    "\015\uffce\016\uffce\023\uffce\026\uffce\027\uffce\030\uffce\031" +
    "\uffce\037\uffce\044\uffce\001\002\000\004\021\u0102\001\002" +
    "\000\004\022\u0103\001\002\000\022\015\051\016\042\023" +
    "\uffb7\026\043\030\057\031\047\037\053\044\004\001\002" +
    "\000\004\023\u0105\001\002\000\024\015\uffcd\016\uffcd\023" +
    "\uffcd\026\uffcd\027\uffcd\030\uffcd\031\uffcd\037\uffcd\044\uffcd" +
    "\001\002\000\004\002\ufffd\001\002\000\004\002\uffff\001" +
    "\002\000\004\002\001\001\002\000\036\002\uffe4\003\uffe4" +
    "\014\uffe4\015\uffe4\016\uffe4\023\uffe4\026\uffe4\027\uffe4\030" +
    "\uffe4\031\uffe4\035\uffe4\036\uffe4\037\uffe4\044\uffe4\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0107\000\024\010\013\013\016\014\007\021\010\025" +
    "\006\030\005\031\012\032\011\033\017\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\010\013\013\016\014\007\021\010\030\u0106" +
    "\031\012\032\011\033\017\001\001\000\022\010\013\013" +
    "\016\014\007\021\010\030\u0105\031\012\032\011\033\017" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\010\013" +
    "\013\016\014\007\021\010\030\022\031\012\032\011\033" +
    "\017\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\010\031\015\030\031\027" +
    "\033\017\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\010\031\015\033\031\027\033\017" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\010" +
    "\031\015\036\031\027\033\017\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\002\043\003\054\004\045\011" +
    "\051\012\047\021\053\026\055\027\044\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\002\043\003\054\004" +
    "\045\011\051\012\047\021\053\026\276\027\044\001\001" +
    "\000\022\002\043\003\054\004\045\011\051\012\047\021" +
    "\053\026\275\027\044\001\001\000\022\002\043\003\054" +
    "\004\045\011\051\012\047\021\053\026\274\027\044\001" +
    "\001\000\002\001\001\000\022\002\043\003\054\004\045" +
    "\011\051\012\047\021\053\026\236\027\044\001\001\000" +
    "\002\001\001\000\022\002\043\003\054\004\045\011\051" +
    "\012\047\021\053\026\153\027\044\001\001\000\004\022" +
    "\144\001\001\000\022\002\043\003\054\004\045\011\051" +
    "\012\047\021\053\026\136\027\044\001\001\000\022\002" +
    "\043\003\054\004\045\011\051\012\047\021\053\026\135" +
    "\027\044\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\020\116\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\020\123\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\020\132\001" +
    "\001\000\004\020\131\001\001\000\002\001\001\000\004" +
    "\020\130\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\020\147\001" +
    "\001\000\002\001\001\000\004\020\151\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\005" +
    "\230\007\156\020\160\001\001\000\010\005\157\007\156" +
    "\020\160\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\007\163\020\164" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\020" +
    "\166\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\005\173\007\156\020\160\001\001\000\010\005\172\007" +
    "\156\020\160\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\005\175\007\156\020\160\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\002\043" +
    "\003\054\004\045\011\051\012\047\021\053\026\215\027" +
    "\044\001\001\000\022\002\043\003\054\004\045\011\051" +
    "\012\047\021\053\026\202\027\044\001\001\000\002\001" +
    "\001\000\004\006\204\001\001\000\002\001\001\000\004" +
    "\003\207\001\001\000\022\002\043\003\054\004\045\011" +
    "\051\012\047\021\053\026\213\027\044\001\001\000\002" +
    "\001\001\000\022\002\043\003\054\004\045\011\051\012" +
    "\047\021\053\026\211\027\044\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\006\217\001\001\000\002\001\001" +
    "\000\022\002\043\003\054\004\045\011\051\012\047\021" +
    "\053\026\221\027\044\001\001\000\002\001\001\000\004" +
    "\006\223\001\001\000\002\001\001\000\010\005\227\007" +
    "\156\020\160\001\001\000\010\005\226\007\156\020\160" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\002\043\003\054\004\045" +
    "\011\051\012\047\021\053\026\233\027\044\001\001\000" +
    "\002\001\001\000\004\006\235\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\010\304\023\347\033\017\001\001\000" +
    "\010\010\304\023\301\033\017\001\001\000\004\020\324" +
    "\001\001\000\004\020\312\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\005\314\007\156\020\160\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\022\317\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\002\043\003\054" +
    "\004\045\011\051\012\047\021\053\026\322\027\044\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\005\326\007\156\020\160\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\022\332\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\002\043\003\054\004\045\011\051\012\047" +
    "\021\053\026\336\027\044\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\002\043\003\054\004\045\011\051" +
    "\012\047\021\053\026\341\027\044\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\002\043" +
    "\003\054\004\045\011\051\012\047\021\053\026\345\027" +
    "\044\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\020\350\001\001\000\002\001\001\000\010\005\352\007" +
    "\156\020\160\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\022\355\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\002\043\003\054\004\045\011\051\012\047" +
    "\021\053\026\360\027\044\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\005\u0100\007\156\020\160\001\001" +
    "\000\010\005\364\007\156\020\160\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\002\043" +
    "\003\054\004\045\011\051\012\047\021\053\026\373\027" +
    "\044\001\001\000\022\002\043\003\054\004\045\011\051" +
    "\012\047\021\053\026\371\027\044\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\002\043\003\054\004\045\011\051\012\047\021" +
    "\053\026\376\027\044\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\002" +
    "\043\003\054\004\045\011\051\012\047\021\053\026\u0103" +
    "\027\044\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    ArrayList gramas = new ArrayList();
    public Nodo raiz;
    public int cont = 0;
    public int maximo(){
    int a=5;
    return a;
}
    ArrayList errores=new ArrayList();
    public Symbol s;
    @Override
    public void syntax_error (Symbol s){
        if(s.left==-1){
        }else{
                errores.add("Syntax error en la línea: " + (s.left) + " , columna: " +(s.right)+ " con el símbolo = "+(s.value));
    }
}
    @Override
    public void unrecovered_syntax_error(Symbol s){
    if(s.left==-1){
    }else{
        errores.add("Error desconocido, por favor revise la linea: " + (s.left ) + " y columna:  " + (s.right )+ "Con simbolo: "+s.value);
    }    
    }
    public Symbol getS(){
        return this.s;
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // CONTADOR ::= tkn_id error tkn_puntocoma 
            {
              Nodo RESULT =null;
		parser.errores.add("Iterador en identificador incorrecta");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTADOR",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // CONTADOR ::= tkn_id ITERADOR tkn_puntocoma 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTADOR",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // ARGSPARAMS ::= tkn_id 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARGSPARAMS",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // ARGSPARAMS ::= tkn_id tkn_coma ARGSPARAMS 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARGSPARAMS",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // ARGS ::= 
            {
              Nodo RESULT =null;
		
            Nodo node = new Nodo("VACIO",parser.cont);
            parser.cont++;
            RESULT = node;
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARGS",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // ARGS ::= ARGSPARAMS 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARGS",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // EXPR ::= error 
            {
              Nodo RESULT =null;
		parser.errores.add("Expresión incorrecta");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPR",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // EXPR ::= tkn_caracter 
            {
              Nodo RESULT =null;
		int carleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int carright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object car = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Nodo nodo = new Nodo(car.toString(),parser.cont);
                parser.cont++;
                RESULT=nodo;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPR",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // EXPR ::= tkn_num 
            {
              Nodo RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object num = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Nodo nodo = new Nodo(num.toString(),parser.cont);
                parser.cont++;
                RESULT=nodo;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPR",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // EXPR ::= tkn_id 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Nodo nodo = new Nodo(id.toString(),parser.cont);
                parser.cont++;
                RESULT=nodo;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPR",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // EXPR ::= tkn_parentesisiz EXPR tkn_parentesisde 
            {
              Nodo RESULT =null;
		
                Nodo nodo = new Nodo("EXPR",parser.cont);
                parser.cont++;
                RESULT=nodo;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPR",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // EXPR ::= EXPR tkn_opmod EXPR 
            {
              Nodo RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo o = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Nodo nodo= new Nodo("expr",parser.cont);
                parser.cont++;
                nodo.addHijo(s);
                nodo.addHijo(new Nodo(id.toString(),parser.cont));
                parser.cont++;                
                nodo.addHijo(o);
                RESULT=nodo;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPR",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // EXPR ::= EXPR tkn_opmulti EXPR 
            {
              Nodo RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo o = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Nodo nodo= new Nodo("expr",parser.cont);
                parser.cont++;
                nodo.addHijo(s);
                nodo.addHijo(new Nodo(id.toString(),parser.cont));
                parser.cont++;                
                nodo.addHijo(o);
                RESULT=nodo;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPR",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // EXPR ::= EXPR tkn_opadicion EXPR 
            {
              Nodo RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo o = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Nodo nodo= new Nodo("expr",parser.cont);
                parser.cont++;
                nodo.addHijo(s);
                nodo.addHijo(new Nodo(id.toString(),parser.cont));
                parser.cont++;                
                nodo.addHijo(o);
                RESULT=nodo;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPR",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // TIPOAPUNT ::= tkn_char tkn_opmulti 
            {
              Nodo RESULT =null;
		
            Nodo nodo = new Nodo("char*",parser.cont);
                parser.cont++;
                RESULT=nodo;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOAPUNT",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // TIPOAPUNT ::= tkn_int tkn_opmulti 
            {
              Nodo RESULT =null;
		
            Nodo nodo = new Nodo("int*",parser.cont);
                parser.cont++;
                RESULT=nodo;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOAPUNT",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // TIPO ::= tkn_void 
            {
              Nodo RESULT =null;
		
            Nodo nodo = new Nodo("void",parser.cont);
                parser.cont++;
                RESULT=nodo;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // TIPO ::= tkn_int 
            {
              Nodo RESULT =null;
		
            Nodo nodo = new Nodo("int",parser.cont);
                parser.cont++;
                RESULT=nodo;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // TIPO ::= TIPOAPUNT 
            {
              Nodo RESULT =null;
		int apleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int apright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo ap = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            Nodo nodo = new Nodo("apun",parser.cont);
                parser.cont++;
                nodo.addHijo(ap);
                RESULT=nodo;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // TIPO ::= tkn_char 
            {
              Nodo RESULT =null;
		
            Nodo nodo = new Nodo("char",parser.cont);
                parser.cont++;
                RESULT=nodo;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // CONDICIONP ::= EXPR tkn_oprel EXPR 
            {
              Nodo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo f = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Nodo nodo= new Nodo("CONDICIONP",parser.cont);
                parser.cont++;
                nodo.addHijo(e);
                nodo.addHijo(new Nodo(id.toString(),parser.cont));
                parser.cont++;                
                nodo.addHijo(f);
                RESULT=nodo;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICIONP",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // CONDICION ::= error tkn_and CONDICION 
            {
              Nodo RESULT =null;
		parser.errores.add("Expresion erronea o ausente en condicion");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // CONDICION ::= error 
            {
              Nodo RESULT =null;
		parser.errores.add("Operador relacional ausente en condicion");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // CONDICION ::= CONDICIONP 
            {
              Nodo RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Nodo nodo= new Nodo("CONDICION",parser.cont);
                parser.cont++;
                nodo.addHijo(c);
                RESULT=nodo;              
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // CONDICION ::= tkn_parentesisiz CONDICIONP tkn_parentesisde 
            {
              Nodo RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                Nodo nodo= new Nodo("CONDICION",parser.cont);
                parser.cont++;
                nodo.addHijo(c);
                RESULT=nodo;              
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // CONDICION ::= tkn_parentesisiz CONDICIONP tkn_parentesisde tkn_or CONDICION 
            {
              Nodo RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo c1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Nodo nodo= new Nodo("CONDICION",parser.cont);
                parser.cont++;
                nodo.addHijo(c);
                nodo.addHijo(new Nodo(id.toString(),parser.cont));
                parser.cont++; 
                nodo.addHijo(c1);
                RESULT=nodo;              
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // CONDICION ::= tkn_parentesisiz CONDICIONP tkn_parentesisde tkn_and CONDICION 
            {
              Nodo RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo c1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Nodo nodo= new Nodo("CONDICION",parser.cont);
                parser.cont++;
                nodo.addHijo(c);
                nodo.addHijo(new Nodo(id.toString(),parser.cont));
                parser.cont++; 
                nodo.addHijo(c1);
                RESULT=nodo;              
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // CONDICION ::= CONDICIONP tkn_or CONDICION 
            {
              Nodo RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo o = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Nodo nodo= new Nodo("CONDICION",parser.cont);
                parser.cont++;
                nodo.addHijo(s);
                nodo.addHijo(new Nodo(id.toString(),parser.cont));
                parser.cont++; 
                nodo.addHijo(o);
                RESULT=nodo;              
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // CONDICION ::= CONDICIONP tkn_and CONDICION 
            {
              Nodo RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo o = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Nodo nodo= new Nodo("CONDICION",parser.cont);
                parser.cont++;
                nodo.addHijo(s);
                nodo.addHijo(new Nodo(id.toString(),parser.cont));
                parser.cont++;                
                nodo.addHijo(o);
                RESULT=nodo;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // ITERADOR ::= tkn_opmulti tkn_oprel EXPR 
            {
              Nodo RESULT =null;
		 
            Nodo nodo = new Nodo("ITERADOR",parser.cont);
            parser.cont++;
            RESULT=nodo;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ITERADOR",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // ITERADOR ::= tkn_opadicion tkn_oprel EXPR 
            {
              Nodo RESULT =null;
		 
            Nodo nodo = new Nodo("ITERADOR",parser.cont);
            parser.cont++;
            RESULT=nodo;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ITERADOR",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // ITERADOR ::= tkn_decrement 
            {
              Nodo RESULT =null;
		 
            Nodo nodo = new Nodo("ITERADOR",parser.cont);
            parser.cont++;
            RESULT=nodo;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ITERADOR",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // ITERADOR ::= tkn_increment 
            {
              Nodo RESULT =null;
		 
            Nodo nodo = new Nodo("ITERADOR",parser.cont);
            parser.cont++;
            RESULT=nodo;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ITERADOR",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // BLOQUE ::= 
            {
              Nodo RESULT =null;
		
                Nodo node = new Nodo("VACIO",parser.cont);
                parser.cont++;
                node.addHijo(new Nodo("VACIO",parser.cont++));
                parser.cont++;
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // BLOQUE ::= CONTADOR BLOQUE 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo i = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Nodo nodo = new Nodo("BLOQUE",parser.cont);
                parser.cont++;
                nodo.addHijo(i);
                nodo.addHijo(s);
                RESULT=nodo;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // BLOQUE ::= PRINTF BLOQUE 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo i = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Nodo nodo = new Nodo("BLOQUE",parser.cont);
                parser.cont++;
                nodo.addHijo(i);
                nodo.addHijo(s);
                RESULT=nodo;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // BLOQUE ::= SCANF BLOQUE 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo i = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Nodo nodo = new Nodo("BLOQUE",parser.cont);
                parser.cont++;
                nodo.addHijo(i);
                nodo.addHijo(s);
                RESULT=nodo;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // BLOQUE ::= ASIGN BLOQUE 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo i = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Nodo nodo = new Nodo("BLOQUE",parser.cont);
                parser.cont++;
                nodo.addHijo(i);
                nodo.addHijo(s);
                RESULT=nodo;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // BLOQUE ::= WHILE BLOQUE 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo i = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Nodo nodo = new Nodo("BLOQUE",parser.cont);
                parser.cont++;
                nodo.addHijo(i);
                nodo.addHijo(s);
                RESULT=nodo;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // BLOQUE ::= FOR BLOQUE 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo i = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Nodo nodo = new Nodo("BLOQUE",parser.cont);
                parser.cont++;
                nodo.addHijo(i);
                nodo.addHijo(s);
                RESULT=nodo;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // BLOQUE ::= IF BLOQUE 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo i = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Nodo nodo = new Nodo("BLOQUE",parser.cont);
                parser.cont++;
                nodo.addHijo(i);
                nodo.addHijo(s);
                RESULT=nodo;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // SCANF ::= tkn_scanf tkn_parentesisiz error tkn_coma tkn_ampersand tkn_id tkn_parentesisde tkn_puntocoma 
            {
              Nodo RESULT =null;
		parser.errores.add("conststr ausente en la funcion scanf");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SCANF",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // SCANF ::= tkn_scanf error tkn_cadena tkn_coma tkn_ampersand tkn_id tkn_parentesisde tkn_puntocoma 
            {
              Nodo RESULT =null;
		parser.errores.add("parentesis de apertura '(' ausente en la funcion scanf");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SCANF",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // SCANF ::= tkn_scanf tkn_parentesisiz tkn_cadena tkn_coma tkn_ampersand tkn_id error tkn_puntocoma 
            {
              Nodo RESULT =null;
		parser.errores.add("parentesis de cierre ')' ausente en la funcion scanf");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SCANF",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // SCANF ::= tkn_scanf tkn_parentesisiz tkn_cadena tkn_coma tkn_ampersand error tkn_parentesisde tkn_puntocoma 
            {
              Nodo RESULT =null;
		parser.errores.add("identificador ausente en la funcion scanf");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SCANF",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // SCANF ::= tkn_scanf tkn_parentesisiz tkn_cadena tkn_coma error tkn_id tkn_parentesisde tkn_puntocoma 
            {
              Nodo RESULT =null;
		parser.errores.add("Puntero a identificador '&' ausente en la funcion scanf");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SCANF",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // SCANF ::= tkn_scanf tkn_parentesisiz tkn_cadena tkn_coma tkn_ampersand tkn_id tkn_parentesisde tkn_puntocoma 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		  parser.gramas.add("Funcion SCANF reconocida");
            Nodo nodo = new Nodo("SCANF",parser.cont);
            parser.cont++;
            nodo.addHijo(new Nodo(id.toString(),parser.cont));
            parser.cont++;
            RESULT=nodo;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SCANF",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // PRINTF ::= tkn_printf tkn_parentesisiz error tkn_coma tkn_id tkn_parentesisde tkn_puntocoma 
            {
              Nodo RESULT =null;
		parser.errores.add("conststr ausente en la funcion printf");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRINTF",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // PRINTF ::= tkn_printf error tkn_cadena tkn_coma tkn_id tkn_parentesisde tkn_puntocoma 
            {
              Nodo RESULT =null;
		parser.errores.add("se esperaba el simbolo '(' en la funcion printf");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRINTF",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // PRINTF ::= tkn_printf tkn_parentesisiz tkn_cadena tkn_coma tkn_id tkn_parentesisde error 
            {
              Nodo RESULT =null;
		parser.errores.add("se esperaba el simbolo ';' en la funcion printf");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRINTF",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // PRINTF ::= tkn_printf tkn_parentesisiz tkn_cadena tkn_coma tkn_id error tkn_puntocoma 
            {
              Nodo RESULT =null;
		parser.errores.add("parentesis de cierre ')' ausente en la funcion printf");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRINTF",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // PRINTF ::= tkn_printf tkn_parentesisiz tkn_cadena tkn_coma error tkn_parentesisde tkn_puntocoma 
            {
              Nodo RESULT =null;
		parser.errores.add("identificador ausente en la funcion printf");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRINTF",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // PRINTF ::= tkn_printf tkn_parentesisiz tkn_cadena error tkn_id tkn_parentesisde tkn_puntocoma 
            {
              Nodo RESULT =null;
		parser.errores.add("coma ',' ausente en la funcion printf");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRINTF",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // PRINTF ::= tkn_printf tkn_parentesisiz tkn_cadena tkn_parentesisde tkn_puntocoma 
            {
              Nodo RESULT =null;
		parser.gramas.add("Funcion PRINTF reconocida");
                Nodo nodo = new Nodo("PRINT F",parser.cont);
                parser.cont++;
                RESULT=nodo;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRINTF",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // PRINTF ::= tkn_printf tkn_parentesisiz tkn_cadena tkn_coma tkn_id tkn_parentesisde tkn_puntocoma 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		parser.gramas.add("Funcion PRINTF reconocida");
                Nodo nodo = new Nodo("PRINT F",parser.cont);
                parser.cont++;
                nodo.addHijo(new Nodo(id.toString(),parser.cont));
                parser.cont++;
                RESULT=nodo;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRINTF",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // WHILE ::= tkn_while error CONDICION tkn_parentesisde tkn_llaveiz BLOQUE tkn_llaveder 
            {
              Nodo RESULT =null;
		parser.errores.add("Se esperaba un '(' en bloque while\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("WHILE",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // WHILE ::= tkn_while tkn_parentesisiz CONDICION error tkn_llaveiz BLOQUE tkn_llaveder 
            {
              Nodo RESULT =null;
		parser.errores.add("Se esperaba un ')' en bloque while\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("WHILE",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // WHILE ::= tkn_while tkn_parentesisiz CONDICION tkn_parentesisde error BLOQUE tkn_llaveder 
            {
              Nodo RESULT =null;
		parser.errores.add("Se esperaba un '{' en bloque while\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("WHILE",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // WHILE ::= tkn_while tkn_parentesisiz CONDICION tkn_parentesisde tkn_llaveiz BLOQUE tkn_llaveder 
            {
              Nodo RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int jleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int jright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo j = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		parser.gramas.add("Funcion WHILE reconocida");
            Nodo nodo = new Nodo("WHILE",parser.cont);
            parser.cont++;
            nodo.addHijo(c);
            nodo.addHijo(j);
            RESULT=nodo;
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("WHILE",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // FOR ::= tkn_for tkn_parentesisiz ASIGNACION EXPR tkn_puntocoma CONDICION tkn_puntocoma tkn_id error tkn_parentesisde tkn_llaveiz BLOQUE tkn_llaveder 
            {
              Nodo RESULT =null;
		parser.errores.add("Iteracion asuente en ciclo for\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FOR",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // FOR ::= tkn_for tkn_parentesisiz error EXPR tkn_puntocoma CONDICION tkn_puntocoma tkn_id ITERADOR tkn_parentesisde tkn_llaveiz BLOQUE tkn_llaveder 
            {
              Nodo RESULT =null;
		parser.errores.add("Asignacion o declaracion incorrecta en bloque for\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FOR",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // FOR ::= tkn_for tkn_parentesisiz ASIGNACION EXPR tkn_puntocoma CONDICION tkn_puntocoma tkn_id ITERADOR error tkn_llaveiz BLOQUE tkn_llaveder 
            {
              Nodo RESULT =null;
		parser.errores.add("Se esperaba un parentesis de cierre ')' for\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FOR",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // FOR ::= tkn_for error ASIGNACION EXPR tkn_puntocoma CONDICION tkn_puntocoma tkn_id ITERADOR tkn_parentesisde tkn_llaveiz BLOQUE tkn_llaveder 
            {
              Nodo RESULT =null;
		parser.errores.add("Se esperaba un parentesis de apertura '(' for\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FOR",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // FOR ::= tkn_for tkn_parentesisiz ASIGNACION EXPR tkn_puntocoma CONDICION tkn_puntocoma tkn_id ITERADOR tkn_parentesisde tkn_llaveiz BLOQUE tkn_llaveder 
            {
              Nodo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int jleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int jright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo j = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		parser.gramas.add("Funcion FOR reconocida");
                Nodo nodo = new Nodo("FOR",parser.cont);
                parser.cont++;
                nodo.addHijo(e);
                nodo.addHijo(j);
                RESULT=nodo;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FOR",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // ELSE ::= 
            {
              Nodo RESULT =null;
		
            Nodo node = new Nodo("VACIO",parser.cont);
            parser.cont++;
            RESULT = node;
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ELSE",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // ELSE ::= tkn_else error BLOQUE tkn_llaveder 
            {
              Nodo RESULT =null;
		parser.errores.add("Se esperaba el simbolo '{' en else\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ELSE",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // ELSE ::= tkn_else IF 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo i = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		parser.gramas.add("Else if reconocido");
            Nodo nodo = new Nodo("ELSE IF",parser.cont);
            parser.cont++;
            nodo.addHijo(i);
            RESULT=nodo;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ELSE",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // ELSE ::= tkn_else tkn_llaveiz BLOQUE tkn_llaveder 
            {
              Nodo RESULT =null;
		int jleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int jright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo j = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		parser.gramas.add("Else reconocido");
            Nodo nodo = new Nodo("ELSE",parser.cont);
            parser.cont++;
            nodo.addHijo(j);
            RESULT=nodo;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ELSE",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // IF ::= tkn_if tkn_parentesisiz CONDICION error tkn_llaveiz BLOQUE tkn_llaveder ELSE 
            {
              Nodo RESULT =null;
		parser.errores.add("Se esperaba el simbolo ')' en bloque if\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IF",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // IF ::= tkn_if error CONDICION tkn_parentesisde tkn_llaveiz BLOQUE tkn_llaveder ELSE 
            {
              Nodo RESULT =null;
		parser.errores.add("Se esperaba el simbolo '(' en bloque if\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IF",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // IF ::= tkn_if tkn_parentesisiz CONDICION tkn_parentesisde error BLOQUE tkn_llaveder ELSE 
            {
              Nodo RESULT =null;
		parser.errores.add("Llave de apertura '{' ausente en bloque if\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IF",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // IF ::= tkn_if tkn_parentesisiz CONDICION tkn_parentesisde tkn_llaveiz BLOQUE tkn_llaveder ELSE 
            {
              Nodo RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int jleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int jright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo j = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		parser.gramas.add("Funcion if reconocida");
            Nodo nodo = new Nodo("IF",parser.cont);
            parser.cont++;
            nodo.addHijo(c);
            nodo.addHijo(j);
            nodo.addHijo(e);
            RESULT=nodo;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IF",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // TERNARIO ::= tkn_parentesisiz CONDICION tkn_parentesisde tkn_ternario tkn_cadena tkn_dospuntos tkn_cadena 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TERNARIO",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // PARAMS ::= 
            {
              Nodo RESULT =null;
		
            Nodo node = new Nodo("VACIO",parser.cont);
            parser.cont++;
            RESULT = node;
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMS",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // PARAMS ::= TIPO 
            {
              Nodo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo t = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		parser.gramas.add("Params reconocido");
            Nodo nodo = new Nodo("PARAMS",parser.cont);
            parser.cont++;
            nodo.addHijo(t);                
            RESULT=nodo;
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMS",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // PARAMS ::= DECLR 
            {
              Nodo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo t = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		parser.gramas.add("Params reconocido");
            Nodo nodo = new Nodo("PARAMS",parser.cont);
            parser.cont++;
            nodo.addHijo(t);                
            RESULT=nodo;
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMS",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // PARAMS ::= DECLR tkn_coma PARAMS 
            {
              Nodo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo t = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo p = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		parser.gramas.add("Params reconocido");
            Nodo nodo = new Nodo("PARAMS",parser.cont);
            parser.cont++;
            nodo.addHijo(t);               
            nodo.addHijo(p);
            RESULT=nodo;
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMS",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // PARAMS ::= TIPO tkn_coma PARAMS 
            {
              Nodo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo t = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo p = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		parser.gramas.add("Params reconocido");
            Nodo nodo = new Nodo("PARAMS",parser.cont);
            parser.cont++;
            nodo.addHijo(t)     ;           
            nodo.addHijo(p);
            RESULT=nodo;
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMS",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ASIGN ::= tkn_ampersand tkn_puntocoma 
            {
              Nodo RESULT =null;
		
                Nodo nodo = new Nodo("ASIGNACIONES",parser.cont);
                parser.cont++;
                RESULT=nodo;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGN",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // DECLASIGN ::= tkn_id tkn_parentesisiz ARGS error 
            {
              Nodo RESULT =null;
		parser.errores.add("Se esperaba un ')' en llamado de la funcion \n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLASIGN",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // DECLASIGN ::= tkn_id tkn_parentesisiz ARGS tkn_parentesisde 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLASIGN",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // DECLASIGN ::= tkn_id tkn_oprel tkn_id tkn_parentesisiz error tkn_parentesisde 
            {
              Nodo RESULT =null;
		parser.errores.add("Argumentos en llamado de función erroneos \n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLASIGN",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // DECLASIGN ::= DECLR tkn_oprel tkn_id tkn_parentesisiz error tkn_parentesisde 
            {
              Nodo RESULT =null;
		parser.errores.add("Argumentos en llamado de función erroneos \n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLASIGN",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // DECLASIGN ::= tkn_id tkn_oprel tkn_id tkn_parentesisiz ARGS tkn_parentesisde 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLASIGN",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // DECLASIGN ::= DECLR tkn_oprel tkn_id tkn_parentesisiz ARGS tkn_parentesisde 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLASIGN",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // DECLASIGN ::= DECLR 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLASIGN",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // DECLASIGN ::= tkn_id error EXPR 
            {
              Nodo RESULT =null;
		parser.errores.add("Se esperaba operador relacional en declaración \n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLASIGN",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // DECLASIGN ::= tkn_id tkn_oprel EXPR 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLASIGN",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // DECLASIGN ::= tkn_id tkn_oprel EXPR tkn_coma DECLASIGN 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLASIGN",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // DECLASIGN ::= tkn_id error DECLASIGN 
            {
              Nodo RESULT =null;
		parser.errores.add("Se esperaba el simbolo ',' en declaración o en argumentos en llamado de la función \n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLASIGN",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // DECLASIGN ::= tkn_id tkn_coma DECLASIGN 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLASIGN",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // DECLASIGN ::= DECLR tkn_coma DECLASIGN 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLASIGN",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // DECLASIGN ::= DECLR tkn_oprel EXPR 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLASIGN",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // DECLASIGN ::= DECLR tkn_oprel EXPR tkn_coma DECLASIGN 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLASIGN",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // ASIGNACION ::= TIPO error tkn_oprel 
            {
              Nodo RESULT =null;
		parser.errores.add("Se esperaba un identificador en bloque for\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // ASIGNACION ::= tkn_id tkn_oprel 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // ASIGNACION ::= TIPO tkn_id tkn_oprel 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // DECLR ::= error tkn_id 
            {
              Nodo RESULT =null;
		parser.errores.add("Tipo de dato incorrecto\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLR",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // DECLR ::= TIPO tkn_id 
            {
              Nodo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo t = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int kleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int kright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object k = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            Nodo nodo = new Nodo("DECL",parser.cont);
                parser.cont++;
                nodo.addHijo(t);
                nodo.addHijo(new Nodo(k.toString(),parser.cont));
                parser.cont++;
                RESULT=nodo;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLR",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // PROTOFUN ::= DECLR tkn_parentesisiz PARAMS tkn_parentesisde 
            {
              Nodo RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Nodo d = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo p = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                Nodo nodo = new Nodo("PROTOFUN",parser.cont);
                parser.cont++;
                nodo.addHijo(d);
                nodo.addHijo(p);
                RESULT=nodo;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROTOFUN",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // FUNCION ::= PROTOFUN tkn_llaveiz BLOQUE tkn_return EXPR tkn_puntocoma tkn_llaveder 
            {
              Nodo RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Nodo p = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int jleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int jright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Nodo j = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		parser.gramas.add("Una Funcion Reconocida satisfactoriamente");
                Nodo nodo = new Nodo("FUNCION",parser.cont);
                parser.cont++;
                nodo.addHijo(p);
                nodo.addHijo(j);
                nodo.addHijo(e);
                RESULT=nodo;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCION",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // PROTOTIPO ::= PROTOFUN tkn_puntocoma 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo i = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                Nodo nodo = new Nodo("PROTOTIPO",parser.cont);
                parser.cont++;
                nodo.addHijo(i);
                RESULT=nodo;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROTOTIPO",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // FUNCIONES ::= 
            {
              Nodo RESULT =null;
		
                    Nodo node = new Nodo("VACIO",parser.cont);
                    parser.cont++;
                    RESULT = node;
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCIONES",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // FUNCIONES ::= ASIGN FUNCIONES 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo i = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo f = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Nodo nodo = new Nodo("VARGLOBALES",parser.cont);
                parser.cont++;
                nodo.addHijo(i);
                nodo.addHijo(f);
                RESULT=nodo;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCIONES",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // FUNCIONES ::= FUNCION FUNCIONES 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo i = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo f = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Nodo nodo = new Nodo("FUNCION COMPLEJA",parser.cont);
                parser.cont++;
                nodo.addHijo(i);
                nodo.addHijo(f);
                RESULT=nodo;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCIONES",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // FUNCIONES ::= PROTOTIPO FUNCIONES 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo i = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo f = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Nodo nodo = new Nodo("CUERPO",parser.cont);
                parser.cont++;
                nodo.addHijo(i);
                nodo.addHijo(f);
                RESULT=nodo;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCIONES",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= FUNCIONES 
            {
              Nodo RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        Nodo nodo = new Nodo("PROGRAMA",parser.cont);
        parser.cont++;
        nodo.addHijo(b);
        parser.raiz=nodo;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIO",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo start_val = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

