
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Sep 14 00:44:00 CST 2022
//----------------------------------------------------

package Compiladorcito;

import java_cup.runtime.*;
import java.util.ArrayList;
import java.util.*;
import java.io.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Sep 14 00:44:00 CST 2022
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\164\000\002\002\004\000\002\042\003\000\002\042" +
    "\003\000\002\035\015\000\002\035\015\000\002\035\015" +
    "\000\002\035\015\000\002\035\015\000\002\032\004\000" +
    "\002\032\004\000\002\012\010\000\002\012\011\000\002" +
    "\012\011\000\002\027\003\000\002\027\003\000\002\027" +
    "\003\000\002\027\003\000\002\041\005\000\002\041\005" +
    "\000\002\011\005\000\002\011\006\000\002\011\003\000" +
    "\002\011\002\000\002\037\004\000\002\037\002\000\002" +
    "\034\004\000\002\034\002\000\002\016\003\000\002\016" +
    "\002\000\002\021\003\000\002\021\002\000\002\026\003" +
    "\000\002\026\002\000\002\023\006\000\002\023\005\000" +
    "\002\023\003\000\002\023\004\000\002\017\006\000\002" +
    "\017\004\000\002\017\006\000\002\017\006\000\002\017" +
    "\004\000\002\015\015\000\002\015\015\000\002\015\015" +
    "\000\002\015\015\000\002\015\015\000\002\025\005\000" +
    "\002\025\003\000\002\024\011\000\002\020\010\000\002" +
    "\020\003\000\002\020\010\000\002\003\011\000\002\003" +
    "\012\000\002\003\012\000\002\003\012\000\002\006\006" +
    "\000\002\006\004\000\002\006\002\000\002\004\020\000" +
    "\002\004\017\000\002\004\020\000\002\004\020\000\002" +
    "\004\020\000\002\002\011\000\002\002\011\000\002\002" +
    "\011\000\002\002\011\000\002\036\004\000\002\036\004" +
    "\000\002\036\004\000\002\036\004\000\002\036\004\000" +
    "\002\036\004\000\002\036\004\000\002\036\004\000\002" +
    "\036\004\000\002\036\004\000\002\036\002\000\002\005" +
    "\005\000\002\005\005\000\002\005\007\000\002\005\007" +
    "\000\002\005\005\000\002\005\003\000\002\007\005\000" +
    "\002\010\003\000\002\010\003\000\002\010\003\000\002" +
    "\010\003\000\002\010\003\000\002\030\006\000\002\031" +
    "\005\000\002\031\005\000\002\031\005\000\002\031\005" +
    "\000\002\031\003\000\002\040\011\000\002\040\007\000" +
    "\002\040\011\000\002\040\011\000\002\040\011\000\002" +
    "\040\011\000\002\014\012\000\002\014\012\000\002\014" +
    "\012\000\002\014\012\000\002\014\012\000\002\022\003" +
    "\000\002\022\003\000\002\022\003\000\002\033\003\000" +
    "\002\033\003\000\002\033\005\000\002\013\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0161\000\020\002\uffe7\003\015\012\016\013\012\014" +
    "\004\035\017\036\013\001\002\000\016\021\uffa6\037\uffa6" +
    "\040\uffa6\042\uffa6\043\uffa6\046\uffa6\001\002\000\004\002" +
    "\uffff\001\002\000\020\002\uffce\003\uffce\012\uffce\013\uffce" +
    "\014\uffce\035\uffce\036\uffce\001\002\000\004\002\000\001" +
    "\002\000\020\002\uffe7\003\015\012\016\013\012\014\004" +
    "\035\045\036\013\001\002\000\004\002\u0162\001\002\000" +
    "\016\021\uffa8\037\uffa8\040\uffa8\042\uffa8\043\uffa8\046\uffa8" +
    "\001\002\000\016\021\uffaa\037\uffaa\040\uffaa\042\uffaa\043" +
    "\uffaa\046\uffaa\001\002\000\012\037\u015d\040\uffeb\042\060" +
    "\046\026\001\002\000\012\037\u0151\040\uffeb\042\060\046" +
    "\026\001\002\000\016\021\uffa9\037\uffa9\040\uffa9\042\uffa9" +
    "\043\uffa9\046\uffa9\001\002\000\016\003\020\011\021\037" +
    "\uffa7\040\uffa7\042\uffa7\046\uffa7\001\002\000\004\020\u0148" +
    "\001\002\000\004\020\022\001\002\000\006\003\023\021" +
    "\024\001\002\000\004\022\u0141\001\002\000\004\022\025" +
    "\001\002\000\042\003\046\012\016\013\012\014\004\015" +
    "\052\016\054\020\044\026\041\027\uffb2\030\031\031\056" +
    "\035\045\036\013\037\053\042\060\046\026\001\002\000" +
    "\032\003\uff92\004\uff92\005\uff92\007\uff92\010\uff92\021\uff92" +
    "\024\uff92\025\uff92\034\uff92\040\uff92\041\uff92\043\uff92\001" +
    "\002\000\016\003\uffac\021\uffac\024\u013e\025\u013d\040\uffac" +
    "\041\uffac\001\002\000\044\003\046\012\016\013\012\014" +
    "\004\015\052\016\054\020\044\023\uffb2\026\041\027\uffb2" +
    "\030\031\031\056\035\045\036\013\037\053\042\060\046" +
    "\026\001\002\000\004\020\u012a\001\002\000\044\003\046" +
    "\012\016\013\012\014\004\015\052\016\054\020\044\023" +
    "\uffb2\026\041\027\uffb2\030\031\031\056\035\045\036\013" +
    "\037\053\042\060\046\026\001\002\000\044\003\046\012" +
    "\016\013\012\014\004\015\052\016\054\020\044\023\uffb2" +
    "\026\041\027\uffb2\030\031\031\056\035\045\036\013\037" +
    "\053\042\060\046\026\001\002\000\044\003\046\012\016" +
    "\013\012\014\004\015\052\016\054\020\044\023\uffb2\026" +
    "\041\027\uffb2\030\031\031\056\035\045\036\013\037\053" +
    "\042\060\046\026\001\002\000\026\003\uffa0\004\uffa0\005" +
    "\uffa0\007\uffa0\010\uffa0\021\uffa0\024\uffa0\025\uffa0\040\uffa0" +
    "\041\uffa0\001\002\000\044\003\046\012\016\013\012\014" +
    "\004\015\052\016\054\020\044\023\uffb2\026\041\027\uffb2" +
    "\030\031\031\056\035\045\036\013\037\053\042\060\046" +
    "\026\001\002\000\004\027\361\001\002\000\044\003\046" +
    "\012\016\013\012\014\004\015\052\016\054\020\044\023" +
    "\uffb2\026\041\027\uffb2\030\031\031\056\035\045\036\013" +
    "\037\053\042\060\046\026\001\002\000\006\003\302\020" +
    "\303\001\002\000\012\037\230\040\uffeb\042\060\046\026" +
    "\001\002\000\012\004\250\005\246\007\245\010\254\001" +
    "\002\000\012\020\243\037\065\042\060\046\026\001\002" +
    "\000\016\021\uffa7\037\uffa7\040\uffa7\042\uffa7\043\uffa7\046" +
    "\uffa7\001\002\000\012\037\230\040\uffeb\042\060\046\026" +
    "\001\002\000\044\003\046\012\016\013\012\014\004\015" +
    "\052\016\054\020\044\023\uffb2\026\041\027\uffb2\030\031" +
    "\031\056\035\045\036\013\037\053\042\060\046\026\001" +
    "\002\000\044\003\046\012\016\013\012\014\004\015\052" +
    "\016\054\020\044\023\uffb2\026\041\027\uffb2\030\031\031" +
    "\056\035\045\036\013\037\053\042\060\046\026\001\002" +
    "\000\044\003\046\012\016\013\012\014\004\015\052\016" +
    "\054\020\044\023\uffb2\026\041\027\uffb2\030\031\031\056" +
    "\035\045\036\013\037\053\042\060\046\026\001\002\000" +
    "\006\003\167\020\170\001\002\000\016\004\162\005\uff94" +
    "\007\uff94\010\uff94\032\161\033\160\001\002\000\006\003" +
    "\135\020\136\001\002\000\044\003\046\012\016\013\012" +
    "\014\004\015\052\016\054\020\044\023\uffb2\026\041\027" +
    "\uffb2\030\031\031\056\035\045\036\013\037\053\042\060" +
    "\046\026\001\002\000\006\003\105\020\106\001\002\000" +
    "\006\003\061\041\062\001\002\000\032\003\uff93\004\uff93" +
    "\005\uff93\007\uff93\010\uff93\021\uff93\024\uff93\025\uff93\034" +
    "\uff93\040\uff93\041\uff93\043\uff93\001\002\000\016\020\044" +
    "\030\031\037\065\042\060\045\064\046\026\001\002\000" +
    "\016\020\044\030\031\037\065\042\060\045\064\046\026" +
    "\001\002\000\010\003\ufff3\034\ufff3\040\ufff3\001\002\000" +
    "\010\003\ufff4\034\ufff4\040\ufff4\001\002\000\032\003\uff94" +
    "\004\uff94\005\uff94\007\uff94\010\uff94\021\uff94\024\uff94\025" +
    "\uff94\034\uff94\040\uff94\041\uff94\043\uff94\001\002\000\010" +
    "\003\ufff2\034\ufff2\040\ufff2\001\002\000\020\003\ufff1\004" +
    "\uffa0\005\uffa0\007\uffa0\010\uffa0\034\ufff1\040\ufff1\001\002" +
    "\000\006\003\072\034\071\001\002\000\016\020\044\030" +
    "\031\037\065\042\060\045\064\046\026\001\002\000\016" +
    "\020\044\030\031\037\065\042\060\045\064\046\026\001" +
    "\002\000\004\040\074\001\002\000\004\003\075\001\002" +
    "\000\050\003\ufff5\012\ufff5\013\ufff5\014\ufff5\015\ufff5\016" +
    "\ufff5\020\ufff5\023\ufff5\026\ufff5\027\ufff5\030\ufff5\031\ufff5" +
    "\034\ufff5\035\ufff5\036\ufff5\037\ufff5\040\ufff5\042\ufff5\046" +
    "\ufff5\001\002\000\004\040\077\001\002\000\050\003\ufff7" +
    "\012\ufff7\013\ufff7\014\ufff7\015\ufff7\016\ufff7\020\ufff7\023" +
    "\ufff7\026\ufff7\027\ufff7\030\ufff7\031\ufff7\034\ufff7\035\ufff7" +
    "\036\ufff7\037\ufff7\040\ufff7\042\ufff7\046\ufff7\001\002\000" +
    "\004\034\101\001\002\000\016\020\044\030\031\037\065" +
    "\042\060\045\064\046\026\001\002\000\004\040\103\001" +
    "\002\000\004\003\104\001\002\000\050\003\ufff6\012\ufff6" +
    "\013\ufff6\014\ufff6\015\ufff6\016\ufff6\020\ufff6\023\ufff6\026" +
    "\ufff6\027\ufff6\030\ufff6\031\ufff6\034\ufff6\035\ufff6\036\ufff6" +
    "\037\ufff6\040\ufff6\042\ufff6\046\ufff6\001\002\000\004\045" +
    "\126\001\002\000\004\045\107\001\002\000\004\043\110" +
    "\001\002\000\006\003\111\044\112\001\002\000\004\037" +
    "\123\001\002\000\006\003\113\037\114\001\002\000\004" +
    "\021\121\001\002\000\006\003\115\021\116\001\002\000" +
    "\004\040\120\001\002\000\004\040\117\001\002\000\044" +
    "\003\uff99\012\uff99\013\uff99\014\uff99\015\uff99\016\uff99\020" +
    "\uff99\023\uff99\026\uff99\027\uff99\030\uff99\031\uff99\035\uff99" +
    "\036\uff99\037\uff99\042\uff99\046\uff99\001\002\000\044\003" +
    "\uff96\012\uff96\013\uff96\014\uff96\015\uff96\016\uff96\020\uff96" +
    "\023\uff96\026\uff96\027\uff96\030\uff96\031\uff96\035\uff96\036" +
    "\uff96\037\uff96\042\uff96\046\uff96\001\002\000\004\040\122" +
    "\001\002\000\044\003\uff97\012\uff97\013\uff97\014\uff97\015" +
    "\uff97\016\uff97\020\uff97\023\uff97\026\uff97\027\uff97\030\uff97" +
    "\031\uff97\035\uff97\036\uff97\037\uff97\042\uff97\046\uff97\001" +
    "\002\000\004\021\124\001\002\000\004\040\125\001\002" +
    "\000\044\003\uff98\012\uff98\013\uff98\014\uff98\015\uff98\016" +
    "\uff98\020\uff98\023\uff98\026\uff98\027\uff98\030\uff98\031\uff98" +
    "\035\uff98\036\uff98\037\uff98\042\uff98\046\uff98\001\002\000" +
    "\004\043\127\001\002\000\004\044\130\001\002\000\004" +
    "\037\131\001\002\000\004\021\132\001\002\000\004\040" +
    "\133\001\002\000\044\003\uff95\012\uff95\013\uff95\014\uff95" +
    "\015\uff95\016\uff95\020\uff95\023\uff95\026\uff95\027\uff95\030" +
    "\uff95\031\uff95\035\uff95\036\uff95\037\uff95\042\uff95\046\uff95" +
    "\001\002\000\006\023\uffbb\027\uffbb\001\002\000\012\020" +
    "\044\037\065\042\060\046\026\001\002\000\012\020\044" +
    "\037\065\042\060\046\026\001\002\000\006\003\140\021" +
    "\141\001\002\000\004\022\150\001\002\000\006\003\142" +
    "\022\143\001\002\000\042\003\046\012\016\013\012\014" +
    "\004\015\052\016\054\020\044\023\uffb2\026\041\030\031" +
    "\031\056\035\045\036\013\037\053\042\060\046\026\001" +
    "\002\000\042\003\046\012\016\013\012\014\004\015\052" +
    "\016\054\020\044\023\uffb2\026\041\030\031\031\056\035" +
    "\045\036\013\037\053\042\060\046\026\001\002\000\004" +
    "\023\145\001\002\000\044\003\uffc0\012\uffc0\013\uffc0\014" +
    "\uffc0\015\uffc0\016\uffc0\020\uffc0\023\uffc0\026\uffc0\027\uffc0" +
    "\030\uffc0\031\uffc0\035\uffc0\036\uffc0\037\uffc0\042\uffc0\046" +
    "\uffc0\001\002\000\004\023\147\001\002\000\044\003\uffbf" +
    "\012\uffbf\013\uffbf\014\uffbf\015\uffbf\016\uffbf\020\uffbf\023" +
    "\uffbf\026\uffbf\027\uffbf\030\uffbf\031\uffbf\035\uffbf\036\uffbf" +
    "\037\uffbf\042\uffbf\046\uffbf\001\002\000\042\003\046\012" +
    "\016\013\012\014\004\015\052\016\054\020\044\023\uffb2" +
    "\026\041\030\031\031\056\035\045\036\013\037\053\042" +
    "\060\046\026\001\002\000\004\023\152\001\002\000\044" +
    "\003\uffbd\012\uffbd\013\uffbd\014\uffbd\015\uffbd\016\uffbd\020" +
    "\uffbd\023\uffbd\026\uffbd\027\uffbd\030\uffbd\031\uffbd\035\uffbd" +
    "\036\uffbd\037\uffbd\042\uffbd\046\uffbd\001\002\000\004\021" +
    "\154\001\002\000\004\022\155\001\002\000\042\003\046" +
    "\012\016\013\012\014\004\015\052\016\054\020\044\023" +
    "\uffb2\026\041\030\031\031\056\035\045\036\013\037\053" +
    "\042\060\046\026\001\002\000\004\023\157\001\002\000" +
    "\044\003\uffbe\012\uffbe\013\uffbe\014\uffbe\015\uffbe\016\uffbe" +
    "\020\uffbe\023\uffbe\026\uffbe\027\uffbe\030\uffbe\031\uffbe\035" +
    "\uffbe\036\uffbe\037\uffbe\042\uffbe\046\uffbe\001\002\000\006" +
    "\021\uff90\040\uff90\001\002\000\006\021\uff91\040\uff91\001" +
    "\002\000\004\010\165\001\002\000\004\040\164\001\002" +
    "\000\044\003\uff8e\012\uff8e\013\uff8e\014\uff8e\015\uff8e\016" +
    "\uff8e\020\uff8e\023\uff8e\026\uff8e\027\uff8e\030\uff8e\031\uff8e" +
    "\035\uff8e\036\uff8e\037\uff8e\042\uff8e\046\uff8e\001\002\000" +
    "\010\037\065\042\060\046\026\001\002\000\006\021\uff8f" +
    "\040\uff8f\001\002\000\012\020\044\037\065\042\060\046" +
    "\026\001\002\000\012\020\044\037\065\042\060\046\026" +
    "\001\002\000\006\003\172\021\173\001\002\000\004\022" +
    "\210\001\002\000\006\003\174\022\175\001\002\000\042" +
    "\003\046\012\016\013\012\014\004\015\052\016\054\020" +
    "\044\023\uffb2\026\041\030\031\031\056\035\045\036\013" +
    "\037\053\042\060\046\026\001\002\000\042\003\046\012" +
    "\016\013\012\014\004\015\052\016\054\020\044\023\uffb2" +
    "\026\041\030\031\031\056\035\045\036\013\037\053\042" +
    "\060\046\026\001\002\000\004\023\177\001\002\000\044" +
    "\003\uffcc\012\uffcc\013\uffcc\014\uffcc\015\uffcc\016\uffcc\020" +
    "\uffcc\023\uffcc\026\uffcc\027\uffcc\030\uffcc\031\uffcc\035\uffcc" +
    "\036\uffcc\037\uffcc\042\uffcc\046\uffcc\001\002\000\004\023" +
    "\201\001\002\000\046\003\uffc6\012\uffc6\013\uffc6\014\uffc6" +
    "\015\uffc6\016\uffc6\017\203\020\uffc6\023\uffc6\026\uffc6\027" +
    "\uffc6\030\uffc6\031\uffc6\035\uffc6\036\uffc6\037\uffc6\042\uffc6" +
    "\046\uffc6\001\002\000\044\003\uffca\012\uffca\013\uffca\014" +
    "\uffca\015\uffca\016\uffca\020\uffca\023\uffca\026\uffca\027\uffca" +
    "\030\uffca\031\uffca\035\uffca\036\uffca\037\uffca\042\uffca\046" +
    "\uffca\001\002\000\006\015\052\022\205\001\002\000\044" +
    "\003\uffc7\012\uffc7\013\uffc7\014\uffc7\015\uffc7\016\uffc7\020" +
    "\uffc7\023\uffc7\026\uffc7\027\uffc7\030\uffc7\031\uffc7\035\uffc7" +
    "\036\uffc7\037\uffc7\042\uffc7\046\uffc7\001\002\000\042\003" +
    "\046\012\016\013\012\014\004\015\052\016\054\020\044" +
    "\023\uffb2\026\041\030\031\031\056\035\045\036\013\037" +
    "\053\042\060\046\026\001\002\000\004\023\207\001\002" +
    "\000\044\003\uffc8\012\uffc8\013\uffc8\014\uffc8\015\uffc8\016" +
    "\uffc8\020\uffc8\023\uffc8\026\uffc8\027\uffc8\030\uffc8\031\uffc8" +
    "\035\uffc8\036\uffc8\037\uffc8\042\uffc8\046\uffc8\001\002\000" +
    "\042\003\046\012\016\013\012\014\004\015\052\016\054" +
    "\020\044\023\uffb2\026\041\030\031\031\056\035\045\036" +
    "\013\037\053\042\060\046\026\001\002\000\004\023\212" +
    "\001\002\000\046\003\uffc6\012\uffc6\013\uffc6\014\uffc6\015" +
    "\uffc6\016\uffc6\017\203\020\uffc6\023\uffc6\026\uffc6\027\uffc6" +
    "\030\uffc6\031\uffc6\035\uffc6\036\uffc6\037\uffc6\042\uffc6\046" +
    "\uffc6\001\002\000\044\003\uffc9\012\uffc9\013\uffc9\014\uffc9" +
    "\015\uffc9\016\uffc9\020\uffc9\023\uffc9\026\uffc9\027\uffc9\030" +
    "\uffc9\031\uffc9\035\uffc9\036\uffc9\037\uffc9\042\uffc9\046\uffc9" +
    "\001\002\000\004\021\215\001\002\000\004\022\216\001" +
    "\002\000\042\003\046\012\016\013\012\014\004\015\052" +
    "\016\054\020\044\023\uffb2\026\041\030\031\031\056\035" +
    "\045\036\013\037\053\042\060\046\026\001\002\000\004" +
    "\023\220\001\002\000\046\003\uffc6\012\uffc6\013\uffc6\014" +
    "\uffc6\015\uffc6\016\uffc6\017\203\020\uffc6\023\uffc6\026\uffc6" +
    "\027\uffc6\030\uffc6\031\uffc6\035\uffc6\036\uffc6\037\uffc6\042" +
    "\uffc6\046\uffc6\001\002\000\044\003\uffcb\012\uffcb\013\uffcb" +
    "\014\uffcb\015\uffcb\016\uffcb\020\uffcb\023\uffcb\026\uffcb\027" +
    "\uffcb\030\uffcb\031\uffcb\035\uffcb\036\uffcb\037\uffcb\042\uffcb" +
    "\046\uffcb\001\002\000\006\023\uffb3\027\uffb3\001\002\000" +
    "\006\023\uffb5\027\uffb5\001\002\000\006\023\uffb6\027\uffb6" +
    "\001\002\000\010\037\065\042\060\046\026\001\002\000" +
    "\004\040\235\001\002\000\006\040\uffec\043\233\001\002" +
    "\000\012\003\231\010\232\040\uff94\043\uff94\001\002\000" +
    "\012\020\ufff8\037\ufff8\042\ufff8\046\ufff8\001\002\000\012" +
    "\020\ufff9\037\ufff9\042\ufff9\046\ufff9\001\002\000\012\037" +
    "\230\040\uffeb\042\060\046\026\001\002\000\004\040\uffee" +
    "\001\002\000\046\002\uffef\003\uffef\012\uffef\013\uffef\014" +
    "\uffef\015\uffef\016\uffef\020\uffef\023\uffef\026\uffef\027\uffef" +
    "\030\uffef\031\uffef\035\uffef\036\uffef\037\uffef\042\uffef\046" +
    "\uffef\001\002\000\004\043\237\001\002\000\012\037\230" +
    "\040\uffeb\042\060\046\026\001\002\000\004\040\uffed\001" +
    "\002\000\004\021\256\001\002\000\014\004\250\005\246" +
    "\007\245\010\254\021\247\001\002\000\012\020\243\037" +
    "\065\042\060\046\026\001\002\000\012\004\250\005\246" +
    "\007\245\021\247\001\002\000\012\020\243\037\065\042" +
    "\060\046\026\001\002\000\012\020\243\037\065\042\060" +
    "\046\026\001\002\000\026\003\uffa1\004\uffa1\005\uffa1\007" +
    "\uffa1\010\uffa1\021\uffa1\024\uffa1\025\uffa1\040\uffa1\041\uffa1" +
    "\001\002\000\012\020\243\037\065\042\060\046\026\001" +
    "\002\000\026\003\uffa4\004\uffa4\005\246\007\245\010\uffa4" +
    "\021\uffa4\024\uffa4\025\uffa4\040\uffa4\041\uffa4\001\002\000" +
    "\026\003\uffa3\004\uffa3\005\uffa3\007\uffa3\010\uffa3\021\uffa3" +
    "\024\uffa3\025\uffa3\040\uffa3\041\uffa3\001\002\000\026\003" +
    "\uffa2\004\uffa2\005\uffa2\007\uffa2\010\uffa2\021\uffa2\024\uffa2" +
    "\025\uffa2\040\uffa2\041\uffa2\001\002\000\012\020\243\037" +
    "\065\042\060\046\026\001\002\000\024\003\uffab\004\250" +
    "\005\246\007\245\021\uffab\024\uffab\025\uffab\040\uffab\041" +
    "\uffab\001\002\000\016\003\uffad\021\uffad\024\260\025\257" +
    "\040\uffad\041\uffad\001\002\000\012\020\044\037\065\042" +
    "\060\046\026\001\002\000\012\020\044\037\065\042\060" +
    "\046\026\001\002\000\012\003\uffaf\021\uffaf\040\uffaf\041" +
    "\uffaf\001\002\000\012\003\uffae\021\uffae\040\uffae\041\uffae" +
    "\001\002\000\012\020\243\037\270\042\060\046\026\001" +
    "\002\000\004\040\265\001\002\000\046\002\ufff0\003\ufff0" +
    "\012\ufff0\013\ufff0\014\ufff0\015\ufff0\016\ufff0\020\ufff0\023" +
    "\ufff0\026\ufff0\027\ufff0\030\ufff0\031\ufff0\035\ufff0\036\ufff0" +
    "\037\ufff0\042\ufff0\046\ufff0\001\002\000\012\004\250\005" +
    "\246\007\245\040\301\001\002\000\014\004\uffa0\005\uffa0" +
    "\007\uffa0\040\uffa0\043\237\001\002\000\016\004\uff94\005" +
    "\uff94\007\uff94\020\271\040\uff94\043\uff94\001\002\000\006" +
    "\021\uffe1\037\273\001\002\000\004\021\uffe2\001\002\000" +
    "\006\021\uffd1\043\277\001\002\000\004\021\275\001\002" +
    "\000\004\040\276\001\002\000\044\003\uffd0\012\uffd0\013" +
    "\uffd0\014\uffd0\015\uffd0\016\uffd0\020\uffd0\023\uffd0\026\uffd0" +
    "\027\uffd0\030\uffd0\031\uffd0\035\uffd0\036\uffd0\037\uffd0\042" +
    "\uffd0\046\uffd0\001\002\000\004\037\273\001\002\000\004" +
    "\021\uffd2\001\002\000\044\003\uffa5\012\uffa5\013\uffa5\014" +
    "\uffa5\015\uffa5\016\uffa5\020\uffa5\023\uffa5\026\uffa5\027\uffa5" +
    "\030\uffa5\031\uffa5\035\uffa5\036\uffa5\037\uffa5\042\uffa5\046" +
    "\uffa5\001\002\000\004\035\344\001\002\000\006\035\306" +
    "\037\305\001\002\000\010\037\065\042\060\046\026\001" +
    "\002\000\006\003\231\010\232\001\002\000\004\037\305" +
    "\001\002\000\010\037\065\042\060\046\026\001\002\000" +
    "\004\040\311\001\002\000\012\020\044\037\065\042\060" +
    "\046\026\001\002\000\004\040\313\001\002\000\004\037" +
    "\314\001\002\000\012\003\315\004\162\032\161\033\160" +
    "\001\002\000\004\021\326\001\002\000\004\021\317\001" +
    "\002\000\006\003\320\022\321\001\002\000\042\003\046" +
    "\012\016\013\012\014\004\015\052\016\054\020\044\023" +
    "\uffb2\026\041\030\031\031\056\035\045\036\013\037\053" +
    "\042\060\046\026\001\002\000\042\003\046\012\016\013" +
    "\012\014\004\015\052\016\054\020\044\023\uffb2\026\041" +
    "\030\031\031\056\035\045\036\013\037\053\042\060\046" +
    "\026\001\002\000\004\023\323\001\002\000\044\003\uffc5" +
    "\012\uffc5\013\uffc5\014\uffc5\015\uffc5\016\uffc5\020\uffc5\023" +
    "\uffc5\026\uffc5\027\uffc5\030\uffc5\031\uffc5\035\uffc5\036\uffc5" +
    "\037\uffc5\042\uffc5\046\uffc5\001\002\000\004\023\325\001" +
    "\002\000\044\003\uffc1\012\uffc1\013\uffc1\014\uffc1\015\uffc1" +
    "\016\uffc1\020\uffc1\023\uffc1\026\uffc1\027\uffc1\030\uffc1\031" +
    "\uffc1\035\uffc1\036\uffc1\037\uffc1\042\uffc1\046\uffc1\001\002" +
    "\000\004\022\327\001\002\000\042\003\046\012\016\013" +
    "\012\014\004\015\052\016\054\020\044\023\uffb2\026\041" +
    "\030\031\031\056\035\045\036\013\037\053\042\060\046" +
    "\026\001\002\000\004\023\331\001\002\000\044\003\uffc2" +
    "\012\uffc2\013\uffc2\014\uffc2\015\uffc2\016\uffc2\020\uffc2\023" +
    "\uffc2\026\uffc2\027\uffc2\030\uffc2\031\uffc2\035\uffc2\036\uffc2" +
    "\037\uffc2\042\uffc2\046\uffc2\001\002\000\004\040\333\001" +
    "\002\000\012\020\044\037\065\042\060\046\026\001\002" +
    "\000\004\040\335\001\002\000\004\037\336\001\002\000" +
    "\010\004\162\032\161\033\160\001\002\000\004\021\340" +
    "\001\002\000\004\022\341\001\002\000\042\003\046\012" +
    "\016\013\012\014\004\015\052\016\054\020\044\023\uffb2" +
    "\026\041\030\031\031\056\035\045\036\013\037\053\042" +
    "\060\046\026\001\002\000\004\023\343\001\002\000\044" +
    "\003\uffc4\012\uffc4\013\uffc4\014\uffc4\015\uffc4\016\uffc4\020" +
    "\uffc4\023\uffc4\026\uffc4\027\uffc4\030\uffc4\031\uffc4\035\uffc4" +
    "\036\uffc4\037\uffc4\042\uffc4\046\uffc4\001\002\000\004\037" +
    "\305\001\002\000\010\037\065\042\060\046\026\001\002" +
    "\000\004\040\347\001\002\000\012\020\044\037\065\042" +
    "\060\046\026\001\002\000\004\040\351\001\002\000\004" +
    "\037\352\001\002\000\010\004\162\032\161\033\160\001" +
    "\002\000\004\021\354\001\002\000\004\022\355\001\002" +
    "\000\042\003\046\012\016\013\012\014\004\015\052\016" +
    "\054\020\044\023\uffb2\026\041\030\031\031\056\035\045" +
    "\036\013\037\053\042\060\046\026\001\002\000\004\023" +
    "\357\001\002\000\044\003\uffc3\012\uffc3\013\uffc3\014\uffc3" +
    "\015\uffc3\016\uffc3\020\uffc3\023\uffc3\026\uffc3\027\uffc3\030" +
    "\uffc3\031\uffc3\035\uffc3\036\uffc3\037\uffc3\042\uffc3\046\uffc3" +
    "\001\002\000\006\023\uffb8\027\uffb8\001\002\000\004\042" +
    "\362\001\002\000\006\003\363\040\364\001\002\000\004" +
    "\023\u0124\001\002\000\006\003\365\023\366\001\002\000" +
    "\016\002\uffe9\012\016\013\012\014\004\035\045\036\013" +
    "\001\002\000\016\002\uffe9\012\016\013\012\014\004\035" +
    "\045\036\013\001\002\000\016\002\uffe9\012\016\013\012" +
    "\014\004\035\045\036\013\001\002\000\004\002\ufffe\001" +
    "\002\000\004\037\372\001\002\000\006\003\373\020\374" +
    "\001\002\000\020\003\377\012\016\013\012\014\004\021" +
    "\uffe5\035\045\036\013\001\002\000\020\003\377\012\016" +
    "\013\012\014\004\021\uffe5\035\045\036\013\001\002\000" +
    "\004\021\u0109\001\002\000\004\037\u0104\001\002\000\004" +
    "\037\u0101\001\002\000\004\021\uffe6\001\002\000\006\021" +
    "\uffd8\043\u0102\001\002\000\016\003\377\012\016\013\012" +
    "\014\004\035\045\036\013\001\002\000\004\021\uffd9\001" +
    "\002\000\010\003\u0106\021\uffdb\043\u0105\001\002\000\016" +
    "\003\377\012\016\013\012\014\004\035\045\036\013\001" +
    "\002\000\016\003\377\012\016\013\012\014\004\035\045" +
    "\036\013\001\002\000\004\021\uffda\001\002\000\004\021" +
    "\uffdc\001\002\000\006\003\u010a\022\u010b\001\002\000\042" +
    "\003\046\012\016\013\012\014\004\015\052\016\054\020" +
    "\044\026\041\027\uffb2\030\031\031\056\035\045\036\013" +
    "\037\053\042\060\046\026\001\002\000\042\003\046\012" +
    "\016\013\012\014\004\015\052\016\054\020\044\026\041" +
    "\027\uffb2\030\031\031\056\035\045\036\013\037\053\042" +
    "\060\046\026\001\002\000\004\027\u010d\001\002\000\012" +
    "\003\u010f\037\065\042\060\046\026\001\002\000\004\040" +
    "\u0112\001\002\000\004\040\u0110\001\002\000\004\023\u0111" +
    "\001\002\000\016\002\uffd3\012\uffd3\013\uffd3\014\uffd3\035" +
    "\uffd3\036\uffd3\001\002\000\006\003\u0113\023\u0114\001\002" +
    "\000\016\002\uffd6\012\uffd6\013\uffd6\014\uffd6\035\uffd6\036" +
    "\uffd6\001\002\000\016\002\uffd7\012\uffd7\013\uffd7\014\uffd7" +
    "\035\uffd7\036\uffd7\001\002\000\004\027\u0116\001\002\000" +
    "\010\037\065\042\060\046\026\001\002\000\004\040\u0118" +
    "\001\002\000\004\023\u0119\001\002\000\016\002\uffd5\012" +
    "\uffd5\013\uffd5\014\uffd5\035\uffd5\036\uffd5\001\002\000\004" +
    "\021\u011b\001\002\000\004\022\u011c\001\002\000\042\003" +
    "\046\012\016\013\012\014\004\015\052\016\054\020\044" +
    "\026\041\027\uffb2\030\031\031\056\035\045\036\013\037" +
    "\053\042\060\046\026\001\002\000\004\027\u011e\001\002" +
    "\000\010\037\065\042\060\046\026\001\002\000\004\040" +
    "\u0120\001\002\000\004\023\u0121\001\002\000\016\002\uffd4" +
    "\012\uffd4\013\uffd4\014\uffd4\035\uffd4\036\uffd4\001\002\000" +
    "\004\002\uffea\001\002\000\004\002\ufffa\001\002\000\016" +
    "\002\uffe9\012\016\013\012\014\004\035\045\036\013\001" +
    "\002\000\004\002\ufffb\001\002\000\006\023\uffba\027\uffba" +
    "\001\002\000\006\023\uffbc\027\uffbc\001\002\000\006\023" +
    "\uffb7\027\uffb7\001\002\000\006\023\uffb9\027\uffb9\001\002" +
    "\000\004\045\u012b\001\002\000\010\003\u012d\021\u012e\043" +
    "\u012c\001\002\000\006\003\u0133\037\u0134\001\002\000\004" +
    "\037\u0130\001\002\000\004\040\u012f\001\002\000\050\003" +
    "\uff9e\012\uff9e\013\uff9e\014\uff9e\015\uff9e\016\uff9e\020\uff9e" +
    "\023\uff9e\026\uff9e\027\uff9e\030\uff9e\031\uff9e\034\uff9e\035" +
    "\uff9e\036\uff9e\037\uff9e\040\uff9e\042\uff9e\046\uff9e\001\002" +
    "\000\004\021\u0131\001\002\000\004\040\u0132\001\002\000" +
    "\050\003\uff9d\012\uff9d\013\uff9d\014\uff9d\015\uff9d\016\uff9d" +
    "\020\uff9d\023\uff9d\026\uff9d\027\uff9d\030\uff9d\031\uff9d\034" +
    "\uff9d\035\uff9d\036\uff9d\037\uff9d\040\uff9d\042\uff9d\046\uff9d" +
    "\001\002\000\004\021\u013a\001\002\000\006\003\u0135\021" +
    "\u0136\001\002\000\004\040\u0139\001\002\000\006\003\u0137" +
    "\040\u0138\001\002\000\050\003\uff9a\012\uff9a\013\uff9a\014" +
    "\uff9a\015\uff9a\016\uff9a\020\uff9a\023\uff9a\026\uff9a\027\uff9a" +
    "\030\uff9a\031\uff9a\034\uff9a\035\uff9a\036\uff9a\037\uff9a\040" +
    "\uff9a\042\uff9a\046\uff9a\001\002\000\050\003\uff9f\012\uff9f" +
    "\013\uff9f\014\uff9f\015\uff9f\016\uff9f\020\uff9f\023\uff9f\026" +
    "\uff9f\027\uff9f\030\uff9f\031\uff9f\034\uff9f\035\uff9f\036\uff9f" +
    "\037\uff9f\040\uff9f\042\uff9f\046\uff9f\001\002\000\050\003" +
    "\uff9b\012\uff9b\013\uff9b\014\uff9b\015\uff9b\016\uff9b\020\uff9b" +
    "\023\uff9b\026\uff9b\027\uff9b\030\uff9b\031\uff9b\034\uff9b\035" +
    "\uff9b\036\uff9b\037\uff9b\040\uff9b\042\uff9b\046\uff9b\001\002" +
    "\000\004\040\u013b\001\002\000\050\003\uff9c\012\uff9c\013" +
    "\uff9c\014\uff9c\015\uff9c\016\uff9c\020\uff9c\023\uff9c\026\uff9c" +
    "\027\uff9c\030\uff9c\031\uff9c\034\uff9c\035\uff9c\036\uff9c\037" +
    "\uff9c\040\uff9c\042\uff9c\046\uff9c\001\002\000\006\023\uffb4" +
    "\027\uffb4\001\002\000\012\020\044\037\065\042\060\046" +
    "\026\001\002\000\012\020\044\037\065\042\060\046\026" +
    "\001\002\000\012\003\uffb1\021\uffb1\040\uffb1\041\uffb1\001" +
    "\002\000\012\003\uffb0\021\uffb0\040\uffb0\041\uffb0\001\002" +
    "\000\042\003\046\012\016\013\012\014\004\015\052\016" +
    "\054\020\044\026\041\027\uffb2\030\031\031\056\035\045" +
    "\036\013\037\053\042\060\046\026\001\002\000\004\027" +
    "\u0143\001\002\000\004\042\u0144\001\002\000\004\040\u0145" +
    "\001\002\000\004\023\u0146\001\002\000\016\002\uffe9\012" +
    "\016\013\012\014\004\035\045\036\013\001\002\000\004" +
    "\002\ufffd\001\002\000\004\021\u0149\001\002\000\004\022" +
    "\u014a\001\002\000\042\003\046\012\016\013\012\014\004" +
    "\015\052\016\054\020\044\026\041\027\uffb2\030\031\031" +
    "\056\035\045\036\013\037\053\042\060\046\026\001\002" +
    "\000\004\027\u014c\001\002\000\004\042\u014d\001\002\000" +
    "\004\040\u014e\001\002\000\004\023\u014f\001\002\000\016" +
    "\002\uffe9\012\016\013\012\014\004\035\045\036\013\001" +
    "\002\000\004\002\ufffc\001\002\000\014\003\231\010\232" +
    "\020\u0152\040\uff94\043\uff94\001\002\000\016\012\016\013" +
    "\012\014\004\021\uffe3\035\045\036\013\001\002\000\004" +
    "\021\u015b\001\002\000\004\021\uffe4\001\002\000\010\021" +
    "\uffde\037\u0157\043\u0156\001\002\000\014\012\016\013\012" +
    "\014\004\035\045\036\013\001\002\000\006\021\uffdd\043" +
    "\u0158\001\002\000\014\012\016\013\012\014\004\035\045" +
    "\036\013\001\002\000\004\021\uffe0\001\002\000\004\021" +
    "\uffdf\001\002\000\004\040\u015c\001\002\000\020\002\uffcd" +
    "\003\uffcd\012\uffcd\013\uffcd\014\uffcd\035\uffcd\036\uffcd\001" +
    "\002\000\014\003\231\010\232\020\u015e\040\uff94\043\uff94" +
    "\001\002\000\016\012\016\013\012\014\004\021\uffe3\035" +
    "\045\036\013\001\002\000\004\021\u0160\001\002\000\004" +
    "\040\u0161\001\002\000\020\002\uffcf\003\uffcf\012\uffcf\013" +
    "\uffcf\014\uffcf\035\uffcf\036\uffcf\001\002\000\004\002\001" +
    "\001\002\000\004\002\uffe8\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0161\000\016\010\013\020\007\034\006\035\004\041" +
    "\005\042\010\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\010\013\020" +
    "\007\034\u0162\041\005\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\011\263\022\226\032" +
    "\224\001\001\000\010\011\225\022\226\032\224\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\042\002\031\003\035\004\054\005\056\007" +
    "\026\010\041\012\050\013\027\014\032\022\034\024\047" +
    "\030\046\031\042\036\036\040\037\041\033\001\001\000" +
    "\002\001\001\000\002\001\001\000\042\002\031\003\035" +
    "\004\054\005\056\007\026\010\041\012\050\013\027\014" +
    "\032\022\034\024\047\030\046\031\042\036\u013b\040\037" +
    "\041\033\001\001\000\002\001\001\000\042\002\031\003" +
    "\035\004\054\005\056\007\026\010\041\012\050\013\027" +
    "\014\032\022\034\024\047\030\046\031\042\036\u0128\040" +
    "\037\041\033\001\001\000\042\002\031\003\035\004\054" +
    "\005\056\007\026\010\041\012\050\013\027\014\032\022" +
    "\034\024\047\030\046\031\042\036\u0127\040\037\041\033" +
    "\001\001\000\042\002\031\003\035\004\054\005\056\007" +
    "\026\010\041\012\050\013\027\014\032\022\034\024\047" +
    "\030\046\031\042\036\u0126\040\037\041\033\001\001\000" +
    "\002\001\001\000\042\002\031\003\035\004\054\005\056" +
    "\007\026\010\041\012\050\013\027\014\032\022\034\024" +
    "\047\030\046\031\042\036\u0125\040\037\041\033\001\001" +
    "\000\002\001\001\000\042\002\031\003\035\004\054\005" +
    "\056\007\026\010\041\012\050\013\027\014\032\022\034" +
    "\024\047\030\046\031\042\036\357\040\037\041\033\001" +
    "\001\000\002\001\001\000\010\011\263\022\226\032\262" +
    "\001\001\000\002\001\001\000\010\007\240\022\034\031" +
    "\241\001\001\000\002\001\001\000\010\011\225\022\226" +
    "\032\224\001\001\000\042\002\031\003\035\004\054\005" +
    "\056\007\026\010\041\012\050\013\027\014\032\022\034" +
    "\024\047\030\046\031\042\036\223\040\037\041\033\001" +
    "\001\000\042\002\031\003\035\004\054\005\056\007\026" +
    "\010\041\012\050\013\027\014\032\022\034\024\047\030" +
    "\046\031\042\036\222\040\037\041\033\001\001\000\042" +
    "\002\031\003\035\004\054\005\056\007\026\010\041\012" +
    "\050\013\027\014\032\022\034\024\047\030\046\031\042" +
    "\036\221\040\037\041\033\001\001\000\002\001\001\000" +
    "\004\033\162\001\001\000\002\001\001\000\042\002\031" +
    "\003\035\004\054\005\056\007\026\010\041\012\050\013" +
    "\027\014\032\022\034\024\047\030\046\031\042\036\133" +
    "\040\037\041\033\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\005\056\007\026\012\065" +
    "\022\066\027\077\031\042\040\062\001\001\000\020\005" +
    "\056\007\026\012\065\022\066\027\067\031\042\040\062" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\005\056\007\026\012\065\022\066\027\075\031" +
    "\042\040\062\001\001\000\020\005\056\007\026\012\065" +
    "\022\066\027\072\031\042\040\062\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\005\056\007" +
    "\026\012\065\022\066\027\101\031\042\040\062\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\005\152\007\026\022\034\031" +
    "\042\001\001\000\012\005\136\007\026\022\034\031\042" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\042\002\031\003\035\004\054\005\056\007\026" +
    "\010\041\012\050\013\027\014\032\022\034\024\047\030" +
    "\046\031\042\036\145\040\037\041\033\001\001\000\042" +
    "\002\031\003\035\004\054\005\056\007\026\010\041\012" +
    "\050\013\027\014\032\022\034\024\047\030\046\031\042" +
    "\036\143\040\037\041\033\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\042" +
    "\002\031\003\035\004\054\005\056\007\026\010\041\012" +
    "\050\013\027\014\032\022\034\024\047\030\046\031\042" +
    "\036\150\040\037\041\033\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\042" +
    "\002\031\003\035\004\054\005\056\007\026\010\041\012" +
    "\050\013\027\014\032\022\034\024\047\030\046\031\042" +
    "\036\155\040\037\041\033\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\022" +
    "\165\001\001\000\002\001\001\000\012\005\213\007\026" +
    "\022\034\031\042\001\001\000\012\005\170\007\026\022" +
    "\034\031\042\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\042\002\031\003\035\004\054\005" +
    "\056\007\026\010\041\012\050\013\027\014\032\022\034" +
    "\024\047\030\046\031\042\036\177\040\037\041\033\001" +
    "\001\000\042\002\031\003\035\004\054\005\056\007\026" +
    "\010\041\012\050\013\027\014\032\022\034\024\047\030" +
    "\046\031\042\036\175\040\037\041\033\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\006" +
    "\201\001\001\000\002\001\001\000\004\003\203\001\001" +
    "\000\002\001\001\000\042\002\031\003\035\004\054\005" +
    "\056\007\026\010\041\012\050\013\027\014\032\022\034" +
    "\024\047\030\046\031\042\036\205\040\037\041\033\001" +
    "\001\000\002\001\001\000\002\001\001\000\042\002\031" +
    "\003\035\004\054\005\056\007\026\010\041\012\050\013" +
    "\027\014\032\022\034\024\047\030\046\031\042\036\210" +
    "\040\037\041\033\001\001\000\002\001\001\000\004\006" +
    "\212\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\042\002\031\003\035\004\054\005\056\007" +
    "\026\010\041\012\050\013\027\014\032\022\034\024\047" +
    "\030\046\031\042\036\216\040\037\041\033\001\001\000" +
    "\002\001\001\000\004\006\220\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\022\235\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\011\233\022\226\032\224\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\011\237\022" +
    "\226\032\224\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\022\034\031\243\001\001\000" +
    "\002\001\001\000\006\022\034\031\252\001\001\000\006" +
    "\022\034\031\251\001\001\000\002\001\001\000\006\022" +
    "\034\031\250\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\022\034\031\254\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\005\261\007\026" +
    "\022\034\031\042\001\001\000\012\005\260\007\026\022" +
    "\034\031\042\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\022\266\031\265\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\025\271\026\273\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\025\277\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\032\303" +
    "\001\001\000\004\022\331\001\001\000\002\001\001\000" +
    "\004\032\306\001\001\000\004\022\307\001\001\000\002" +
    "\001\001\000\012\005\311\007\026\022\034\031\042\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\033\315" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\042\002\031\003\035\004\054\005\056\007\026" +
    "\010\041\012\050\013\027\014\032\022\034\024\047\030" +
    "\046\031\042\036\323\040\037\041\033\001\001\000\042" +
    "\002\031\003\035\004\054\005\056\007\026\010\041\012" +
    "\050\013\027\014\032\022\034\024\047\030\046\031\042" +
    "\036\321\040\037\041\033\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\042\002\031\003\035\004\054\005\056\007" +
    "\026\010\041\012\050\013\027\014\032\022\034\024\047" +
    "\030\046\031\042\036\327\040\037\041\033\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\005\333\007\026\022\034\031\042\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\033\336\001\001\000\002" +
    "\001\001\000\002\001\001\000\042\002\031\003\035\004" +
    "\054\005\056\007\026\010\041\012\050\013\027\014\032" +
    "\022\034\024\047\030\046\031\042\036\341\040\037\041" +
    "\033\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\032\344\001\001\000\004\022\345\001\001\000\002\001" +
    "\001\000\012\005\347\007\026\022\034\031\042\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\033\352\001" +
    "\001\000\002\001\001\000\002\001\001\000\042\002\031" +
    "\003\035\004\054\005\056\007\026\010\041\012\050\013" +
    "\027\014\032\022\034\024\047\030\046\031\042\036\355" +
    "\040\037\041\033\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\010\370\015" +
    "\366\037\u0122\001\001\000\010\010\370\015\366\037\367" +
    "\001\001\000\010\010\370\015\366\037\u0121\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\010\375\016\u0119\017\377\001\001\000\010\010\375\016" +
    "\374\017\377\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\010\375\017\u0102\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\010\375\017\u0107\001\001\000\006\010" +
    "\375\017\u0106\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\042\002\031\003\035\004\054\005" +
    "\056\007\026\010\041\012\050\013\027\014\032\022\034" +
    "\024\047\030\046\031\042\036\u0114\040\037\041\033\001" +
    "\001\000\042\002\031\003\035\004\054\005\056\007\026" +
    "\010\041\012\050\013\027\014\032\022\034\024\047\030" +
    "\046\031\042\036\u010b\040\037\041\033\001\001\000\002" +
    "\001\001\000\004\022\u010d\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\022\u0116\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\042\002\031\003\035\004\054\005\056\007\026" +
    "\010\041\012\050\013\027\014\032\022\034\024\047\030" +
    "\046\031\042\036\u011c\040\037\041\033\001\001\000\002" +
    "\001\001\000\004\022\u011e\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\010\370\015\366\037\u0124\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\005\u013f\007\026\022\034\031" +
    "\042\001\001\000\012\005\u013e\007\026\022\034\031\042" +
    "\001\001\000\002\001\001\000\002\001\001\000\042\002" +
    "\031\003\035\004\054\005\056\007\026\010\041\012\050" +
    "\013\027\014\032\022\034\024\047\030\046\031\042\036" +
    "\u0141\040\037\041\033\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\010" +
    "\370\015\366\037\u0146\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\042\002\031\003\035\004" +
    "\054\005\056\007\026\010\041\012\050\013\027\014\032" +
    "\022\034\024\047\030\046\031\042\036\u014a\040\037\041" +
    "\033\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\010\370\015\366\037" +
    "\u014f\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\010\u0154\021\u0152\023\u0153\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\010\u0154\023\u0159" +
    "\001\001\000\002\001\001\000\006\010\u0154\023\u0158\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\010\u0154\021" +
    "\u015e\023\u0153\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    ArrayList gramas = new ArrayList();
    public Nodo raiz;
    public int cont = 0;
    public int maximo(){
    int a=5;
    return a;
}
    ArrayList errores=new ArrayList();
    public Symbol s;
    @Override
    public void syntax_error (Symbol s){
        if(s.left==-1){
        }else{
                errores.add("Syntax error en la línea: " + (s.left) + " , columna: " +(s.right)+ " con el símbolo = "+(s.value));
    }
}
    @Override
    public void unrecovered_syntax_error(Symbol s){
    if(s.left==-1){
    }else{
        errores.add("Error desconocido, por favor revise la linea: " + (s.left ) + " y columna:  " + (s.right )+ "Con simbolo: "+s.value);
    }    
    }
    public Symbol getS(){
        return this.s;
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // CONTADOR ::= tkn_id ITERADOR tkn_puntocoma 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTADOR",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // ITERADOR ::= tkn_opadicion tkn_oprel RETURN 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ITERADOR",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // ITERADOR ::= tkn_decrement 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ITERADOR",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // ITERADOR ::= tkn_increment 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ITERADOR",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // RETURN ::= tkn_caracter 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("RETURN",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // RETURN ::= tkn_num 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("RETURN",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // RETURN ::= tkn_id 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("RETURN",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // SCANF ::= tkn_scanf error tkn_cadena tkn_coma tkn_ampersand tkn_id tkn_parentesisde tkn_puntocoma 
            {
              Nodo RESULT =null;
		parser.errores.add("parentesis de apertura '(' ausente en la funcion scanf");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SCANF",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // SCANF ::= tkn_scanf tkn_parentesisiz tkn_cadena tkn_coma tkn_ampersand tkn_id error tkn_puntocoma 
            {
              Nodo RESULT =null;
		parser.errores.add("parentesis de cierre ')' ausente en la funcion scanf");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SCANF",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // SCANF ::= tkn_scanf tkn_parentesisiz tkn_cadena tkn_coma tkn_ampersand error tkn_parentesisde tkn_puntocoma 
            {
              Nodo RESULT =null;
		parser.errores.add("identificador ausente en la funcion scanf");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SCANF",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // SCANF ::= tkn_scanf tkn_parentesisiz tkn_cadena tkn_coma error tkn_id tkn_parentesisde tkn_puntocoma 
            {
              Nodo RESULT =null;
		parser.errores.add("Puntero a identificador '&' ausente en la funcion scanf");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SCANF",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // SCANF ::= tkn_scanf tkn_parentesisiz tkn_cadena tkn_coma tkn_ampersand tkn_id tkn_parentesisde tkn_puntocoma 
            {
              Nodo RESULT =null;
		parser.gramas.add("Funcion SCANF reconocida");
                Nodo nodo = new Nodo("SCANF",parser.cont);
                parser.cont++;
                RESULT=nodo;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SCANF",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // PRINTF ::= tkn_printf tkn_parentesisiz tkn_cadena tkn_coma tkn_id tkn_parentesisde error 
            {
              Nodo RESULT =null;
		parser.errores.add("se esperaba el simbolo ';' en la funcion printf");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRINTF",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // PRINTF ::= tkn_printf tkn_parentesisiz tkn_cadena tkn_coma tkn_id error tkn_puntocoma 
            {
              Nodo RESULT =null;
		parser.errores.add("parentesis de cierre '(' ausente en la funcion printf");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRINTF",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // PRINTF ::= tkn_printf tkn_parentesisiz tkn_cadena tkn_coma error tkn_parentesisde tkn_puntocoma 
            {
              Nodo RESULT =null;
		parser.errores.add("identificador ausente en la funcion printf");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRINTF",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // PRINTF ::= tkn_printf tkn_parentesisiz tkn_cadena error tkn_id tkn_parentesisde tkn_puntocoma 
            {
              Nodo RESULT =null;
		parser.errores.add("coma ',' ausente en la funcion printf");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRINTF",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // PRINTF ::= tkn_printf tkn_parentesisiz tkn_cadena tkn_parentesisde tkn_puntocoma 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRINTF",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // PRINTF ::= tkn_printf tkn_parentesisiz tkn_cadena tkn_coma tkn_id tkn_parentesisde tkn_puntocoma 
            {
              Nodo RESULT =null;
		parser.gramas.add("Funcion PRINTF reconocida");
                Nodo nodo = new Nodo("PRINT F",parser.cont);
                parser.cont++;
                RESULT=nodo;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRINTF",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // EXPR ::= RETURN 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPR",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // EXPR ::= tkn_parentesisiz EXPR tkn_parentesisde 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPR",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // EXPR ::= EXPR tkn_opmod EXPR 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPR",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // EXPR ::= EXPR tkn_opmulti EXPR 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPR",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // EXPR ::= EXPR tkn_opadicion EXPR 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPR",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // EXPRFIN ::= TIPO ASIGN EXPR tkn_puntocoma 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRFIN",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // TIPO ::= tkn_void 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // TIPO ::= tkn_int 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // TIPO ::= tkn_charp 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // TIPO ::= tkn_intp 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // TIPO ::= tkn_char 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // CONDICIONP ::= EXPR tkn_oprel EXPR 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICIONP",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // CONDICION ::= CONDICIONP 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // CONDICION ::= tkn_parentesisiz CONDICIONP tkn_parentesisde 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // CONDICION ::= tkn_parentesisiz CONDICIONP tkn_parentesisde tkn_or CONDICION 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // CONDICION ::= tkn_parentesisiz CONDICIONP tkn_parentesisde tkn_and CONDICION 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // CONDICION ::= CONDICIONP tkn_or CONDICION 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // CONDICION ::= CONDICIONP tkn_and CONDICION 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // BLOQUE ::= 
            {
              Nodo RESULT =null;
		
                    Nodo node = new Nodo("VACIO",parser.cont);
                    parser.cont++;
                    node.addHijo(new Nodo("VACIO",parser.cont++));
                    parser.cont++;
                    RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // BLOQUE ::= TERNARIO BLOQUE 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo i = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Nodo nodo = new Nodo("BLOQUE",parser.cont);
                parser.cont++;
                nodo.addHijo(i);
                nodo.addHijo(s);
                RESULT=nodo;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // BLOQUE ::= CONTADOR BLOQUE 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo i = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Nodo nodo = new Nodo("BLOQUE",parser.cont);
                parser.cont++;
                nodo.addHijo(i);
                nodo.addHijo(s);
                RESULT=nodo;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // BLOQUE ::= LLAMADO BLOQUE 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo i = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Nodo nodo = new Nodo("BLOQUE",parser.cont);
                parser.cont++;
                nodo.addHijo(i);
                nodo.addHijo(s);
                RESULT=nodo;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // BLOQUE ::= EXPRFIN BLOQUE 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo i = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Nodo nodo = new Nodo("BLOQUE",parser.cont);
                parser.cont++;
                nodo.addHijo(i);
                nodo.addHijo(s);
                RESULT=nodo;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // BLOQUE ::= SCANF BLOQUE 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo i = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Nodo nodo = new Nodo("BLOQUE",parser.cont);
                parser.cont++;
                nodo.addHijo(i);
                nodo.addHijo(s);
                RESULT=nodo;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // BLOQUE ::= PRINTF BLOQUE 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo i = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Nodo nodo = new Nodo("BLOQUE",parser.cont);
                parser.cont++;
                nodo.addHijo(i);
                nodo.addHijo(s);
                RESULT=nodo;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // BLOQUE ::= WHILE BLOQUE 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo i = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Nodo nodo = new Nodo("BLOQUE",parser.cont);
                parser.cont++;
                nodo.addHijo(i);
                nodo.addHijo(s);
                RESULT=nodo;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // BLOQUE ::= IF BLOQUE 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo i = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Nodo nodo = new Nodo("BLOQUE",parser.cont);
                parser.cont++;
                nodo.addHijo(i);
                nodo.addHijo(s);
                RESULT=nodo;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // BLOQUE ::= FOR BLOQUE 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo i = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Nodo nodo = new Nodo("BLOQUE",parser.cont);
                parser.cont++;
                nodo.addHijo(i);
                nodo.addHijo(s);
                RESULT=nodo;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // BLOQUE ::= DECLARACION BLOQUE 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo i = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Nodo nodo = new Nodo("BLOQUE",parser.cont);
                parser.cont++;
                nodo.addHijo(i);
                nodo.addHijo(s);
                RESULT=nodo;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // WHILE ::= tkn_while tkn_parentesisiz CONDICION error tkn_llaveiz BLOQUE tkn_llaveder 
            {
              Nodo RESULT =null;
		parser.errores.add("Parentesis de cierre ')' ausente en bloque while");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("WHILE",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // WHILE ::= tkn_while error CONDICION tkn_parentesisde tkn_llaveiz BLOQUE tkn_llaveder 
            {
              Nodo RESULT =null;
		parser.errores.add("Parentesis de apertura '(' ausente en bloque while");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("WHILE",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // WHILE ::= tkn_while tkn_parentesisiz CONDICION tkn_parentesisde error BLOQUE tkn_llaveder 
            {
              Nodo RESULT =null;
		parser.errores.add("Llave de apertura '{' ausente en bloque while");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("WHILE",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // WHILE ::= tkn_while tkn_parentesisiz CONDICION tkn_parentesisde tkn_llaveiz BLOQUE tkn_llaveder 
            {
              Nodo RESULT =null;
		int jleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int jright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo j = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		parser.gramas.add("Funcion WHILE reconocida");
                Nodo nodo = new Nodo("WHILE",parser.cont);
                parser.cont++;
                nodo.addHijo(j);
                RESULT=nodo;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("WHILE",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // FOR ::= tkn_for tkn_parentesisiz tkn_int ASIGN RETURN tkn_puntocoma CONDICION tkn_puntocoma tkn_id ITERADOR tkn_parentesisde error BLOQUE tkn_llaveder 
            {
              Nodo RESULT =null;
		parser.errores.add("Llave de apertura '{' ausente en bloque for");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FOR",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // FOR ::= tkn_for tkn_parentesisiz tkn_int ASIGN RETURN tkn_puntocoma CONDICION tkn_puntocoma tkn_id error tkn_parentesisde tkn_llaveiz BLOQUE tkn_llaveder 
            {
              Nodo RESULT =null;
		parser.errores.add("autoincremento o autodecremento ausente en bloque for");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FOR",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // FOR ::= tkn_for error tkn_int ASIGN RETURN tkn_puntocoma CONDICION tkn_puntocoma tkn_id ITERADOR tkn_parentesisde tkn_llaveiz BLOQUE tkn_llaveder 
            {
              Nodo RESULT =null;
		parser.errores.add("Parentesis de apertura '(' ausente en bloque for");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FOR",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // FOR ::= tkn_for tkn_parentesisiz ASIGN RETURN tkn_puntocoma CONDICION tkn_puntocoma tkn_id ITERADOR tkn_parentesisde tkn_llaveiz BLOQUE tkn_llaveder 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FOR",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // FOR ::= tkn_for tkn_parentesisiz tkn_int ASIGN RETURN tkn_puntocoma CONDICION tkn_puntocoma tkn_id ITERADOR tkn_parentesisde tkn_llaveiz BLOQUE tkn_llaveder 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Nodo i = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int jleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int jright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo j = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		parser.gramas.add("Funcion FOR reconocida");
                Nodo nodo = new Nodo("FOR",parser.cont);
                parser.cont++;
                nodo.addHijo(i);
                nodo.addHijo(j);
                RESULT=nodo;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FOR",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // ELSE ::= 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ELSE",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // ELSE ::= tkn_else IF 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ELSE",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // ELSE ::= tkn_else tkn_llaveiz BLOQUE tkn_llaveder 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ELSE",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // IF ::= tkn_if tkn_parentesisiz CONDICION error tkn_llaveiz BLOQUE tkn_llaveder ELSE 
            {
              Nodo RESULT =null;
		parser.errores.add("Parentesis de cierre ausente ')' en bloque if");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IF",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // IF ::= tkn_if tkn_parentesisiz CONDICION tkn_parentesisde error BLOQUE tkn_llaveder ELSE 
            {
              Nodo RESULT =null;
		parser.errores.add("Llave de apertura ausente en bloque if");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IF",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // IF ::= tkn_if error CONDICION tkn_parentesisde tkn_llaveiz BLOQUE tkn_llaveder ELSE 
            {
              Nodo RESULT =null;
		parser.errores.add("Parentesis de apertura ausente");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IF",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // IF ::= tkn_if tkn_parentesisiz CONDICION tkn_parentesisde tkn_llaveiz BLOQUE tkn_llaveder 
            {
              Nodo RESULT =null;
		int jleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int jright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo j = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		parser.gramas.add("Funcion if reconocida");
                Nodo nodo = new Nodo("IF",parser.cont);
                parser.cont++;
                nodo.addHijo(j);
                RESULT=nodo;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IF",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // PROTOTIPO ::= error tkn_id tkn_parentesisiz PROTOPARAMS tkn_parentesisde tkn_puntocoma 
            {
              Nodo RESULT =null;
		parser.errores.add("Tipo de dato incorrecto para prototipo\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROTOTIPO",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // PROTOTIPO ::= DECLARACION 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROTOTIPO",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // PROTOTIPO ::= TIPO tkn_id tkn_parentesisiz PROTOPARAMS tkn_parentesisde tkn_puntocoma 
            {
              Nodo RESULT =null;
		
            parser.gramas.add("PROTOTIPO reconocida");
            Nodo nodo = new Nodo("PROTOTIPO",parser.cont);
            parser.cont++;
            parser.raiz=nodo;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROTOTIPO",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // LLAMADO ::= TIPO ASIGN tkn_id tkn_parentesisiz ARGS tkn_parentesisde tkn_puntocoma 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LLAMADO",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // ARGSPARAMS ::= tkn_id 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARGSPARAMS",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // ARGSPARAMS ::= tkn_id tkn_coma ARGSPARAMS 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARGSPARAMS",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // FUNCION ::= TIPO tkn_id tkn_parentesisiz FUNCIONPARAMS tkn_parentesisde tkn_llaveiz BLOQUE tkn_return error tkn_puntocoma tkn_llaveder 
            {
              Nodo RESULT =null;
		parser.errores.add("Tipo de retorno inválido en la funcion\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCION",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // FUNCION ::= TIPO tkn_id error FUNCIONPARAMS tkn_parentesisde tkn_llaveiz BLOQUE tkn_return RETURN tkn_puntocoma tkn_llaveder 
            {
              Nodo RESULT =null;
		parser.errores.add("Parentesis de apertura '(' ausente en la funcion\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCION",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // FUNCION ::= TIPO tkn_id tkn_parentesisiz FUNCIONPARAMS tkn_parentesisde error BLOQUE tkn_return RETURN tkn_puntocoma tkn_llaveder 
            {
              Nodo RESULT =null;
		parser.errores.add("Llave de apertura '{' ausente en la funcion\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCION",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // FUNCION ::= TIPO tkn_id tkn_parentesisiz FUNCIONPARAMS tkn_parentesisde tkn_llaveiz BLOQUE tkn_return RETURN tkn_puntocoma error 
            {
              Nodo RESULT =null;
		parser.errores.add("Llave de cierre '}' ausente en la funcion\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCION",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // FUNCION ::= TIPO tkn_id tkn_parentesisiz FUNCIONPARAMS tkn_parentesisde tkn_llaveiz BLOQUE tkn_return RETURN tkn_puntocoma tkn_llaveder 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCION",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // DECLAPARAM ::= error tkn_id 
            {
              Nodo RESULT =null;
		parser.errores.add("Tipo de dato incorrecto para el parámetro de la función\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLAPARAM",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // DECLAPARAM ::= error tkn_id tkn_coma DECLAPARAM 
            {
              Nodo RESULT =null;
		parser.errores.add("Tipo de dato incorrecto para los parámetros de la función\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLAPARAM",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // DECLAPARAM ::= TIPO tkn_id error DECLAPARAM 
            {
              Nodo RESULT =null;
		parser.errores.add("Se esperaba el simbolo ',' para separar parámetros en la función\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLAPARAM",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // DECLAPARAM ::= TIPO tkn_id 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLAPARAM",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // DECLAPARAM ::= TIPO tkn_id tkn_coma DECLAPARAM 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLAPARAM",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // PARAMS ::= TIPO tkn_id 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMS",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // PARAMS ::= TIPO 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMS",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // PARAMS ::= TIPO tkn_coma PARAMS 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMS",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // PARAMS ::= TIPO tkn_id tkn_coma PARAMS 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMS",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // ARGS ::= 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARGS",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ARGS ::= ARGSPARAMS 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARGS",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // PROTOPARAMS ::= 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROTOPARAMS",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // PROTOPARAMS ::= PARAMS 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROTOPARAMS",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // FUNCIONPARAMS ::= 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCIONPARAMS",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // FUNCIONPARAMS ::= DECLAPARAM 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCIONPARAMS",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // INICIO ::= 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIO",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // INICIO ::= PROTOTIPO INICIO 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIO",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // FUNCIONES ::= 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCIONES",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // FUNCIONES ::= FUNCION FUNCIONES 
            {
              Nodo RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCIONES",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // IDINT ::= 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IDINT",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // IDINT ::= RETURN 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IDINT",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // IDINT ::= ASIGN RETURN tkn_coma IDINT 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IDINT",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // IDINT ::= RETURN tkn_coma IDINT 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IDINT",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // DECLARACION ::= error IDINT tkn_puntocoma 
            {
              Nodo RESULT =null;
		parser.errores.add("Tipo de dato incorrecto para declaración de variables\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // DECLARACION ::= TIPO IDINT tkn_puntocoma 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo i = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int jleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int jright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo j = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // EXPRTERNARIO ::= RETURN 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRTERNARIO",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // EXPRTERNARIO ::= TERNARIO 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRTERNARIO",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // EXPRTERNARIO ::= PRINTF 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRTERNARIO",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // EXPRTERNARIO ::= tkn_cadena 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRTERNARIO",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // TERNARIO ::= CONDICION tkn_ternario EXPRTERNARIO error EXPRTERNARIO tkn_puntocoma error 
            {
              Nodo RESULT =null;
		parser.errores.add("Se esperaba el simbolo ':' expresión condicional\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TERNARIO",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // TERNARIO ::= CONDICION error EXPRTERNARIO tkn_dospuntos EXPRTERNARIO tkn_puntocoma error 
            {
              Nodo RESULT =null;
		parser.errores.add("Se esperaba el simbolo '?' expresión condicional\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TERNARIO",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // TERNARIO ::= CONDICION tkn_ternario EXPRTERNARIO tkn_dospuntos EXPRTERNARIO tkn_puntocoma 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TERNARIO",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // ASIGN ::= tkn_id error 
            {
              Nodo RESULT =null;
		parser.errores.add("Nomenclatura incorrecta de asignación\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGN",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // ASIGN ::= tkn_id tkn_oprel 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGN",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // MAIN ::= tkn_int tkn_main tkn_parentesisiz tkn_parentesisde tkn_llaveiz BLOQUE tkn_return tkn_num tkn_puntocoma error FUNCIONES 
            {
              Nodo RESULT =null;
		parser.errores.add("Punto y coma o llave de cierre ausente en retorno funcion main\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MAIN",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // MAIN ::= tkn_int tkn_main tkn_parentesisiz tkn_parentesisde tkn_llaveiz BLOQUE tkn_return tkn_num error tkn_llaveder FUNCIONES 
            {
              Nodo RESULT =null;
		parser.errores.add("Punto y coma o llave de cierre ausente en retorno funcion main\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MAIN",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // MAIN ::= tkn_int error tkn_parentesisiz tkn_parentesisde tkn_llaveiz BLOQUE tkn_return tkn_num tkn_puntocoma tkn_llaveder FUNCIONES 
            {
              Nodo RESULT =null;
		parser.errores.add("No hay funcion main o no esta escrito la palabra main\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MAIN",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // MAIN ::= tkn_int tkn_main tkn_parentesisiz error tkn_llaveiz BLOQUE tkn_return tkn_num tkn_puntocoma tkn_llaveder FUNCIONES 
            {
              Nodo RESULT =null;
		parser.errores.add("Parentesis de cierre ')' ausente en el main\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MAIN",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // MAIN ::= tkn_int tkn_main tkn_parentesisiz tkn_parentesisde tkn_llaveiz BLOQUE tkn_return tkn_num tkn_puntocoma tkn_llaveder FUNCIONES 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Nodo p = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo d = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            parser.gramas.add("Funcion main reconocida");
            Nodo nodo = new Nodo(id.toString(),parser.cont);
            parser.cont++;
            nodo.addHijo(p);
            parser.raiz=nodo;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MAIN",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // MAINS ::= MAIN 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("MAINS",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // MAINS ::= INICIO 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("MAINS",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= MAINS EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo start_val = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

