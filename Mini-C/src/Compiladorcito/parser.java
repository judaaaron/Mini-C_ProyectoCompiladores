
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Sep 15 09:53:34 CST 2022
//----------------------------------------------------

package Compiladorcito;

import java_cup.runtime.*;
import java.util.ArrayList;
import java.util.*;
import java.io.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Sep 15 09:53:34 CST 2022
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\020\000\002\002\004\000\002\034\003\000\002\042" +
    "\004\000\002\042\004\000\002\020\004\000\002\015\005" +
    "\000\002\046\006\000\002\010\003\000\002\010\003\000" +
    "\002\010\003\000\002\010\003\000\002\045\004\000\002" +
    "\023\005\000\002\023\005\000\002\023\003\000\002\023" +
    "\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\034\000\012\012\015\013\007\035\016\036\013\001" +
    "\002\000\004\002\000\001\002\000\004\002\036\001\002" +
    "\000\012\012\015\013\007\035\016\036\013\001\002\000" +
    "\010\021\ufff8\037\ufff8\043\ufff8\001\002\000\006\022\033" +
    "\040\032\001\002\000\004\020\021\001\002\000\004\037" +
    "\020\001\002\000\010\021\ufff9\037\ufff9\043\ufff9\001\002" +
    "\000\012\012\015\013\007\035\016\036\013\001\002\000" +
    "\010\021\ufff7\037\ufff7\043\ufff7\001\002\000\010\021\ufffa" +
    "\037\ufffa\043\ufffa\001\002\000\004\002\ufffe\001\002\000" +
    "\010\020\ufff6\021\ufff6\043\ufff6\001\002\000\012\012\015" +
    "\013\007\035\016\036\013\001\002\000\006\021\ufff3\043" +
    "\030\001\002\000\004\021\027\001\002\000\010\021\ufff2" +
    "\037\020\043\025\001\002\000\012\012\015\013\007\035" +
    "\016\036\013\001\002\000\004\021\ufff5\001\002\000\006" +
    "\022\ufffb\040\ufffb\001\002\000\012\012\015\013\007\035" +
    "\016\036\013\001\002\000\004\021\ufff4\001\002\000\012" +
    "\012\ufffd\013\ufffd\035\ufffd\036\ufffd\001\002\000\004\023" +
    "\034\001\002\000\012\012\ufffc\013\ufffc\035\ufffc\036\ufffc" +
    "\001\002\000\004\002\uffff\001\002\000\004\002\001\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\034\000\020\010\011\015\013\020\005\034\004\042" +
    "\003\045\010\046\007\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\010\011\015\013\020\005\042\034\045" +
    "\010\046\007\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\010\011\015\013\020\005\042\016\045\010\046\007" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\010\023\023\022\045\021" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\010\023\023\025\045\021\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\010\023\023\030\045" +
    "\021\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    ArrayList gramas = new ArrayList();
    public Nodo raiz;
    public int cont = 0;
    public int maximo(){
    int a=5;
    return a;
}
    ArrayList errores=new ArrayList();
    public Symbol s;
    @Override
    public void syntax_error (Symbol s){
        if(s.left==-1){
        }else{
                errores.add("Syntax error en la línea: " + (s.left) + " , columna: " +(s.right)+ " con el símbolo = "+(s.value));
    }
}
    @Override
    public void unrecovered_syntax_error(Symbol s){
    if(s.left==-1){
    }else{
        errores.add("Error desconocido, por favor revise la linea: " + (s.left ) + " y columna:  " + (s.right )+ "Con simbolo: "+s.value);
    }    
    }
    public Symbol getS(){
        return this.s;
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // PARAMS ::= TIPO 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMS",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // PARAMS ::= DECLR 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMS",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // PARAMS ::= DECLR tkn_coma PARAMS 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMS",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // PARAMS ::= TIPO tkn_coma PARAMS 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMS",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // DECLR ::= TIPO tkn_id 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLR",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // TIPO ::= tkn_intp 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // TIPO ::= tkn_charp 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // TIPO ::= tkn_char 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // TIPO ::= tkn_int 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // PROTOFUN ::= DECLR tkn_parentesisiz PARAMS tkn_parentesisde 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROTOFUN",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // FUNCION ::= PROTOFUN tkn_llaveiz tkn_llaveder 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCION",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // PROTOTIPO ::= PROTOFUN tkn_puntocoma 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROTOTIPO",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // PROGRAM ::= FUNCION PROGRAM 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROGRAM",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // PROGRAM ::= PROTOTIPO PROGRAM 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROGRAM",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= PROGRAM 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIO",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo start_val = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

