
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Sep 08 11:15:19 CST 2022
//----------------------------------------------------

package Compiladorcito;

import java_cup.runtime.*;
import java.util.ArrayList;
import java.util.*;
import java.io.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Sep 08 11:15:19 CST 2022
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\120\000\002\002\004\000\002\031\015\000\002\050" +
    "\004\000\002\006\005\000\002\017\005\000\002\017\006" +
    "\000\002\017\003\000\002\033\004\000\002\033\002\000" +
    "\002\002\004\000\002\002\003\000\002\026\003\000\002" +
    "\026\002\000\002\032\003\000\002\032\002\000\002\042" +
    "\003\000\002\042\002\000\002\035\006\000\002\035\005" +
    "\000\002\035\003\000\002\035\004\000\002\027\006\000" +
    "\002\027\004\000\002\025\015\000\002\041\005\000\002" +
    "\041\003\000\002\037\011\000\002\030\010\000\002\030" +
    "\003\000\002\004\012\000\002\012\006\000\002\012\004" +
    "\000\002\012\002\000\002\005\020\000\002\003\011\000" +
    "\002\007\004\000\002\007\004\000\002\007\004\000\002" +
    "\007\004\000\002\007\004\000\002\007\004\000\002\007" +
    "\004\000\002\007\004\000\002\007\004\000\002\007\002" +
    "\000\002\010\005\000\002\010\005\000\002\010\007\000" +
    "\002\010\007\000\002\010\005\000\002\010\003\000\002" +
    "\013\005\000\002\016\003\000\002\016\003\000\002\016" +
    "\003\000\002\016\003\000\002\045\006\000\002\045\005" +
    "\000\002\046\005\000\002\046\005\000\002\046\005\000" +
    "\002\046\005\000\002\046\003\000\002\020\011\000\002" +
    "\020\007\000\002\034\003\000\002\034\003\000\002\034" +
    "\003\000\002\051\003\000\002\051\003\000\002\051\005" +
    "\000\002\022\010\000\002\043\003\000\002\043\003\000" +
    "\002\043\003\000\002\043\003\000\002\043\007\000\002" +
    "\043\003\000\002\023\005\000\002\023\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\266\000\012\012\013\013\010\035\014\036\012\001" +
    "\002\000\004\002\ufff7\001\002\000\012\012\uffe5\013\uffe5" +
    "\035\uffe5\036\uffe5\001\002\000\004\002\270\001\002\000" +
    "\012\012\013\013\010\035\014\036\012\001\002\000\014" +
    "\021\uffcb\037\uffcb\042\uffcb\043\uffcb\053\uffcb\001\002\000" +
    "\010\037\253\042\054\053\046\001\002\000\014\021\uffcd" +
    "\037\uffcd\042\uffcd\043\uffcd\053\uffcd\001\002\000\014\021" +
    "\uffcc\037\uffcc\042\uffcc\043\uffcc\053\uffcc\001\002\000\012" +
    "\011\015\037\uffca\042\uffca\053\uffca\001\002\000\004\020" +
    "\016\001\002\000\004\021\017\001\002\000\004\022\020" +
    "\001\002\000\026\012\013\013\010\015\037\016\041\026" +
    "\032\027\uffd5\030\022\035\034\036\012\037\040\001\002" +
    "\000\030\012\013\013\010\015\037\016\041\023\uffd5\026" +
    "\032\027\uffd5\030\022\035\034\036\012\037\040\001\002" +
    "\000\004\020\242\001\002\000\030\012\013\013\010\015" +
    "\037\016\041\023\uffd5\026\032\027\uffd5\030\022\035\034" +
    "\036\012\037\040\001\002\000\030\012\013\013\010\015" +
    "\037\016\041\023\uffd5\026\032\027\uffd5\030\022\035\034" +
    "\036\012\037\040\001\002\000\030\012\013\013\010\015" +
    "\037\016\041\023\uffd5\026\032\027\uffd5\030\022\035\034" +
    "\036\012\037\040\001\002\000\030\012\013\013\010\015" +
    "\037\016\041\023\uffd5\026\032\027\uffd5\030\022\035\034" +
    "\036\012\037\040\001\002\000\004\027\207\001\002\000" +
    "\012\020\057\037\052\042\054\053\046\001\002\000\030" +
    "\012\013\013\010\015\037\016\041\023\uffd5\026\032\027" +
    "\uffd5\030\022\035\034\036\012\037\040\001\002\000\004" +
    "\020\161\001\002\000\010\037\135\042\054\053\046\001" +
    "\002\000\014\021\uffca\037\uffca\042\uffca\043\uffca\053\uffca" +
    "\001\002\000\030\012\013\013\010\015\037\016\041\023" +
    "\uffd5\026\032\027\uffd5\030\022\035\034\036\012\037\040" +
    "\001\002\000\030\012\013\013\010\015\037\016\041\023" +
    "\uffd5\026\032\027\uffd5\030\022\035\034\036\012\037\040" +
    "\001\002\000\004\020\114\001\002\000\010\010\111\032" +
    "\110\033\107\001\002\000\004\020\044\001\002\000\030" +
    "\012\013\013\010\015\037\016\041\023\uffd5\026\032\027" +
    "\uffd5\030\022\035\034\036\012\037\040\001\002\000\006" +
    "\023\uffdd\027\uffdd\001\002\000\012\020\053\037\052\042" +
    "\054\053\046\001\002\000\012\021\uffcf\024\104\025\103" +
    "\040\uffcf\001\002\000\024\004\uffbe\005\uffbe\007\uffbe\010" +
    "\uffbe\021\uffbe\024\uffbe\025\uffbe\040\uffbe\043\uffbe\001\002" +
    "\000\012\004\064\005\062\007\061\010\070\001\002\000" +
    "\004\021\077\001\002\000\022\004\uffc3\005\uffc3\007\uffc3" +
    "\010\uffc3\021\uffc3\024\uffc3\025\uffc3\040\uffc3\001\002\000" +
    "\024\004\uffc0\005\uffc0\007\uffc0\010\uffc0\021\uffc0\024\uffc0" +
    "\025\uffc0\040\uffc0\043\uffc0\001\002\000\012\020\057\037" +
    "\052\042\054\053\046\001\002\000\024\004\uffbf\005\uffbf" +
    "\007\uffbf\010\uffbf\021\uffbf\024\uffbf\025\uffbf\040\uffbf\043" +
    "\uffbf\001\002\000\004\021\072\001\002\000\014\004\064" +
    "\005\062\007\061\010\070\021\063\001\002\000\012\020" +
    "\057\037\052\042\054\053\046\001\002\000\012\004\064" +
    "\005\062\007\061\021\063\001\002\000\012\020\057\037" +
    "\052\042\054\053\046\001\002\000\012\020\057\037\052" +
    "\042\054\053\046\001\002\000\022\004\uffc4\005\uffc4\007" +
    "\uffc4\010\uffc4\021\uffc4\024\uffc4\025\uffc4\040\uffc4\001\002" +
    "\000\012\020\057\037\052\042\054\053\046\001\002\000" +
    "\022\004\uffc7\005\062\007\061\010\uffc7\021\uffc7\024\uffc7" +
    "\025\uffc7\040\uffc7\001\002\000\022\004\uffc6\005\uffc6\007" +
    "\uffc6\010\uffc6\021\uffc6\024\uffc6\025\uffc6\040\uffc6\001\002" +
    "\000\022\004\uffc5\005\uffc5\007\uffc5\010\uffc5\021\uffc5\024" +
    "\uffc5\025\uffc5\040\uffc5\001\002\000\012\020\057\037\052" +
    "\042\054\053\046\001\002\000\020\004\064\005\062\007" +
    "\061\021\uffce\024\uffce\025\uffce\040\uffce\001\002\000\012" +
    "\021\uffd0\024\074\025\073\040\uffd0\001\002\000\012\020" +
    "\053\037\052\042\054\053\046\001\002\000\012\020\053" +
    "\037\052\042\054\053\046\001\002\000\006\021\uffd2\040" +
    "\uffd2\001\002\000\006\021\uffd1\040\uffd1\001\002\000\004" +
    "\022\100\001\002\000\026\012\013\013\010\015\037\016" +
    "\041\023\uffd5\026\032\030\022\035\034\036\012\037\040" +
    "\001\002\000\004\023\102\001\002\000\030\012\uffdf\013" +
    "\uffdf\015\uffdf\016\uffdf\023\uffdf\026\uffdf\027\uffdf\030\uffdf" +
    "\035\uffdf\036\uffdf\037\uffdf\001\002\000\012\020\053\037" +
    "\052\042\054\053\046\001\002\000\012\020\053\037\052" +
    "\042\054\053\046\001\002\000\006\021\uffd4\040\uffd4\001" +
    "\002\000\006\021\uffd3\040\uffd3\001\002\000\004\040\113" +
    "\001\002\000\004\040\112\001\002\000\012\020\uffff\037" +
    "\uffff\042\uffff\053\uffff\001\002\000\030\012\uffb3\013\uffb3" +
    "\015\uffb3\016\uffb3\023\uffb3\026\uffb3\027\uffb3\030\uffb3\035" +
    "\uffb3\036\uffb3\037\uffb3\001\002\000\030\012\uffb2\013\uffb2" +
    "\015\uffb2\016\uffb2\023\uffb2\026\uffb2\027\uffb2\030\uffb2\035" +
    "\uffb2\036\uffb2\037\uffb2\001\002\000\012\020\053\037\052" +
    "\042\054\053\046\001\002\000\004\021\116\001\002\000" +
    "\004\022\117\001\002\000\026\012\013\013\010\015\037" +
    "\016\041\023\uffd5\026\032\030\022\035\034\036\012\037" +
    "\040\001\002\000\004\023\121\001\002\000\032\012\uffe1" +
    "\013\uffe1\015\uffe1\016\uffe1\017\123\023\uffe1\026\uffe1\027" +
    "\uffe1\030\uffe1\035\uffe1\036\uffe1\037\uffe1\001\002\000\030" +
    "\012\uffe4\013\uffe4\015\uffe4\016\uffe4\023\uffe4\026\uffe4\027" +
    "\uffe4\030\uffe4\035\uffe4\036\uffe4\037\uffe4\001\002\000\006" +
    "\015\037\022\125\001\002\000\030\012\uffe2\013\uffe2\015" +
    "\uffe2\016\uffe2\023\uffe2\026\uffe2\027\uffe2\030\uffe2\035\uffe2" +
    "\036\uffe2\037\uffe2\001\002\000\026\012\013\013\010\015" +
    "\037\016\041\023\uffd5\026\032\030\022\035\034\036\012" +
    "\037\040\001\002\000\004\023\127\001\002\000\030\012" +
    "\uffe3\013\uffe3\015\uffe3\016\uffe3\023\uffe3\026\uffe3\027\uffe3" +
    "\030\uffe3\035\uffe3\036\uffe3\037\uffe3\001\002\000\006\023" +
    "\uffd7\027\uffd7\001\002\000\006\023\uffd8\027\uffd8\001\002" +
    "\000\012\020\057\037\147\042\054\053\046\001\002\000" +
    "\004\040\144\001\002\000\006\040\ufffb\043\136\001\002" +
    "\000\010\010\111\040\uffc0\043\uffc0\001\002\000\010\037" +
    "\135\042\054\053\046\001\002\000\010\037\052\042\054" +
    "\053\046\001\002\000\004\040\ufffd\001\002\000\004\043" +
    "\142\001\002\000\010\037\135\042\054\053\046\001\002" +
    "\000\004\040\ufffc\001\002\000\030\012\ufffe\013\ufffe\015" +
    "\ufffe\016\ufffe\023\ufffe\026\ufffe\027\ufffe\030\ufffe\035\ufffe" +
    "\036\ufffe\037\ufffe\001\002\000\012\004\064\005\062\007" +
    "\061\040\160\001\002\000\014\004\uffc3\005\uffc3\007\uffc3" +
    "\040\uffc3\043\142\001\002\000\016\004\uffc0\005\uffc0\007" +
    "\uffc0\020\150\040\uffc0\043\uffc0\001\002\000\006\021\ufff1" +
    "\037\152\001\002\000\004\021\ufff2\001\002\000\006\021" +
    "\uffe8\043\156\001\002\000\004\021\154\001\002\000\004" +
    "\040\155\001\002\000\030\012\uffe7\013\uffe7\015\uffe7\016" +
    "\uffe7\023\uffe7\026\uffe7\027\uffe7\030\uffe7\035\uffe7\036\uffe7" +
    "\037\uffe7\001\002\000\004\037\152\001\002\000\004\021" +
    "\uffe9\001\002\000\030\012\uffc9\013\uffc9\015\uffc9\016\uffc9" +
    "\023\uffc9\026\uffc9\027\uffc9\030\uffc9\035\uffc9\036\uffc9\037" +
    "\uffc9\001\002\000\004\035\162\001\002\000\004\037\164" +
    "\001\002\000\010\037\052\042\054\053\046\001\002\000" +
    "\004\010\111\001\002\000\004\040\166\001\002\000\012" +
    "\020\053\037\052\042\054\053\046\001\002\000\004\040" +
    "\170\001\002\000\004\037\171\001\002\000\010\004\174" +
    "\032\173\033\172\001\002\000\004\021\uffbc\001\002\000" +
    "\004\021\uffbd\001\002\000\004\010\202\001\002\000\004" +
    "\021\176\001\002\000\004\022\177\001\002\000\026\012" +
    "\013\013\010\015\037\016\041\023\uffd5\026\032\030\022" +
    "\035\034\036\012\037\040\001\002\000\004\023\201\001" +
    "\002\000\030\012\uffe0\013\uffe0\015\uffe0\016\uffe0\023\uffe0" +
    "\026\uffe0\027\uffe0\030\uffe0\035\uffe0\036\uffe0\037\uffe0\001" +
    "\002\000\010\037\052\042\054\053\046\001\002\000\004" +
    "\021\uffbb\001\002\000\006\023\uffda\027\uffda\001\002\000" +
    "\012\004\064\005\062\007\061\040\206\001\002\000\030" +
    "\012\uffc8\013\uffc8\015\uffc8\016\uffc8\023\uffc8\026\uffc8\027" +
    "\uffc8\030\uffc8\035\uffc8\036\uffc8\037\uffc8\001\002\000\004" +
    "\042\210\001\002\000\004\040\211\001\002\000\004\023" +
    "\212\001\002\000\014\002\ufff9\012\013\013\010\035\034" +
    "\036\012\001\002\000\014\002\ufff9\012\013\013\010\035" +
    "\034\036\012\001\002\000\004\002\000\001\002\000\004" +
    "\037\216\001\002\000\004\020\217\001\002\000\014\012" +
    "\013\013\010\021\ufff5\035\034\036\012\001\002\000\004" +
    "\021\ufff6\001\002\000\004\021\226\001\002\000\004\037" +
    "\223\001\002\000\006\021\uffeb\043\224\001\002\000\012" +
    "\012\013\013\010\035\034\036\012\001\002\000\004\021" +
    "\uffec\001\002\000\004\022\227\001\002\000\026\012\013" +
    "\013\010\015\037\016\041\026\032\027\uffd5\030\022\035" +
    "\034\036\012\037\040\001\002\000\004\027\231\001\002" +
    "\000\010\037\052\042\054\053\046\001\002\000\004\040" +
    "\233\001\002\000\004\023\234\001\002\000\014\002\uffea" +
    "\012\uffea\013\uffea\035\uffea\036\uffea\001\002\000\004\002" +
    "\ufffa\001\002\000\006\023\uffdc\027\uffdc\001\002\000\006" +
    "\023\uffdb\027\uffdb\001\002\000\006\023\uffd9\027\uffd9\001" +
    "\002\000\006\023\uffde\027\uffde\001\002\000\004\052\243" +
    "\001\002\000\006\021\245\043\244\001\002\000\004\037" +
    "\247\001\002\000\004\040\246\001\002\000\030\012\uffc1" +
    "\013\uffc1\015\uffc1\016\uffc1\023\uffc1\026\uffc1\027\uffc1\030" +
    "\uffc1\035\uffc1\036\uffc1\037\uffc1\001\002\000\004\021\250" +
    "\001\002\000\004\040\251\001\002\000\030\012\uffc2\013" +
    "\uffc2\015\uffc2\016\uffc2\023\uffc2\026\uffc2\027\uffc2\030\uffc2" +
    "\035\uffc2\036\uffc2\037\uffc2\001\002\000\006\023\uffd6\027" +
    "\uffd6\001\002\000\012\010\111\020\254\040\uffc0\043\uffc0" +
    "\001\002\000\014\012\013\013\010\021\ufff3\035\034\036" +
    "\012\001\002\000\004\021\265\001\002\000\004\021\ufff4" +
    "\001\002\000\010\021\uffee\037\261\043\260\001\002\000" +
    "\012\012\013\013\010\035\034\036\012\001\002\000\006" +
    "\021\uffed\043\262\001\002\000\012\012\013\013\010\035" +
    "\034\036\012\001\002\000\004\021\ufff0\001\002\000\004" +
    "\021\uffef\001\002\000\004\040\266\001\002\000\012\012" +
    "\uffe6\013\uffe6\035\uffe6\036\uffe6\001\002\000\004\002\ufff8" +
    "\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\266\000\014\002\005\006\004\016\010\030\006\031" +
    "\003\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\002\266\006\004\016\010\030\006\031" +
    "\003\001\001\000\002\001\001\000\010\017\132\034\133" +
    "\050\136\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\032\003\022\004\025\005\041\006\024\007" +
    "\026\016\032\020\030\023\020\024\023\037\035\045\034" +
    "\050\027\001\001\000\032\003\022\004\025\005\041\006" +
    "\024\007\251\016\032\020\030\023\020\024\023\037\035" +
    "\045\034\050\027\001\001\000\002\001\001\000\032\003" +
    "\022\004\025\005\041\006\024\007\240\016\032\020\030" +
    "\023\020\024\023\037\035\045\034\050\027\001\001\000" +
    "\032\003\022\004\025\005\041\006\024\007\237\016\032" +
    "\020\030\023\020\024\023\037\035\045\034\050\027\001" +
    "\001\000\032\003\022\004\025\005\041\006\024\007\236" +
    "\016\032\020\030\023\020\024\023\037\035\045\034\050" +
    "\027\001\001\000\032\003\022\004\025\005\041\006\024" +
    "\007\235\016\032\020\030\023\020\024\023\037\035\045" +
    "\034\050\027\001\001\000\002\001\001\000\006\034\050" +
    "\046\204\001\001\000\032\003\022\004\025\005\041\006" +
    "\024\007\203\016\032\020\030\023\020\024\023\037\035" +
    "\045\034\050\027\001\001\000\002\001\001\000\010\017" +
    "\132\034\133\050\131\001\001\000\002\001\001\000\032" +
    "\003\022\004\025\005\041\006\024\007\130\016\032\020" +
    "\030\023\020\024\023\037\035\045\034\050\027\001\001" +
    "\000\032\003\022\004\025\005\041\006\024\007\127\016" +
    "\032\020\030\023\020\024\023\037\035\045\034\050\027" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\032\003\022\004\025\005\041\006\024\007\042" +
    "\016\032\020\030\023\020\024\023\037\035\045\034\050" +
    "\027\001\001\000\002\001\001\000\012\010\047\013\044" +
    "\034\050\046\046\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\013\054\034\050\046\055\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\034\050\046\057\001\001\000\002\001\001\000" +
    "\006\034\050\046\066\001\001\000\006\034\050\046\065" +
    "\001\001\000\002\001\001\000\006\034\050\046\064\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\034\050\046\070\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\010\075\013\044\034\050\046\046" +
    "\001\001\000\012\010\074\013\044\034\050\046\046\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\032\003\022\004\025\005\041\006\024\007\100\016" +
    "\032\020\030\023\020\024\023\037\035\045\034\050\027" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\010" +
    "\105\013\044\034\050\046\046\001\001\000\012\010\104" +
    "\013\044\034\050\046\046\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\010" +
    "\114\013\044\034\050\046\046\001\001\000\002\001\001" +
    "\000\002\001\001\000\032\003\022\004\025\005\041\006" +
    "\024\007\117\016\032\020\030\023\020\024\023\037\035" +
    "\045\034\050\027\001\001\000\002\001\001\000\004\012" +
    "\121\001\001\000\002\001\001\000\004\004\123\001\001" +
    "\000\002\001\001\000\032\003\022\004\025\005\041\006" +
    "\024\007\125\016\032\020\030\023\020\024\023\037\035" +
    "\045\034\050\027\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\034\145" +
    "\046\144\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\017\137\034\133\050\136\001\001" +
    "\000\004\034\140\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\017\142\034\133\050\136\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\041\150\042\152\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\041\156\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\050\162\001\001\000\004\034\164\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\010\166\013\044\034" +
    "\050\046\046\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\051\174\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\032\003\022\004\025\005\041\006\024\007\177\016" +
    "\032\020\030\023\020\024\023\037\035\045\034\050\027" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\034" +
    "\202\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\016\214\025\212\033\213" +
    "\001\001\000\010\016\214\025\212\033\234\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\016\221\026\220\027\217\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\016\221\027\224\001\001\000\002\001\001\000\002\001" +
    "\001\000\032\003\022\004\025\005\041\006\024\007\227" +
    "\016\032\020\030\023\020\024\023\037\035\045\034\050" +
    "\027\001\001\000\002\001\001\000\004\034\231\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\016\256\032\254" +
    "\035\255\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\016\256\035\263\001\001\000\002" +
    "\001\001\000\006\016\256\035\262\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



     ArrayList gramas = new ArrayList();
    public int cont = 0;
    public int maximo(){
    int a=5;
    return a;
}
    ArrayList errores=new ArrayList();
    public Symbol s;
    @Override
    public void syntax_error (Symbol s){
        if(s.left==-1){
        }else{
                errores.add("Syntax error en la línea: " + (s.left) + " , columna: " +(s.right)+ " con el símbolo = "+(s.value));
    }
}
    @Override
    public void unrecovered_syntax_error(Symbol s){
    if(s.left==-1){
    }else{
        errores.add("Error desconocido, por favor revise la linea: " + (s.left ) + " y columna:  " + (s.right )+ "Con simbolo: "+s.value);
    }    
    }
    public Symbol getS(){
        return this.s;
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // CONTADOR ::= tkn_id tkn_decrement tkn_puntocoma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTADOR",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // CONTADOR ::= tkn_id tkn_increment tkn_puntocoma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTADOR",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // EXPRTERNARIO ::= TERNARIO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRTERNARIO",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // EXPRTERNARIO ::= tkn_id tkn_parentesisiz ARGS tkn_parentesisde tkn_puntocoma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRTERNARIO",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // EXPRTERNARIO ::= VALOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRTERNARIO",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // EXPRTERNARIO ::= tkn_caracter 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRTERNARIO",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // EXPRTERNARIO ::= PRINTF 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRTERNARIO",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // EXPRTERNARIO ::= tkn_cadena 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRTERNARIO",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // TERNARIO ::= CONDICION tkn_ternario EXPRTERNARIO tkn_dospuntos EXPRTERNARIO tkn_puntocoma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TERNARIO",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // ITERADOR ::= tkn_opadicion tkn_oprel RETURN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ITERADOR",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // ITERADOR ::= tkn_decrement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ITERADOR",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // ITERADOR ::= tkn_increment 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ITERADOR",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // RETURN ::= tkn_caracter 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("RETURN",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // RETURN ::= tkn_num 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("RETURN",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // RETURN ::= tkn_id 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("RETURN",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // PRINTF ::= tkn_printf tkn_parentesisiz tkn_cadena tkn_parentesisde tkn_puntocoma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRINTF",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // PRINTF ::= tkn_printf tkn_parentesisiz tkn_cadena tkn_coma tkn_id tkn_parentesisde tkn_puntocoma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRINTF",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // EXPR ::= RETURN 
            {
              Object RESULT =null;
		System.out.println("DENTRO DE expr");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPR",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // EXPR ::= tkn_parentesisiz EXPR tkn_parentesisde 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPR",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // EXPR ::= EXPR tkn_opmod EXPR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPR",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // EXPR ::= EXPR tkn_opmulti EXPR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPR",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // EXPR ::= EXPR tkn_opadicion EXPR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPR",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // EXPRFIN ::= ASIGN EXPR tkn_puntocoma 
            {
              Object RESULT =null;
		System.out.println("DENTRO DE exprfins");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRFIN",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // EXPRFIN ::= TIPO ASIGN EXPR tkn_puntocoma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRFIN",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // TIPO ::= tkn_int 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // TIPO ::= tkn_charp 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // TIPO ::= tkn_intp 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // TIPO ::= tkn_char 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // CONDICIONP ::= EXPR tkn_oprel EXPR 
            {
              Object RESULT =null;
		System.out.println("DENTRO DE condicionp");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICIONP",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // CONDICION ::= CONDICIONP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICION",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // CONDICION ::= tkn_parentesisiz CONDICIONP tkn_parentesisde 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICION",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // CONDICION ::= tkn_parentesisiz CONDICIONP tkn_parentesisde tkn_or CONDICION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICION",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // CONDICION ::= tkn_parentesisiz CONDICIONP tkn_parentesisde tkn_and CONDICION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICION",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // CONDICION ::= CONDICIONP tkn_or CONDICION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICION",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // CONDICION ::= CONDICIONP tkn_and CONDICION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICION",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // BLOQUE ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // BLOQUE ::= CONTADOR BLOQUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // BLOQUE ::= LLAMADO BLOQUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // BLOQUE ::= EXPRFIN BLOQUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // BLOQUE ::= SCANF BLOQUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // BLOQUE ::= PRINTF BLOQUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // BLOQUE ::= DECLARACION BLOQUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // BLOQUE ::= IF BLOQUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // BLOQUE ::= FOR BLOQUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // BLOQUE ::= WHILE BLOQUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // WHILE ::= tkn_while tkn_parentesisiz CONDICION tkn_parentesisde tkn_llaveiz BLOQUE tkn_llaveder 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("WHILE",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // FOR ::= tkn_for tkn_parentesisiz tkn_int ASIGN RETURN tkn_puntocoma CONDICION tkn_puntocoma tkn_id ITERADOR tkn_parentesisde tkn_llaveiz BLOQUE tkn_llaveder 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FOR",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // ELSE ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ELSE",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ELSE ::= tkn_else IF 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ELSE",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // ELSE ::= tkn_else tkn_llaveiz BLOQUE tkn_llaveder 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ELSE",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // IF ::= tkn_if tkn_parentesisiz CONDICION tkn_parentesisde tkn_llaveiz BLOQUE tkn_llaveder ELSE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IF",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // PROTOTIPO ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROTOTIPO",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // PROTOTIPO ::= TIPO tkn_id tkn_parentesisiz PROTOPARAMS tkn_parentesisde tkn_puntocoma 
            {
              Object RESULT =null;
		System.out.println("DENTRO DE UN PROTOTIPO");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROTOTIPO",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // LLAMADO ::= TIPO ASIGN tkn_id tkn_parentesisiz ARGS tkn_parentesisde tkn_puntocoma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LLAMADO",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // ARGSPARAMS ::= tkn_id 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARGSPARAMS",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // ARGSPARAMS ::= tkn_id tkn_coma ARGSPARAMS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARGSPARAMS",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // FUNCION ::= TIPO tkn_id tkn_parentesisiz FUNCIONPARAMS tkn_parentesisde tkn_llaveiz BLOQUE tkn_return RETURN tkn_puntocoma tkn_llaveder 
            {
              Object RESULT =null;
		System.out.println("DENTRO DE UNA FUNCION");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCION",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // DECLAPARAM ::= TIPO tkn_id 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLAPARAM",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // DECLAPARAM ::= TIPO tkn_id tkn_coma DECLAPARAM 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLAPARAM",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // PARAMS ::= TIPO tkn_id 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMS",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // PARAMS ::= TIPO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMS",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // PARAMS ::= TIPO tkn_coma PARAMS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMS",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // PARAMS ::= TIPO tkn_id tkn_coma PARAMS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMS",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // ARGS ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARGS",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // ARGS ::= ARGSPARAMS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARGS",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // PROTOPARAMS ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROTOPARAMS",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // PROTOPARAMS ::= PARAMS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROTOPARAMS",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // FUNCIONPARAMS ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCIONPARAMS",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // FUNCIONPARAMS ::= DECLAPARAM 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCIONPARAMS",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // INICIO ::= MAIN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // INICIO ::= PROTOTIPO INICIO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // FUNCIONES ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCIONES",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // FUNCIONES ::= FUNCION FUNCIONES 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCIONES",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // IDINT ::= RETURN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IDINT",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // IDINT ::= ASIGN RETURN tkn_coma IDINT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IDINT",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // IDINT ::= RETURN tkn_coma IDINT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IDINT",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // DECLARACION ::= TIPO IDINT tkn_puntocoma 
            {
              Object RESULT =null;
		System.out.println("DENTRO DE UNA DECLARACION");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // ASIGN ::= tkn_id tkn_oprel 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGN",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // MAIN ::= tkn_int tkn_main tkn_parentesisiz tkn_parentesisde tkn_llaveiz BLOQUE tkn_return tkn_num tkn_puntocoma tkn_llaveder FUNCIONES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("MAIN",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

