
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Sep 15 17:08:13 CST 2022
//----------------------------------------------------

package Compiladorcito;

import java_cup.runtime.*;
import java.util.ArrayList;
import java.util.*;
import java.io.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Sep 15 17:08:13 CST 2022
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\154\000\002\002\004\000\002\025\003\000\002\030" +
    "\004\000\002\030\004\000\002\030\004\000\002\014\004" +
    "\000\002\013\011\000\002\013\014\000\002\013\011\000" +
    "\002\013\011\000\002\032\006\000\002\032\006\000\002" +
    "\031\004\000\002\031\004\000\002\023\005\000\002\023" +
    "\004\000\002\023\005\000\002\024\007\000\002\024\005" +
    "\000\002\024\005\000\002\024\005\000\002\024\005\000" +
    "\002\024\007\000\002\024\005\000\002\024\005\000\002" +
    "\024\003\000\002\024\010\000\002\024\010\000\002\024" +
    "\010\000\002\024\010\000\002\021\004\000\002\021\004" +
    "\000\002\015\005\000\002\015\005\000\002\015\003\000" +
    "\002\015\003\000\002\015\002\000\002\003\012\000\002" +
    "\003\012\000\002\003\012\000\002\003\012\000\002\006" +
    "\006\000\002\006\004\000\002\006\006\000\002\006\002" +
    "\000\002\004\017\000\002\004\017\000\002\004\017\000" +
    "\002\004\017\000\002\004\017\000\002\002\011\000\002" +
    "\002\011\000\002\002\011\000\002\002\011\000\002\027" +
    "\011\000\002\027\007\000\002\027\011\000\002\027\011" +
    "\000\002\027\011\000\002\027\011\000\002\027\011\000" +
    "\002\027\011\000\002\012\012\000\002\012\012\000\002" +
    "\012\012\000\002\012\012\000\002\012\012\000\002\012" +
    "\012\000\002\026\004\000\002\026\004\000\002\026\004" +
    "\000\002\026\004\000\002\026\004\000\002\026\004\000" +
    "\002\026\004\000\002\026\002\000\002\022\003\000\002" +
    "\022\003\000\002\022\005\000\002\022\005\000\002\005" +
    "\005\000\002\005\005\000\002\005\007\000\002\005\007" +
    "\000\002\005\005\000\002\005\003\000\002\005\003\000" +
    "\002\005\005\000\002\007\005\000\002\010\003\000\002" +
    "\010\003\000\002\010\003\000\002\010\003\000\002\010" +
    "\003\000\002\020\005\000\002\020\005\000\002\020\005" +
    "\000\002\020\005\000\002\020\003\000\002\020\003\000" +
    "\002\020\003\000\002\020\003\000\002\017\003\000\002" +
    "\017\002\000\002\016\005\000\002\016\003\000\002\011" +
    "\005\000\002\011\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u013b\000\020\003\020\012\022\013\012\014\004\035" +
    "\023\036\016\037\007\001\002\000\012\003\uffa4\021\uffa4" +
    "\037\uffa4\043\uffa4\001\002\000\004\002\000\001\002\000" +
    "\004\040\u013d\001\002\000\010\003\232\010\177\043\171" +
    "\001\002\000\004\002\u013c\001\002\000\020\003\020\012" +
    "\022\013\012\014\004\035\023\036\016\037\007\001\002" +
    "\000\012\003\uffa6\021\uffa6\037\uffa6\043\uffa6\001\002\000" +
    "\020\003\020\012\022\013\012\014\004\035\023\036\016" +
    "\037\007\001\002\000\006\022\u0131\040\u0130\001\002\000" +
    "\014\003\u0124\010\357\020\u0125\040\uffe8\043\356\001\002" +
    "\000\012\003\uffa8\021\uffa8\037\uffa8\043\uffa8\001\002\000" +
    "\004\037\u0123\001\002\000\006\037\220\040\u0122\001\002" +
    "\000\020\003\020\012\022\013\012\014\004\035\023\036" +
    "\016\037\007\001\002\000\012\003\uffa7\021\uffa7\037\uffa7" +
    "\043\uffa7\001\002\000\006\011\024\037\uffa5\001\002\000" +
    "\004\020\025\001\002\000\004\021\026\001\002\000\004" +
    "\022\027\001\002\000\034\003\020\012\022\013\012\014" +
    "\004\015\043\016\045\026\041\027\uffb6\030\031\031\046" +
    "\035\042\036\016\037\044\001\002\000\036\003\020\012" +
    "\022\013\012\014\004\015\043\016\045\023\uffb6\026\041" +
    "\027\uffb6\030\031\031\046\035\042\036\016\037\044\001" +
    "\002\000\006\003\u0103\020\u0104\001\002\000\036\003\020" +
    "\012\022\013\012\014\004\015\043\016\045\023\uffb6\026" +
    "\041\027\uffb6\030\031\031\046\035\042\036\016\037\044" +
    "\001\002\000\036\003\020\012\022\013\012\014\004\015" +
    "\043\016\045\023\uffb6\026\041\027\uffb6\030\031\031\046" +
    "\035\042\036\016\037\044\001\002\000\036\003\020\012" +
    "\022\013\012\014\004\015\043\016\045\023\uffb6\026\041" +
    "\027\uffb6\030\031\031\046\035\042\036\016\037\044\001" +
    "\002\000\004\027\374\001\002\000\036\003\020\012\022" +
    "\013\012\014\004\015\043\016\045\023\uffb6\026\041\027" +
    "\uffb6\030\031\031\046\035\042\036\016\037\044\001\002" +
    "\000\036\003\020\012\022\013\012\014\004\015\043\016" +
    "\045\023\uffb6\026\041\027\uffb6\030\031\031\046\035\042" +
    "\036\016\037\044\001\002\000\010\010\357\040\uffe8\043" +
    "\356\001\002\000\006\003\273\020\274\001\002\000\012" +
    "\003\uffa5\021\uffa5\037\uffa5\043\uffa5\001\002\000\006\003" +
    "\234\020\235\001\002\000\020\003\173\004\176\005\174" +
    "\010\177\032\175\033\172\043\171\001\002\000\006\003" +
    "\106\020\107\001\002\000\006\003\051\020\052\001\002" +
    "\000\036\003\020\012\022\013\012\014\004\015\043\016" +
    "\045\023\uffb6\026\041\027\uffb6\030\031\031\046\035\042" +
    "\036\016\037\044\001\002\000\006\023\uffbc\027\uffbc\001" +
    "\002\000\004\045\100\001\002\000\006\003\053\045\054" +
    "\001\002\000\004\043\073\001\002\000\004\043\055\001" +
    "\002\000\006\003\056\044\057\001\002\000\004\037\070" +
    "\001\002\000\006\003\060\037\061\001\002\000\004\021" +
    "\066\001\002\000\006\003\062\021\063\001\002\000\004" +
    "\040\065\001\002\000\004\040\064\001\002\000\036\003" +
    "\uffc3\012\uffc3\013\uffc3\014\uffc3\015\uffc3\016\uffc3\023\uffc3" +
    "\026\uffc3\027\uffc3\030\uffc3\031\uffc3\035\uffc3\036\uffc3\037" +
    "\uffc3\001\002\000\036\003\uffc0\012\uffc0\013\uffc0\014\uffc0" +
    "\015\uffc0\016\uffc0\023\uffc0\026\uffc0\027\uffc0\030\uffc0\031" +
    "\uffc0\035\uffc0\036\uffc0\037\uffc0\001\002\000\004\040\067" +
    "\001\002\000\036\003\uffc1\012\uffc1\013\uffc1\014\uffc1\015" +
    "\uffc1\016\uffc1\023\uffc1\026\uffc1\027\uffc1\030\uffc1\031\uffc1" +
    "\035\uffc1\036\uffc1\037\uffc1\001\002\000\004\021\071\001" +
    "\002\000\004\040\072\001\002\000\036\003\uffc2\012\uffc2" +
    "\013\uffc2\014\uffc2\015\uffc2\016\uffc2\023\uffc2\026\uffc2\027" +
    "\uffc2\030\uffc2\031\uffc2\035\uffc2\036\uffc2\037\uffc2\001\002" +
    "\000\004\044\074\001\002\000\004\037\075\001\002\000" +
    "\004\021\076\001\002\000\004\040\077\001\002\000\036" +
    "\003\uffbe\012\uffbe\013\uffbe\014\uffbe\015\uffbe\016\uffbe\023" +
    "\uffbe\026\uffbe\027\uffbe\030\uffbe\031\uffbe\035\uffbe\036\uffbe" +
    "\037\uffbe\001\002\000\004\043\101\001\002\000\004\044" +
    "\102\001\002\000\004\037\103\001\002\000\004\021\104" +
    "\001\002\000\004\040\105\001\002\000\036\003\uffbf\012" +
    "\uffbf\013\uffbf\014\uffbf\015\uffbf\016\uffbf\023\uffbf\026\uffbf" +
    "\027\uffbf\030\uffbf\031\uffbf\035\uffbf\036\uffbf\037\uffbf\001" +
    "\002\000\014\003\114\020\116\037\115\042\117\046\111" +
    "\001\002\000\014\003\114\020\116\037\115\042\117\046" +
    "\111\001\002\000\014\003\uffac\021\uffac\024\161\025\160" +
    "\040\uffac\001\002\000\026\003\uff9d\004\uff9d\005\uff9d\007" +
    "\uff9d\010\uff9d\021\uff9d\024\uff9d\025\uff9d\040\uff9d\043\uff9d" +
    "\001\002\000\012\004\130\005\126\007\125\010\134\001" +
    "\002\000\006\003\145\021\146\001\002\000\022\003\uffab" +
    "\004\uff9c\005\uff9c\007\uff9c\010\uff9c\021\uffab\024\143\040" +
    "\uffab\001\002\000\026\003\uff9f\004\uff9f\005\uff9f\007\uff9f" +
    "\010\uff9f\021\uff9f\024\uff9f\025\uff9f\040\uff9f\043\uff9f\001" +
    "\002\000\014\003\122\020\123\037\115\042\117\046\111" +
    "\001\002\000\026\003\uff9e\004\uff9e\005\uff9e\007\uff9e\010" +
    "\uff9e\021\uff9e\024\uff9e\025\uff9e\040\uff9e\043\uff9e\001\002" +
    "\000\004\021\136\001\002\000\014\004\130\005\126\007" +
    "\125\010\134\021\127\001\002\000\026\003\uff9c\004\uff9c" +
    "\005\uff9c\007\uff9c\010\uff9c\021\uff9c\024\uff9c\025\uff9c\040" +
    "\uff9c\043\uff9c\001\002\000\014\003\122\020\123\037\115" +
    "\042\117\046\111\001\002\000\012\004\130\005\126\007" +
    "\125\021\127\001\002\000\014\003\122\020\123\037\115" +
    "\042\117\046\111\001\002\000\014\003\122\020\123\037" +
    "\115\042\117\046\111\001\002\000\026\003\uffa0\004\uffa0" +
    "\005\uffa0\007\uffa0\010\uffa0\021\uffa0\024\uffa0\025\uffa0\040" +
    "\uffa0\043\uffa0\001\002\000\014\003\122\020\123\037\115" +
    "\042\117\046\111\001\002\000\026\003\uffa3\004\uffa3\005" +
    "\126\007\125\010\uffa3\021\uffa3\024\uffa3\025\uffa3\040\uffa3" +
    "\043\uffa3\001\002\000\026\003\uffa2\004\uffa2\005\uffa2\007" +
    "\uffa2\010\uffa2\021\uffa2\024\uffa2\025\uffa2\040\uffa2\043\uffa2" +
    "\001\002\000\026\003\uffa1\004\uffa1\005\uffa1\007\uffa1\010" +
    "\uffa1\021\uffa1\024\uffa1\025\uffa1\040\uffa1\043\uffa1\001\002" +
    "\000\014\003\122\020\123\037\115\042\117\046\111\001" +
    "\002\000\022\003\uffa9\004\130\005\126\007\125\021\uffa9" +
    "\024\uffa9\025\uffa9\040\uffa9\001\002\000\014\003\uffad\021" +
    "\uffad\024\140\025\137\040\uffad\001\002\000\014\003\114" +
    "\020\116\037\115\042\117\046\111\001\002\000\014\003" +
    "\114\020\116\037\115\042\117\046\111\001\002\000\010" +
    "\003\uffaf\021\uffaf\040\uffaf\001\002\000\010\003\uffae\021" +
    "\uffae\040\uffae\001\002\000\014\003\114\020\116\037\115" +
    "\042\117\046\111\001\002\000\010\003\uffaa\021\uffaa\040" +
    "\uffaa\001\002\000\004\022\155\001\002\000\006\003\147" +
    "\022\150\001\002\000\034\003\020\012\022\013\012\014" +
    "\004\015\043\016\045\023\uffb6\026\041\030\031\031\046" +
    "\035\042\036\016\037\044\001\002\000\034\003\020\012" +
    "\022\013\012\014\004\015\043\016\045\023\uffb6\026\041" +
    "\030\031\031\046\035\042\036\016\037\044\001\002\000" +
    "\004\023\152\001\002\000\036\003\uffcf\012\uffcf\013\uffcf" +
    "\014\uffcf\015\uffcf\016\uffcf\023\uffcf\026\uffcf\027\uffcf\030" +
    "\uffcf\031\uffcf\035\uffcf\036\uffcf\037\uffcf\001\002\000\004" +
    "\023\154\001\002\000\036\003\uffce\012\uffce\013\uffce\014" +
    "\uffce\015\uffce\016\uffce\023\uffce\026\uffce\027\uffce\030\uffce" +
    "\031\uffce\035\uffce\036\uffce\037\uffce\001\002\000\034\003" +
    "\020\012\022\013\012\014\004\015\043\016\045\023\uffb6" +
    "\026\041\030\031\031\046\035\042\036\016\037\044\001" +
    "\002\000\004\023\157\001\002\000\036\003\uffcd\012\uffcd" +
    "\013\uffcd\014\uffcd\015\uffcd\016\uffcd\023\uffcd\026\uffcd\027" +
    "\uffcd\030\uffcd\031\uffcd\035\uffcd\036\uffcd\037\uffcd\001\002" +
    "\000\014\003\114\020\116\037\115\042\117\046\111\001" +
    "\002\000\014\003\114\020\116\037\115\042\117\046\111" +
    "\001\002\000\010\003\uffb1\021\uffb1\040\uffb1\001\002\000" +
    "\010\003\uffb0\021\uffb0\040\uffb0\001\002\000\004\021\165" +
    "\001\002\000\004\022\166\001\002\000\034\003\020\012" +
    "\022\013\012\014\004\015\043\016\045\023\uffb6\026\041" +
    "\030\031\031\046\035\042\036\016\037\044\001\002\000" +
    "\004\023\170\001\002\000\036\003\uffcc\012\uffcc\013\uffcc" +
    "\014\uffcc\015\uffcc\016\uffcc\023\uffcc\026\uffcc\027\uffcc\030" +
    "\uffcc\031\uffcc\035\uffcc\036\uffcc\037\uffcc\001\002\000\020" +
    "\003\217\012\022\013\012\014\004\035\042\036\016\037" +
    "\007\001\002\000\010\003\uffb4\021\uffb4\040\uffb4\001\002" +
    "\000\030\003\230\012\022\013\012\014\004\020\123\035" +
    "\042\036\016\037\226\040\227\042\117\046\111\001\002" +
    "\000\004\010\223\001\002\000\010\003\uffb5\021\uffb5\040" +
    "\uffb5\001\002\000\004\010\221\001\002\000\014\003\122" +
    "\020\123\037\203\042\117\046\111\001\002\000\004\040" +
    "\201\001\002\000\036\003\uff97\012\uff97\013\uff97\014\uff97" +
    "\015\uff97\016\uff97\023\uff97\026\uff97\027\uff97\030\uff97\031" +
    "\uff97\035\uff97\036\uff97\037\uff97\001\002\000\014\004\130" +
    "\005\126\007\125\040\uffea\043\215\001\002\000\016\004" +
    "\uff9f\005\uff9f\007\uff9f\020\204\040\uff9f\043\uff9f\001\002" +
    "\000\010\003\205\021\uff9a\037\207\001\002\000\004\021" +
    "\214\001\002\000\004\021\uff9b\001\002\000\006\021\uff98" +
    "\043\212\001\002\000\004\021\211\001\002\000\004\040" +
    "\uffe6\001\002\000\004\037\207\001\002\000\004\021\uff99" +
    "\001\002\000\004\040\uffe4\001\002\000\020\003\217\012" +
    "\022\013\012\014\004\035\042\036\016\037\007\001\002" +
    "\000\004\040\uffeb\001\002\000\004\037\220\001\002\000" +
    "\016\003\ufff4\010\ufff4\020\ufff4\021\ufff4\040\ufff4\043\ufff4" +
    "\001\002\000\014\003\122\020\123\037\115\042\117\046" +
    "\111\001\002\000\016\003\uffb3\004\130\005\126\007\125" +
    "\021\uffb3\040\uffb3\001\002\000\014\003\122\020\123\037" +
    "\115\042\117\046\111\001\002\000\016\003\uffb2\004\130" +
    "\005\126\007\125\021\uffb2\040\uffb2\001\002\000\004\040" +
    "\uffec\001\002\000\020\003\232\004\uff9f\005\uff9f\007\uff9f" +
    "\010\177\040\uff9f\043\171\001\002\000\036\003\uff96\012" +
    "\uff96\013\uff96\014\uff96\015\uff96\016\uff96\023\uff96\026\uff96" +
    "\027\uff96\030\uff96\031\uff96\035\uff96\036\uff96\037\uff96\001" +
    "\002\000\014\004\uff9c\005\uff9c\007\uff9c\037\220\040\uff9c" +
    "\001\002\000\012\004\130\005\126\007\125\040\uffe9\001" +
    "\002\000\026\003\230\012\022\013\012\014\004\020\123" +
    "\035\042\036\016\037\226\042\117\046\111\001\002\000" +
    "\004\040\uffed\001\002\000\014\003\114\020\116\037\115" +
    "\042\117\046\111\001\002\000\014\003\114\020\116\037" +
    "\115\042\117\046\111\001\002\000\006\003\237\021\240" +
    "\001\002\000\004\022\261\001\002\000\006\003\241\022" +
    "\242\001\002\000\034\003\020\012\022\013\012\014\004" +
    "\015\043\016\045\023\uffb6\026\041\030\031\031\046\035" +
    "\042\036\016\037\044\001\002\000\034\003\020\012\022" +
    "\013\012\014\004\015\043\016\045\023\uffb6\026\041\030" +
    "\031\031\046\035\042\036\016\037\044\001\002\000\004" +
    "\023\244\001\002\000\040\003\uffd5\012\uffd5\013\uffd5\014" +
    "\uffd5\015\uffd5\016\uffd5\017\246\023\uffd5\026\uffd5\027\uffd5" +
    "\030\uffd5\031\uffd5\035\uffd5\036\uffd5\037\uffd5\001\002\000" +
    "\036\003\uffdc\012\uffdc\013\uffdc\014\uffdc\015\uffdc\016\uffdc" +
    "\023\uffdc\026\uffdc\027\uffdc\030\uffdc\031\uffdc\035\uffdc\036" +
    "\uffdc\037\uffdc\001\002\000\010\003\247\015\043\022\251" +
    "\001\002\000\034\003\020\012\022\013\012\014\004\015" +
    "\043\016\045\023\uffb6\026\041\030\031\031\046\035\042" +
    "\036\016\037\044\001\002\000\036\003\uffd7\012\uffd7\013" +
    "\uffd7\014\uffd7\015\uffd7\016\uffd7\023\uffd7\026\uffd7\027\uffd7" +
    "\030\uffd7\031\uffd7\035\uffd7\036\uffd7\037\uffd7\001\002\000" +
    "\034\003\020\012\022\013\012\014\004\015\043\016\045" +
    "\023\uffb6\026\041\030\031\031\046\035\042\036\016\037" +
    "\044\001\002\000\004\023\253\001\002\000\036\003\uffd8" +
    "\012\uffd8\013\uffd8\014\uffd8\015\uffd8\016\uffd8\023\uffd8\026" +
    "\uffd8\027\uffd8\030\uffd8\031\uffd8\035\uffd8\036\uffd8\037\uffd8" +
    "\001\002\000\004\023\255\001\002\000\036\003\uffd6\012" +
    "\uffd6\013\uffd6\014\uffd6\015\uffd6\016\uffd6\023\uffd6\026\uffd6" +
    "\027\uffd6\030\uffd6\031\uffd6\035\uffd6\036\uffd6\037\uffd6\001" +
    "\002\000\004\023\257\001\002\000\040\003\uffd5\012\uffd5" +
    "\013\uffd5\014\uffd5\015\uffd5\016\uffd5\017\246\023\uffd5\026" +
    "\uffd5\027\uffd5\030\uffd5\031\uffd5\035\uffd5\036\uffd5\037\uffd5" +
    "\001\002\000\036\003\uffdb\012\uffdb\013\uffdb\014\uffdb\015" +
    "\uffdb\016\uffdb\023\uffdb\026\uffdb\027\uffdb\030\uffdb\031\uffdb" +
    "\035\uffdb\036\uffdb\037\uffdb\001\002\000\034\003\020\012" +
    "\022\013\012\014\004\015\043\016\045\023\uffb6\026\041" +
    "\030\031\031\046\035\042\036\016\037\044\001\002\000" +
    "\004\023\263\001\002\000\040\003\uffd5\012\uffd5\013\uffd5" +
    "\014\uffd5\015\uffd5\016\uffd5\017\246\023\uffd5\026\uffd5\027" +
    "\uffd5\030\uffd5\031\uffd5\035\uffd5\036\uffd5\037\uffd5\001\002" +
    "\000\036\003\uffd9\012\uffd9\013\uffd9\014\uffd9\015\uffd9\016" +
    "\uffd9\023\uffd9\026\uffd9\027\uffd9\030\uffd9\031\uffd9\035\uffd9" +
    "\036\uffd9\037\uffd9\001\002\000\004\021\266\001\002\000" +
    "\004\022\267\001\002\000\034\003\020\012\022\013\012" +
    "\014\004\015\043\016\045\023\uffb6\026\041\030\031\031" +
    "\046\035\042\036\016\037\044\001\002\000\004\023\271" +
    "\001\002\000\040\003\uffd5\012\uffd5\013\uffd5\014\uffd5\015" +
    "\uffd5\016\uffd5\017\246\023\uffd5\026\uffd5\027\uffd5\030\uffd5" +
    "\031\uffd5\035\uffd5\036\uffd5\037\uffd5\001\002\000\036\003" +
    "\uffda\012\uffda\013\uffda\014\uffda\015\uffda\016\uffda\023\uffda" +
    "\026\uffda\027\uffda\030\uffda\031\uffda\035\uffda\036\uffda\037" +
    "\uffda\001\002\000\016\012\022\013\012\014\004\035\042" +
    "\036\016\037\275\001\002\000\020\003\277\012\022\013" +
    "\012\014\004\035\042\036\016\037\275\001\002\000\004" +
    "\010\342\001\002\000\006\003\336\037\337\001\002\000" +
    "\014\003\122\020\123\037\115\042\117\046\111\001\002" +
    "\000\014\003\122\020\123\037\115\042\117\046\111\001" +
    "\002\000\012\004\130\005\126\007\125\040\302\001\002" +
    "\000\014\003\114\020\116\037\115\042\117\046\111\001" +
    "\002\000\004\040\304\001\002\000\004\037\305\001\002" +
    "\000\014\003\306\004\176\005\174\032\175\033\172\001" +
    "\002\000\004\021\320\001\002\000\006\003\310\021\311" +
    "\001\002\000\004\022\315\001\002\000\004\022\312\001" +
    "\002\000\034\003\020\012\022\013\012\014\004\015\043" +
    "\016\045\023\uffb6\026\041\030\031\031\046\035\042\036" +
    "\016\037\044\001\002\000\004\023\314\001\002\000\036" +
    "\003\uffd4\012\uffd4\013\uffd4\014\uffd4\015\uffd4\016\uffd4\023" +
    "\uffd4\026\uffd4\027\uffd4\030\uffd4\031\uffd4\035\uffd4\036\uffd4" +
    "\037\uffd4\001\002\000\034\003\020\012\022\013\012\014" +
    "\004\015\043\016\045\023\uffb6\026\041\030\031\031\046" +
    "\035\042\036\016\037\044\001\002\000\004\023\317\001" +
    "\002\000\036\003\uffd2\012\uffd2\013\uffd2\014\uffd2\015\uffd2" +
    "\016\uffd2\023\uffd2\026\uffd2\027\uffd2\030\uffd2\031\uffd2\035" +
    "\uffd2\036\uffd2\037\uffd2\001\002\000\004\022\321\001\002" +
    "\000\034\003\020\012\022\013\012\014\004\015\043\016" +
    "\045\023\uffb6\026\041\030\031\031\046\035\042\036\016" +
    "\037\044\001\002\000\004\023\323\001\002\000\036\003" +
    "\uffd0\012\uffd0\013\uffd0\014\uffd0\015\uffd0\016\uffd0\023\uffd0" +
    "\026\uffd0\027\uffd0\030\uffd0\031\uffd0\035\uffd0\036\uffd0\037" +
    "\uffd0\001\002\000\012\004\130\005\126\007\125\040\325" +
    "\001\002\000\014\003\114\020\116\037\115\042\117\046" +
    "\111\001\002\000\004\040\327\001\002\000\004\037\330" +
    "\001\002\000\012\004\176\005\174\032\175\033\172\001" +
    "\002\000\004\021\332\001\002\000\004\022\333\001\002" +
    "\000\034\003\020\012\022\013\012\014\004\015\043\016" +
    "\045\023\uffb6\026\041\030\031\031\046\035\042\036\016" +
    "\037\044\001\002\000\004\023\335\001\002\000\036\003" +
    "\uffd1\012\uffd1\013\uffd1\014\uffd1\015\uffd1\016\uffd1\023\uffd1" +
    "\026\uffd1\027\uffd1\030\uffd1\031\uffd1\035\uffd1\036\uffd1\037" +
    "\uffd1\001\002\000\004\010\341\001\002\000\004\010\340" +
    "\001\002\000\014\003\ufff3\020\ufff3\037\ufff3\042\ufff3\046" +
    "\ufff3\001\002\000\014\003\ufff1\020\ufff1\037\ufff1\042\ufff1" +
    "\046\ufff1\001\002\000\014\003\ufff2\020\ufff2\037\ufff2\042" +
    "\ufff2\046\ufff2\001\002\000\014\003\122\020\123\037\115" +
    "\042\117\046\111\001\002\000\012\004\130\005\126\007" +
    "\125\040\345\001\002\000\014\003\114\020\116\037\115" +
    "\042\117\046\111\001\002\000\004\040\347\001\002\000" +
    "\004\037\350\001\002\000\012\004\176\005\174\032\175" +
    "\033\172\001\002\000\004\021\352\001\002\000\004\022" +
    "\353\001\002\000\034\003\020\012\022\013\012\014\004" +
    "\015\043\016\045\023\uffb6\026\041\030\031\031\046\035" +
    "\042\036\016\037\044\001\002\000\004\023\355\001\002" +
    "\000\036\003\uffd3\012\uffd3\013\uffd3\014\uffd3\015\uffd3\016" +
    "\uffd3\023\uffd3\026\uffd3\027\uffd3\030\uffd3\031\uffd3\035\uffd3" +
    "\036\uffd3\037\uffd3\001\002\000\020\003\217\012\022\013" +
    "\012\014\004\035\042\036\016\037\007\001\002\000\014" +
    "\003\122\020\123\037\361\042\117\046\111\001\002\000" +
    "\014\004\130\005\126\007\125\040\uffef\043\367\001\002" +
    "\000\016\004\uff9f\005\uff9f\007\uff9f\020\362\040\uff9f\043" +
    "\uff9f\001\002\000\010\003\363\021\uff9a\037\207\001\002" +
    "\000\004\021\366\001\002\000\004\021\365\001\002\000" +
    "\004\040\uffe7\001\002\000\004\040\uffe5\001\002\000\020" +
    "\003\217\012\022\013\012\014\004\035\042\036\016\037" +
    "\007\001\002\000\004\040\ufff0\001\002\000\004\040\uffee" +
    "\001\002\000\006\023\uffb8\027\uffb8\001\002\000\006\023" +
    "\uffbd\027\uffbd\001\002\000\014\003\122\020\123\037\115" +
    "\042\117\046\111\001\002\000\012\004\130\005\126\007" +
    "\125\040\376\001\002\000\004\023\377\001\002\000\020" +
    "\003\ufffa\012\ufffa\013\ufffa\014\ufffa\035\ufffa\036\ufffa\037" +
    "\ufffa\001\002\000\006\023\uffba\027\uffba\001\002\000\006" +
    "\023\uffb9\027\uffb9\001\002\000\006\023\uffbb\027\uffbb\001" +
    "\002\000\004\045\u011b\001\002\000\006\003\u0105\045\u0106" +
    "\001\002\000\004\043\u0117\001\002\000\010\003\u0108\021" +
    "\u0109\043\u0107\001\002\000\006\003\u010e\037\u010f\001\002" +
    "\000\004\037\u010b\001\002\000\004\040\u010a\001\002\000" +
    "\036\003\uffca\012\uffca\013\uffca\014\uffca\015\uffca\016\uffca" +
    "\023\uffca\026\uffca\027\uffca\030\uffca\031\uffca\035\uffca\036" +
    "\uffca\037\uffca\001\002\000\004\021\u010c\001\002\000\004" +
    "\040\u010d\001\002\000\036\003\uffc9\012\uffc9\013\uffc9\014" +
    "\uffc9\015\uffc9\016\uffc9\023\uffc9\026\uffc9\027\uffc9\030\uffc9" +
    "\031\uffc9\035\uffc9\036\uffc9\037\uffc9\001\002\000\004\021" +
    "\u0115\001\002\000\006\003\u0110\021\u0111\001\002\000\004" +
    "\040\u0114\001\002\000\006\003\u0112\040\u0113\001\002\000" +
    "\036\003\uffc6\012\uffc6\013\uffc6\014\uffc6\015\uffc6\016\uffc6" +
    "\023\uffc6\026\uffc6\027\uffc6\030\uffc6\031\uffc6\035\uffc6\036" +
    "\uffc6\037\uffc6\001\002\000\036\003\uffcb\012\uffcb\013\uffcb" +
    "\014\uffcb\015\uffcb\016\uffcb\023\uffcb\026\uffcb\027\uffcb\030" +
    "\uffcb\031\uffcb\035\uffcb\036\uffcb\037\uffcb\001\002\000\036" +
    "\003\uffc7\012\uffc7\013\uffc7\014\uffc7\015\uffc7\016\uffc7\023" +
    "\uffc7\026\uffc7\027\uffc7\030\uffc7\031\uffc7\035\uffc7\036\uffc7" +
    "\037\uffc7\001\002\000\004\040\u0116\001\002\000\036\003" +
    "\uffc8\012\uffc8\013\uffc8\014\uffc8\015\uffc8\016\uffc8\023\uffc8" +
    "\026\uffc8\027\uffc8\030\uffc8\031\uffc8\035\uffc8\036\uffc8\037" +
    "\uffc8\001\002\000\004\037\u0118\001\002\000\004\021\u0119" +
    "\001\002\000\004\040\u011a\001\002\000\036\003\uffc4\012" +
    "\uffc4\013\uffc4\014\uffc4\015\uffc4\016\uffc4\023\uffc4\026\uffc4" +
    "\027\uffc4\030\uffc4\031\uffc4\035\uffc4\036\uffc4\037\uffc4\001" +
    "\002\000\004\043\u011c\001\002\000\004\037\u011d\001\002" +
    "\000\004\021\u011e\001\002\000\004\040\u011f\001\002\000" +
    "\036\003\uffc5\012\uffc5\013\uffc5\014\uffc5\015\uffc5\016\uffc5" +
    "\023\uffc5\026\uffc5\027\uffc5\030\uffc5\031\uffc5\035\uffc5\036" +
    "\uffc5\037\uffc5\001\002\000\006\023\uffb7\027\uffb7\001\002" +
    "\000\004\002\ufffe\001\002\000\036\003\uffe2\012\uffe2\013" +
    "\uffe2\014\uffe2\015\uffe2\016\uffe2\023\uffe2\026\uffe2\027\uffe2" +
    "\030\uffe2\031\uffe2\035\uffe2\036\uffe2\037\uffe2\001\002\000" +
    "\016\003\ufff5\010\ufff5\020\ufff5\021\ufff5\040\ufff5\043\ufff5" +
    "\001\002\000\020\003\217\012\022\013\012\014\004\021" +
    "\uffdd\035\042\036\016\001\002\000\020\003\217\012\022" +
    "\013\012\014\004\021\uffdd\035\042\036\016\001\002\000" +
    "\004\021\u012d\001\002\000\006\021\uffdf\043\u012b\001\002" +
    "\000\010\021\uffde\037\u0123\043\u0129\001\002\000\020\003" +
    "\217\012\022\013\012\014\004\021\uffdd\035\042\036\016" +
    "\001\002\000\004\021\uffe1\001\002\000\020\003\217\012" +
    "\022\013\012\014\004\021\uffdd\035\042\036\016\001\002" +
    "\000\004\021\uffe0\001\002\000\006\022\ufff7\040\ufff7\001" +
    "\002\000\004\021\u012f\001\002\000\006\022\ufff6\040\ufff6" +
    "\001\002\000\020\003\ufffc\012\ufffc\013\ufffc\014\ufffc\035" +
    "\ufffc\036\ufffc\037\ufffc\001\002\000\034\003\020\012\022" +
    "\013\012\014\004\015\043\016\045\026\041\027\uffb6\030" +
    "\031\031\046\035\042\036\016\037\044\001\002\000\004" +
    "\027\u0133\001\002\000\014\003\122\020\123\037\115\042" +
    "\117\046\111\001\002\000\014\003\u0135\004\130\005\126" +
    "\007\125\040\u0136\001\002\000\004\022\u0139\001\002\000" +
    "\006\003\u0137\023\u0138\001\002\000\020\003\ufff9\012\ufff9" +
    "\013\ufff9\014\ufff9\035\ufff9\036\ufff9\037\ufff9\001\002\000" +
    "\020\003\ufffb\012\ufffb\013\ufffb\014\ufffb\035\ufffb\036\ufffb" +
    "\037\ufffb\001\002\000\020\003\ufff8\012\ufff8\013\ufff8\014" +
    "\ufff8\035\ufff8\036\ufff8\037\ufff8\001\002\000\004\002\ufffd" +
    "\001\002\000\004\002\uffff\001\002\000\004\002\001\001" +
    "\002\000\036\003\uffe3\012\uffe3\013\uffe3\014\uffe3\015\uffe3" +
    "\016\uffe3\023\uffe3\026\uffe3\027\uffe3\030\uffe3\031\uffe3\035" +
    "\uffe3\036\uffe3\037\uffe3\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u013b\000\024\010\016\013\020\014\010\021\012\024" +
    "\005\025\007\030\004\031\014\032\013\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\010\016\013\020\014\010" +
    "\021\012\024\005\030\u013a\031\014\032\013\001\001\000" +
    "\002\001\001\000\022\010\016\013\020\014\010\021\012" +
    "\024\005\030\u0139\031\014\032\013\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\010\016\013\020\014\010\021" +
    "\012\024\005\030\u0120\031\014\032\013\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\030\002\031\003\035\004\046" +
    "\010\016\011\027\012\032\021\033\024\005\026\034\027" +
    "\036\031\037\001\001\000\030\002\031\003\035\004\046" +
    "\010\016\011\027\012\032\021\033\024\005\026\u011f\027" +
    "\036\031\037\001\001\000\002\001\001\000\030\002\031" +
    "\003\035\004\046\010\016\011\027\012\032\021\033\024" +
    "\005\026\u0101\027\036\031\037\001\001\000\030\002\031" +
    "\003\035\004\046\010\016\011\027\012\032\021\033\024" +
    "\005\026\u0100\027\036\031\037\001\001\000\030\002\031" +
    "\003\035\004\046\010\016\011\027\012\032\021\033\024" +
    "\005\026\377\027\036\031\037\001\001\000\002\001\001" +
    "\000\030\002\031\003\035\004\046\010\016\011\027\012" +
    "\032\021\033\024\005\026\372\027\036\031\037\001\001" +
    "\000\030\002\031\003\035\004\046\010\016\011\027\012" +
    "\032\021\033\024\005\026\371\027\036\031\037\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\022\177\001\001\000\002\001\001" +
    "\000\002\001\001\000\030\002\031\003\035\004\046\010" +
    "\016\011\027\012\032\021\033\024\005\026\047\027\036" +
    "\031\037\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\005\163\007\107" +
    "\020\111\001\001\000\010\005\112\007\107\020\111\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\007\117\020\120\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\020" +
    "\123\001\001\000\002\001\001\000\004\020\132\001\001" +
    "\000\004\020\131\001\001\000\002\001\001\000\004\020" +
    "\130\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\020\134\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\005\141\007\107\020\111\001\001" +
    "\000\010\005\140\007\107\020\111\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\005\143\007\107\020\111" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\030\002\031\003\035\004\046\010\016\011\027" +
    "\012\032\021\033\024\005\026\152\027\036\031\037\001" +
    "\001\000\030\002\031\003\035\004\046\010\016\011\027" +
    "\012\032\021\033\024\005\026\150\027\036\031\037\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\030\002\031\003\035\004\046\010" +
    "\016\011\027\012\032\021\033\024\005\026\155\027\036" +
    "\031\037\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\005\162\007\107\020\111\001\001\000\010\005\161" +
    "\007\107\020\111\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\030\002\031" +
    "\003\035\004\046\010\016\011\027\012\032\021\033\024" +
    "\005\026\166\027\036\031\037\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\010\016\024\232\031\037\001" +
    "\001\000\002\001\001\000\012\010\016\020\230\024\224" +
    "\031\037\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\020\201\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\016\205\017\207\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\016\212\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\010\016\024\215\031\037\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\020\221\001\001\000\002\001\001\000\004\020\223\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\010\016\020\230\024\224\031\037\001\001\000\002" +
    "\001\001\000\010\005\264\007\107\020\111\001\001\000" +
    "\010\005\235\007\107\020\111\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\030\002\031\003" +
    "\035\004\046\010\016\011\027\012\032\021\033\024\005" +
    "\026\255\027\036\031\037\001\001\000\030\002\031\003" +
    "\035\004\046\010\016\011\027\012\032\021\033\024\005" +
    "\026\242\027\036\031\037\001\001\000\002\001\001\000" +
    "\004\006\244\001\001\000\002\001\001\000\004\003\247" +
    "\001\001\000\030\002\031\003\035\004\046\010\016\011" +
    "\027\012\032\021\033\024\005\026\253\027\036\031\037" +
    "\001\001\000\002\001\001\000\030\002\031\003\035\004" +
    "\046\010\016\011\027\012\032\021\033\024\005\026\251" +
    "\027\036\031\037\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\006\257\001\001\000\002\001\001\000\030\002" +
    "\031\003\035\004\046\010\016\011\027\012\032\021\033" +
    "\024\005\026\261\027\036\031\037\001\001\000\002\001" +
    "\001\000\004\006\263\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\030\002\031\003\035\004" +
    "\046\010\016\011\027\012\032\021\033\024\005\026\267" +
    "\027\036\031\037\001\001\000\002\001\001\000\004\006" +
    "\271\001\001\000\002\001\001\000\006\010\275\023\342" +
    "\001\001\000\006\010\275\023\277\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\020\323\001\001\000\004" +
    "\020\300\001\001\000\002\001\001\000\010\005\302\007" +
    "\107\020\111\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\022\306\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\030\002\031" +
    "\003\035\004\046\010\016\011\027\012\032\021\033\024" +
    "\005\026\312\027\036\031\037\001\001\000\002\001\001" +
    "\000\002\001\001\000\030\002\031\003\035\004\046\010" +
    "\016\011\027\012\032\021\033\024\005\026\315\027\036" +
    "\031\037\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\030\002\031\003\035\004\046\010\016" +
    "\011\027\012\032\021\033\024\005\026\321\027\036\031" +
    "\037\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\005\325\007\107\020\111\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\022\330\001\001" +
    "\000\002\001\001\000\002\001\001\000\030\002\031\003" +
    "\035\004\046\010\016\011\027\012\032\021\033\024\005" +
    "\026\333\027\036\031\037\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\020" +
    "\343\001\001\000\002\001\001\000\010\005\345\007\107" +
    "\020\111\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\022\350\001\001\000\002\001\001\000\002\001\001" +
    "\000\030\002\031\003\035\004\046\010\016\011\027\012" +
    "\032\021\033\024\005\026\353\027\036\031\037\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\010\016\024" +
    "\370\031\037\001\001\000\004\020\357\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\016\205\017\363\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\010\016\024\367\031\037\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\020\374\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\010" +
    "\u0127\015\u012d\031\u0126\001\001\000\010\010\u0127\015\u0125" +
    "\031\u0126\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\010\u0127\015\u0129\031\u0126\001\001" +
    "\000\002\001\001\000\010\010\u0127\015\u012b\031\u0126\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\030\002\031\003" +
    "\035\004\046\010\016\011\027\012\032\021\033\024\005" +
    "\026\u0131\027\036\031\037\001\001\000\002\001\001\000" +
    "\004\020\u0133\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    ArrayList gramas = new ArrayList();
    public Nodo raiz;
    public int cont = 0;
    public int maximo(){
    int a=5;
    return a;
}
    ArrayList errores=new ArrayList();
    public Symbol s;
    @Override
    public void syntax_error (Symbol s){
        if(s.left==-1){
        }else{
                errores.add("Syntax error en la línea: " + (s.left) + " , columna: " +(s.right)+ " con el símbolo = "+(s.value));
    }
}
    @Override
    public void unrecovered_syntax_error(Symbol s){
    if(s.left==-1){
    }else{
        errores.add("Error desconocido, por favor revise la linea: " + (s.left ) + " y columna:  " + (s.right )+ "Con simbolo: "+s.value);
    }    
    }
    public Symbol getS(){
        return this.s;
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // CONTADOR ::= tkn_id error tkn_puntocoma 
            {
              Nodo RESULT =null;
		parser.errores.add("Iterador en identificador incorrecta");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTADOR",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // CONTADOR ::= tkn_id ITERADOR tkn_puntocoma 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTADOR",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // ARGSPARAMS ::= tkn_id 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARGSPARAMS",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // ARGSPARAMS ::= tkn_id tkn_coma ARGSPARAMS 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARGSPARAMS",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // ARGS ::= 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARGS",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // ARGS ::= ARGSPARAMS 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARGS",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // EXPR ::= error 
            {
              Nodo RESULT =null;
		parser.errores.add("Expresión incorrecta");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPR",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // EXPR ::= tkn_caracter 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPR",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // EXPR ::= tkn_num 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPR",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // EXPR ::= tkn_id 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPR",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // EXPR ::= tkn_parentesisiz EXPR tkn_parentesisde 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPR",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // EXPR ::= EXPR tkn_opmod EXPR 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPR",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // EXPR ::= EXPR tkn_opmulti EXPR 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPR",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // EXPR ::= EXPR tkn_opadicion EXPR 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPR",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // TIPO ::= tkn_void 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // TIPO ::= tkn_int 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // TIPO ::= tkn_charp 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // TIPO ::= tkn_intp 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // TIPO ::= tkn_char 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // CONDICIONP ::= EXPR tkn_oprel EXPR 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICIONP",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // CONDICION ::= error tkn_and CONDICION 
            {
              Nodo RESULT =null;
		parser.errores.add("Expresion erronea o ausente en condicion");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // CONDICION ::= error 
            {
              Nodo RESULT =null;
		parser.errores.add("Operador relacional ausente en condicion");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // CONDICION ::= CONDICIONP 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // CONDICION ::= tkn_parentesisiz CONDICIONP tkn_parentesisde 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // CONDICION ::= tkn_parentesisiz CONDICIONP tkn_parentesisde tkn_or CONDICION 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // CONDICION ::= tkn_parentesisiz CONDICIONP tkn_parentesisde tkn_and CONDICION 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // CONDICION ::= CONDICIONP tkn_or CONDICION 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // CONDICION ::= CONDICIONP tkn_and CONDICION 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // ITERADOR ::= tkn_opmulti tkn_oprel EXPR 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ITERADOR",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // ITERADOR ::= tkn_opadicion tkn_oprel EXPR 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ITERADOR",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // ITERADOR ::= tkn_decrement 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ITERADOR",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // ITERADOR ::= tkn_increment 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ITERADOR",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // BLOQUE ::= 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // BLOQUE ::= CONTADOR BLOQUE 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // BLOQUE ::= PRINTF BLOQUE 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // BLOQUE ::= SCANF BLOQUE 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // BLOQUE ::= ASIGN BLOQUE 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // BLOQUE ::= WHILE BLOQUE 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // BLOQUE ::= FOR BLOQUE 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // BLOQUE ::= IF BLOQUE 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // SCANF ::= tkn_scanf tkn_parentesisiz error tkn_coma tkn_ampersand tkn_id tkn_parentesisde tkn_puntocoma 
            {
              Nodo RESULT =null;
		parser.errores.add("conststr ausente en la funcion scanf");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SCANF",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // SCANF ::= tkn_scanf error tkn_cadena tkn_coma tkn_ampersand tkn_id tkn_parentesisde tkn_puntocoma 
            {
              Nodo RESULT =null;
		parser.errores.add("parentesis de apertura '(' ausente en la funcion scanf");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SCANF",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // SCANF ::= tkn_scanf tkn_parentesisiz tkn_cadena tkn_coma tkn_ampersand tkn_id error tkn_puntocoma 
            {
              Nodo RESULT =null;
		parser.errores.add("parentesis de cierre ')' ausente en la funcion scanf");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SCANF",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // SCANF ::= tkn_scanf tkn_parentesisiz tkn_cadena tkn_coma tkn_ampersand error tkn_parentesisde tkn_puntocoma 
            {
              Nodo RESULT =null;
		parser.errores.add("identificador ausente en la funcion scanf");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SCANF",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // SCANF ::= tkn_scanf tkn_parentesisiz tkn_cadena tkn_coma error tkn_id tkn_parentesisde tkn_puntocoma 
            {
              Nodo RESULT =null;
		parser.errores.add("Puntero a identificador '&' ausente en la funcion scanf");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SCANF",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // SCANF ::= tkn_scanf tkn_parentesisiz tkn_cadena tkn_coma tkn_ampersand tkn_id tkn_parentesisde tkn_puntocoma 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SCANF",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // PRINTF ::= tkn_printf tkn_parentesisiz error tkn_coma tkn_id tkn_parentesisde tkn_puntocoma 
            {
              Nodo RESULT =null;
		parser.errores.add("conststr ausente en la funcion printf");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRINTF",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // PRINTF ::= tkn_printf error tkn_cadena tkn_coma tkn_id tkn_parentesisde tkn_puntocoma 
            {
              Nodo RESULT =null;
		parser.errores.add("se esperaba el simbolo '(' en la funcion printf");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRINTF",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // PRINTF ::= tkn_printf tkn_parentesisiz tkn_cadena tkn_coma tkn_id tkn_parentesisde error 
            {
              Nodo RESULT =null;
		parser.errores.add("se esperaba el simbolo ';' en la funcion printf");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRINTF",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // PRINTF ::= tkn_printf tkn_parentesisiz tkn_cadena tkn_coma tkn_id error tkn_puntocoma 
            {
              Nodo RESULT =null;
		parser.errores.add("parentesis de cierre ')' ausente en la funcion printf");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRINTF",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // PRINTF ::= tkn_printf tkn_parentesisiz tkn_cadena tkn_coma error tkn_parentesisde tkn_puntocoma 
            {
              Nodo RESULT =null;
		parser.errores.add("identificador ausente en la funcion printf");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRINTF",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // PRINTF ::= tkn_printf tkn_parentesisiz tkn_cadena error tkn_id tkn_parentesisde tkn_puntocoma 
            {
              Nodo RESULT =null;
		parser.errores.add("coma ',' ausente en la funcion printf");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRINTF",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // PRINTF ::= tkn_printf tkn_parentesisiz tkn_cadena tkn_parentesisde tkn_puntocoma 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRINTF",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // PRINTF ::= tkn_printf tkn_parentesisiz tkn_cadena tkn_coma tkn_id tkn_parentesisde tkn_puntocoma 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRINTF",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // WHILE ::= tkn_while error CONDICION tkn_parentesisde tkn_llaveiz BLOQUE tkn_llaveder 
            {
              Nodo RESULT =null;
		parser.errores.add("Se esperaba un '(' en bloque while\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("WHILE",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // WHILE ::= tkn_while tkn_parentesisiz CONDICION error tkn_llaveiz BLOQUE tkn_llaveder 
            {
              Nodo RESULT =null;
		parser.errores.add("Se esperaba un ')' en bloque while\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("WHILE",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // WHILE ::= tkn_while tkn_parentesisiz CONDICION tkn_parentesisde error BLOQUE tkn_llaveder 
            {
              Nodo RESULT =null;
		parser.errores.add("Se esperaba un '{' en bloque while\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("WHILE",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // WHILE ::= tkn_while tkn_parentesisiz CONDICION tkn_parentesisde tkn_llaveiz BLOQUE tkn_llaveder 
            {
              Nodo RESULT =null;
		int jleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int jright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo j = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("WHILE",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // FOR ::= tkn_for tkn_parentesisiz ASIGNACION EXPR tkn_puntocoma CONDICION tkn_puntocoma tkn_id error tkn_parentesisde tkn_llaveiz BLOQUE tkn_llaveder 
            {
              Nodo RESULT =null;
		parser.errores.add("Iteracion asuente en ciclo for\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FOR",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // FOR ::= tkn_for tkn_parentesisiz error EXPR tkn_puntocoma CONDICION tkn_puntocoma tkn_id ITERADOR tkn_parentesisde tkn_llaveiz BLOQUE tkn_llaveder 
            {
              Nodo RESULT =null;
		parser.errores.add("Asignacion o declaracion incorrecta en bloque for\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FOR",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // FOR ::= tkn_for tkn_parentesisiz ASIGNACION EXPR tkn_puntocoma CONDICION tkn_puntocoma tkn_id ITERADOR error tkn_llaveiz BLOQUE tkn_llaveder 
            {
              Nodo RESULT =null;
		parser.errores.add("Se esperaba un parentesis de cierre ')' for\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FOR",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // FOR ::= tkn_for error ASIGNACION EXPR tkn_puntocoma CONDICION tkn_puntocoma tkn_id ITERADOR tkn_parentesisde tkn_llaveiz BLOQUE tkn_llaveder 
            {
              Nodo RESULT =null;
		parser.errores.add("Se esperaba un parentesis de apertura '(' for\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FOR",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // FOR ::= tkn_for tkn_parentesisiz ASIGNACION EXPR tkn_puntocoma CONDICION tkn_puntocoma tkn_id ITERADOR tkn_parentesisde tkn_llaveiz BLOQUE tkn_llaveder 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FOR",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // ELSE ::= 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ELSE",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // ELSE ::= tkn_else error BLOQUE tkn_llaveder 
            {
              Nodo RESULT =null;
		parser.errores.add("Se esperaba el simbolo '{' en else\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ELSE",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // ELSE ::= tkn_else IF 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ELSE",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // ELSE ::= tkn_else tkn_llaveiz BLOQUE tkn_llaveder 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ELSE",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // IF ::= tkn_if tkn_parentesisiz CONDICION error tkn_llaveiz BLOQUE tkn_llaveder ELSE 
            {
              Nodo RESULT =null;
		parser.errores.add("Se esperaba el simbolo ')' en bloque if\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IF",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // IF ::= tkn_if error CONDICION tkn_parentesisde tkn_llaveiz BLOQUE tkn_llaveder ELSE 
            {
              Nodo RESULT =null;
		parser.errores.add("Se esperaba el simbolo '(' en bloque if\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IF",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // IF ::= tkn_if tkn_parentesisiz CONDICION tkn_parentesisde error BLOQUE tkn_llaveder ELSE 
            {
              Nodo RESULT =null;
		parser.errores.add("Llave de apertura '{' ausente en bloque if\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IF",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // IF ::= tkn_if tkn_parentesisiz CONDICION tkn_parentesisde tkn_llaveiz BLOQUE tkn_llaveder ELSE 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IF",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // PARAMS ::= 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMS",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // PARAMS ::= TIPO 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMS",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // PARAMS ::= DECLR 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMS",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // PARAMS ::= DECLR tkn_coma PARAMS 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMS",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // PARAMS ::= TIPO tkn_coma PARAMS 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMS",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ASIGN ::= error tkn_puntocoma 
            {
              Nodo RESULT =null;
		parser.errores.add("Declaracion de variable incorrecta \n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGN",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // ASIGN ::= DECLASIGN tkn_puntocoma 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGN",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // DECLASIGN ::= tkn_id tkn_oprel tkn_id tkn_parentesisiz error tkn_parentesisde 
            {
              Nodo RESULT =null;
		parser.errores.add("Argumentos en llamado de función erroneos \n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLASIGN",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // DECLASIGN ::= DECLR tkn_oprel tkn_id tkn_parentesisiz error tkn_parentesisde 
            {
              Nodo RESULT =null;
		parser.errores.add("Argumentos en llamado de función erroneos \n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLASIGN",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // DECLASIGN ::= tkn_id tkn_oprel tkn_id tkn_parentesisiz ARGS tkn_parentesisde 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLASIGN",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // DECLASIGN ::= DECLR tkn_oprel tkn_id tkn_parentesisiz ARGS tkn_parentesisde 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLASIGN",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // DECLASIGN ::= DECLR 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLASIGN",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // DECLASIGN ::= tkn_id error EXPR 
            {
              Nodo RESULT =null;
		parser.errores.add("Se esperaba operador relacional en declaración \n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLASIGN",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // DECLASIGN ::= tkn_id tkn_oprel EXPR 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLASIGN",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // DECLASIGN ::= tkn_id tkn_oprel EXPR tkn_coma DECLASIGN 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLASIGN",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // DECLASIGN ::= tkn_id error DECLASIGN 
            {
              Nodo RESULT =null;
		parser.errores.add("Se esperaba el simbolo ',' en declaración \n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLASIGN",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // DECLASIGN ::= tkn_id tkn_coma DECLASIGN 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLASIGN",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // DECLASIGN ::= DECLR tkn_coma DECLASIGN 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLASIGN",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // DECLASIGN ::= DECLR tkn_oprel EXPR 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLASIGN",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // DECLASIGN ::= DECLR tkn_oprel EXPR tkn_coma DECLASIGN 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLASIGN",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // ASIGNACION ::= TIPO error tkn_oprel 
            {
              Nodo RESULT =null;
		parser.errores.add("Se esperaba un identificador en bloque for\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // ASIGNACION ::= tkn_id tkn_oprel 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // ASIGNACION ::= TIPO tkn_id tkn_oprel 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // DECLR ::= error tkn_id 
            {
              Nodo RESULT =null;
		parser.errores.add("Tipo de dato incorrecto\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLR",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // DECLR ::= TIPO tkn_id 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLR",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // PROTOFUN ::= DECLR error PARAMS tkn_parentesisde 
            {
              Nodo RESULT =null;
		parser.errores.add("Se esperaba un '(' en la funcion o prototipo\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROTOFUN",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // PROTOFUN ::= DECLR tkn_parentesisiz PARAMS tkn_parentesisde 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROTOFUN",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // FUNCION ::= PROTOFUN tkn_llaveiz BLOQUE tkn_return EXPR error tkn_llaveiz 
            {
              Nodo RESULT =null;
		parser.errores.add("Se esperaba un ';' en linea de retorno de la funcion\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCION",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // FUNCION ::= PROTOFUN tkn_llaveiz BLOQUE tkn_return EXPR tkn_puntocoma error 
            {
              Nodo RESULT =null;
		parser.errores.add("Llave de cierre '}' ausente en la funcion\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCION",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // FUNCION ::= tkn_int tkn_main tkn_parentesisiz tkn_parentesisde tkn_llaveiz BLOQUE tkn_return EXPR tkn_puntocoma tkn_llaveder 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCION",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // FUNCION ::= PROTOFUN tkn_llaveiz BLOQUE tkn_return EXPR tkn_puntocoma tkn_llaveder 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCION",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // PROTOTIPO ::= PROTOFUN tkn_puntocoma 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROTOTIPO",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // PROGRAM ::= ASIGN PROGRAM 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROGRAM",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // PROGRAM ::= FUNCION PROGRAM 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROGRAM",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // PROGRAM ::= PROTOTIPO PROGRAM 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROGRAM",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= PROGRAM 
            {
              Nodo RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo p = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            parser.gramas.add("Inicio de programa reconocido");
            Nodo nodo = new Nodo("PROGRAMA",parser.cont);
            parser.cont++;
            nodo.addHijo(p);
            parser.raiz=nodo;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIO",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo start_val = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

