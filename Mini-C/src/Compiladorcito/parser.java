
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Sep 13 11:11:50 CST 2022
//----------------------------------------------------

package Compiladorcito;

import java_cup.runtime.*;
import java.util.ArrayList;
import java.util.*;
import java.io.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Sep 13 11:11:50 CST 2022
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\162\000\002\002\004\000\002\027\015\000\002\027" +
    "\015\000\002\027\015\000\002\027\015\000\002\027\015" +
    "\000\002\045\004\000\002\045\004\000\002\020\010\000" +
    "\002\020\011\000\002\020\011\000\002\040\003\000\002" +
    "\040\003\000\002\040\003\000\002\040\003\000\002\006" +
    "\005\000\002\006\005\000\002\015\005\000\002\015\006" +
    "\000\002\015\003\000\002\015\002\000\002\031\004\000" +
    "\002\031\002\000\002\002\004\000\002\002\003\000\002" +
    "\024\003\000\002\024\002\000\002\030\003\000\002\030" +
    "\002\000\002\037\003\000\002\037\002\000\002\033\006" +
    "\000\002\033\005\000\002\033\003\000\002\033\004\000" +
    "\002\025\006\000\002\025\004\000\002\025\006\000\002" +
    "\025\006\000\002\025\004\000\002\023\015\000\002\023" +
    "\015\000\002\023\015\000\002\023\015\000\002\023\015" +
    "\000\002\036\005\000\002\036\003\000\002\035\011\000" +
    "\002\026\010\000\002\026\003\000\002\026\010\000\002" +
    "\004\012\000\002\004\012\000\002\004\012\000\002\004" +
    "\012\000\002\011\006\000\002\011\004\000\002\011\002" +
    "\000\002\005\020\000\002\005\017\000\002\005\020\000" +
    "\002\005\020\000\002\005\020\000\002\003\011\000\002" +
    "\003\011\000\002\003\011\000\002\003\011\000\002\007" +
    "\004\000\002\007\004\000\002\007\004\000\002\007\004" +
    "\000\002\007\004\000\002\007\004\000\002\007\004\000" +
    "\002\007\004\000\002\007\004\000\002\007\004\000\002" +
    "\007\002\000\002\010\005\000\002\010\005\000\002\010" +
    "\007\000\002\010\007\000\002\010\005\000\002\010\003" +
    "\000\002\012\005\000\002\014\003\000\002\014\003\000" +
    "\002\014\003\000\002\014\003\000\002\014\003\000\002" +
    "\042\006\000\002\043\005\000\002\043\005\000\002\043" +
    "\005\000\002\043\005\000\002\043\003\000\002\016\011" +
    "\000\002\016\007\000\002\016\011\000\002\016\011\000" +
    "\002\016\011\000\002\016\011\000\002\022\012\000\002" +
    "\022\012\000\002\022\012\000\002\022\012\000\002\022" +
    "\012\000\002\032\003\000\002\032\003\000\002\032\003" +
    "\000\002\046\003\000\002\046\003\000\002\046\005\000" +
    "\002\021\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0161\000\016\003\014\012\015\013\011\014\004\036" +
    "\016\037\013\001\002\000\016\022\uffa8\040\uffa8\041\uffa8" +
    "\043\uffa8\044\uffa8\054\uffa8\001\002\000\016\003\uffd0\012" +
    "\uffd0\013\uffd0\014\uffd0\036\uffd0\037\uffd0\001\002\000\004" +
    "\002\uffe9\001\002\000\004\002\u0163\001\002\000\016\003" +
    "\014\012\015\013\011\014\004\036\016\037\013\001\002" +
    "\000\016\022\uffaa\040\uffaa\041\uffaa\043\uffaa\044\uffaa\054" +
    "\uffaa\001\002\000\012\040\u015d\041\uffed\043\057\054\025" +
    "\001\002\000\016\022\uffac\040\uffac\041\uffac\043\uffac\044" +
    "\uffac\054\uffac\001\002\000\012\040\u0151\041\uffed\043\057" +
    "\054\025\001\002\000\016\022\uffab\040\uffab\041\uffab\043" +
    "\uffab\044\uffab\054\uffab\001\002\000\016\003\017\011\020" +
    "\040\uffa9\041\uffa9\043\uffa9\054\uffa9\001\002\000\004\021" +
    "\u0148\001\002\000\004\021\021\001\002\000\006\003\022" +
    "\022\023\001\002\000\004\023\u0141\001\002\000\004\023" +
    "\024\001\002\000\042\003\045\012\015\013\011\014\004" +
    "\016\051\017\053\021\043\027\040\030\uffb4\031\030\032" +
    "\054\036\044\037\013\040\052\043\057\054\025\001\002" +
    "\000\032\003\uff94\004\uff94\005\uff94\007\uff94\010\uff94\022" +
    "\uff94\025\uff94\026\uff94\035\uff94\041\uff94\042\uff94\044\uff94" +
    "\001\002\000\044\003\045\012\015\013\011\014\004\016" +
    "\051\017\053\021\043\024\uffb4\027\040\030\uffb4\031\030" +
    "\032\054\036\044\037\013\040\052\043\057\054\025\001" +
    "\002\000\016\003\uffae\022\uffae\025\u013d\026\u013c\041\uffae" +
    "\042\uffae\001\002\000\004\021\u012a\001\002\000\044\003" +
    "\045\012\015\013\011\014\004\016\051\017\053\021\043" +
    "\024\uffb4\027\040\030\uffb4\031\030\032\054\036\044\037" +
    "\013\040\052\043\057\054\025\001\002\000\044\003\045" +
    "\012\015\013\011\014\004\016\051\017\053\021\043\024" +
    "\uffb4\027\040\030\uffb4\031\030\032\054\036\044\037\013" +
    "\040\052\043\057\054\025\001\002\000\044\003\045\012" +
    "\015\013\011\014\004\016\051\017\053\021\043\024\uffb4" +
    "\027\040\030\uffb4\031\030\032\054\036\044\037\013\040" +
    "\052\043\057\054\025\001\002\000\026\003\uffa2\004\uffa2" +
    "\005\uffa2\007\uffa2\010\uffa2\022\uffa2\025\uffa2\026\uffa2\041" +
    "\uffa2\042\uffa2\001\002\000\004\030\362\001\002\000\044" +
    "\003\045\012\015\013\011\014\004\016\051\017\053\021" +
    "\043\024\uffb4\027\040\030\uffb4\031\030\032\054\036\044" +
    "\037\013\040\052\043\057\054\025\001\002\000\044\003" +
    "\045\012\015\013\011\014\004\016\051\017\053\021\043" +
    "\024\uffb4\027\040\030\uffb4\031\030\032\054\036\044\037" +
    "\013\040\052\043\057\054\025\001\002\000\006\003\302" +
    "\021\303\001\002\000\012\004\250\005\246\007\245\010" +
    "\254\001\002\000\012\040\230\041\uffed\043\057\054\025" +
    "\001\002\000\012\021\243\040\064\043\057\054\025\001" +
    "\002\000\016\022\uffa9\040\uffa9\041\uffa9\043\uffa9\044\uffa9" +
    "\054\uffa9\001\002\000\012\040\230\041\uffed\043\057\054" +
    "\025\001\002\000\044\003\045\012\015\013\011\014\004" +
    "\016\051\017\053\021\043\024\uffb4\027\040\030\uffb4\031" +
    "\030\032\054\036\044\037\013\040\052\043\057\054\025" +
    "\001\002\000\044\003\045\012\015\013\011\014\004\016" +
    "\051\017\053\021\043\024\uffb4\027\040\030\uffb4\031\030" +
    "\032\054\036\044\037\013\040\052\043\057\054\025\001" +
    "\002\000\044\003\045\012\015\013\011\014\004\016\051" +
    "\017\053\021\043\024\uffb4\027\040\030\uffb4\031\030\032" +
    "\054\036\044\037\013\040\052\043\057\054\025\001\002" +
    "\000\006\003\166\021\167\001\002\000\016\004\161\005" +
    "\uff96\007\uff96\010\uff96\033\160\034\157\001\002\000\006" +
    "\003\134\021\135\001\002\000\006\003\105\021\106\001" +
    "\002\000\044\003\045\012\015\013\011\014\004\016\051" +
    "\017\053\021\043\024\uffb4\027\040\030\uffb4\031\030\032" +
    "\054\036\044\037\013\040\052\043\057\054\025\001\002" +
    "\000\006\003\060\042\061\001\002\000\032\003\uff95\004" +
    "\uff95\005\uff95\007\uff95\010\uff95\022\uff95\025\uff95\026\uff95" +
    "\035\uff95\041\uff95\042\uff95\044\uff95\001\002\000\016\021" +
    "\043\031\030\040\064\043\057\053\063\054\025\001\002" +
    "\000\016\021\043\031\030\040\064\043\057\053\063\054" +
    "\025\001\002\000\010\003\ufff5\035\ufff5\041\ufff5\001\002" +
    "\000\010\003\ufff6\035\ufff6\041\ufff6\001\002\000\032\003" +
    "\uff96\004\uff96\005\uff96\007\uff96\010\uff96\022\uff96\025\uff96" +
    "\026\uff96\035\uff96\041\uff96\042\uff96\044\uff96\001\002\000" +
    "\010\003\ufff4\035\ufff4\041\ufff4\001\002\000\020\003\ufff3" +
    "\004\uffa2\005\uffa2\007\uffa2\010\uffa2\035\ufff3\041\ufff3\001" +
    "\002\000\006\003\071\035\070\001\002\000\016\021\043" +
    "\031\030\040\064\043\057\053\063\054\025\001\002\000" +
    "\016\021\043\031\030\040\064\043\057\053\063\054\025" +
    "\001\002\000\004\041\073\001\002\000\004\003\074\001" +
    "\002\000\050\003\ufff7\012\ufff7\013\ufff7\014\ufff7\016\ufff7" +
    "\017\ufff7\021\ufff7\024\ufff7\027\ufff7\030\ufff7\031\ufff7\032" +
    "\ufff7\035\ufff7\036\ufff7\037\ufff7\040\ufff7\041\ufff7\043\ufff7" +
    "\054\ufff7\001\002\000\004\041\076\001\002\000\050\003" +
    "\ufff9\012\ufff9\013\ufff9\014\ufff9\016\ufff9\017\ufff9\021\ufff9" +
    "\024\ufff9\027\ufff9\030\ufff9\031\ufff9\032\ufff9\035\ufff9\036" +
    "\ufff9\037\ufff9\040\ufff9\041\ufff9\043\ufff9\054\ufff9\001\002" +
    "\000\004\035\100\001\002\000\016\021\043\031\030\040" +
    "\064\043\057\053\063\054\025\001\002\000\004\041\102" +
    "\001\002\000\004\003\103\001\002\000\050\003\ufff8\012" +
    "\ufff8\013\ufff8\014\ufff8\016\ufff8\017\ufff8\021\ufff8\024\ufff8" +
    "\027\ufff8\030\ufff8\031\ufff8\032\ufff8\035\ufff8\036\ufff8\037" +
    "\ufff8\040\ufff8\041\ufff8\043\ufff8\054\ufff8\001\002\000\006" +
    "\024\uffbd\030\uffbd\001\002\000\004\053\126\001\002\000" +
    "\004\053\107\001\002\000\004\044\110\001\002\000\006" +
    "\003\111\052\112\001\002\000\004\040\123\001\002\000" +
    "\006\003\113\040\114\001\002\000\004\022\121\001\002" +
    "\000\006\003\115\022\116\001\002\000\004\041\120\001" +
    "\002\000\004\041\117\001\002\000\044\003\uff9b\012\uff9b" +
    "\013\uff9b\014\uff9b\016\uff9b\017\uff9b\021\uff9b\024\uff9b\027" +
    "\uff9b\030\uff9b\031\uff9b\032\uff9b\036\uff9b\037\uff9b\040\uff9b" +
    "\043\uff9b\054\uff9b\001\002\000\044\003\uff98\012\uff98\013" +
    "\uff98\014\uff98\016\uff98\017\uff98\021\uff98\024\uff98\027\uff98" +
    "\030\uff98\031\uff98\032\uff98\036\uff98\037\uff98\040\uff98\043" +
    "\uff98\054\uff98\001\002\000\004\041\122\001\002\000\044" +
    "\003\uff99\012\uff99\013\uff99\014\uff99\016\uff99\017\uff99\021" +
    "\uff99\024\uff99\027\uff99\030\uff99\031\uff99\032\uff99\036\uff99" +
    "\037\uff99\040\uff99\043\uff99\054\uff99\001\002\000\004\022" +
    "\124\001\002\000\004\041\125\001\002\000\044\003\uff9a" +
    "\012\uff9a\013\uff9a\014\uff9a\016\uff9a\017\uff9a\021\uff9a\024" +
    "\uff9a\027\uff9a\030\uff9a\031\uff9a\032\uff9a\036\uff9a\037\uff9a" +
    "\040\uff9a\043\uff9a\054\uff9a\001\002\000\004\044\127\001" +
    "\002\000\004\052\130\001\002\000\004\040\131\001\002" +
    "\000\004\022\132\001\002\000\004\041\133\001\002\000" +
    "\044\003\uff97\012\uff97\013\uff97\014\uff97\016\uff97\017\uff97" +
    "\021\uff97\024\uff97\027\uff97\030\uff97\031\uff97\032\uff97\036" +
    "\uff97\037\uff97\040\uff97\043\uff97\054\uff97\001\002\000\012" +
    "\021\043\040\064\043\057\054\025\001\002\000\012\021" +
    "\043\040\064\043\057\054\025\001\002\000\006\003\137" +
    "\022\140\001\002\000\004\023\147\001\002\000\006\003" +
    "\141\023\142\001\002\000\042\003\045\012\015\013\011" +
    "\014\004\016\051\017\053\021\043\024\uffb4\027\040\031" +
    "\030\032\054\036\044\037\013\040\052\043\057\054\025" +
    "\001\002\000\042\003\045\012\015\013\011\014\004\016" +
    "\051\017\053\021\043\024\uffb4\027\040\031\030\032\054" +
    "\036\044\037\013\040\052\043\057\054\025\001\002\000" +
    "\004\024\144\001\002\000\044\003\uffc2\012\uffc2\013\uffc2" +
    "\014\uffc2\016\uffc2\017\uffc2\021\uffc2\024\uffc2\027\uffc2\030" +
    "\uffc2\031\uffc2\032\uffc2\036\uffc2\037\uffc2\040\uffc2\043\uffc2" +
    "\054\uffc2\001\002\000\004\024\146\001\002\000\044\003" +
    "\uffc1\012\uffc1\013\uffc1\014\uffc1\016\uffc1\017\uffc1\021\uffc1" +
    "\024\uffc1\027\uffc1\030\uffc1\031\uffc1\032\uffc1\036\uffc1\037" +
    "\uffc1\040\uffc1\043\uffc1\054\uffc1\001\002\000\042\003\045" +
    "\012\015\013\011\014\004\016\051\017\053\021\043\024" +
    "\uffb4\027\040\031\030\032\054\036\044\037\013\040\052" +
    "\043\057\054\025\001\002\000\004\024\151\001\002\000" +
    "\044\003\uffbf\012\uffbf\013\uffbf\014\uffbf\016\uffbf\017\uffbf" +
    "\021\uffbf\024\uffbf\027\uffbf\030\uffbf\031\uffbf\032\uffbf\036" +
    "\uffbf\037\uffbf\040\uffbf\043\uffbf\054\uffbf\001\002\000\004" +
    "\022\153\001\002\000\004\023\154\001\002\000\042\003" +
    "\045\012\015\013\011\014\004\016\051\017\053\021\043" +
    "\024\uffb4\027\040\031\030\032\054\036\044\037\013\040" +
    "\052\043\057\054\025\001\002\000\004\024\156\001\002" +
    "\000\044\003\uffc0\012\uffc0\013\uffc0\014\uffc0\016\uffc0\017" +
    "\uffc0\021\uffc0\024\uffc0\027\uffc0\030\uffc0\031\uffc0\032\uffc0" +
    "\036\uffc0\037\uffc0\040\uffc0\043\uffc0\054\uffc0\001\002\000" +
    "\006\022\uff92\041\uff92\001\002\000\006\022\uff93\041\uff93" +
    "\001\002\000\004\010\164\001\002\000\004\041\163\001" +
    "\002\000\044\003\uff90\012\uff90\013\uff90\014\uff90\016\uff90" +
    "\017\uff90\021\uff90\024\uff90\027\uff90\030\uff90\031\uff90\032" +
    "\uff90\036\uff90\037\uff90\040\uff90\043\uff90\054\uff90\001\002" +
    "\000\010\040\064\043\057\054\025\001\002\000\006\022" +
    "\uff91\041\uff91\001\002\000\012\021\043\040\064\043\057" +
    "\054\025\001\002\000\012\021\043\040\064\043\057\054" +
    "\025\001\002\000\006\003\171\022\172\001\002\000\004" +
    "\023\210\001\002\000\006\003\173\023\174\001\002\000" +
    "\042\003\045\012\015\013\011\014\004\016\051\017\053" +
    "\021\043\024\uffb4\027\040\031\030\032\054\036\044\037" +
    "\013\040\052\043\057\054\025\001\002\000\042\003\045" +
    "\012\015\013\011\014\004\016\051\017\053\021\043\024" +
    "\uffb4\027\040\031\030\032\054\036\044\037\013\040\052" +
    "\043\057\054\025\001\002\000\004\024\176\001\002\000" +
    "\046\003\uffc8\012\uffc8\013\uffc8\014\uffc8\016\uffc8\017\uffc8" +
    "\020\200\021\uffc8\024\uffc8\027\uffc8\030\uffc8\031\uffc8\032" +
    "\uffc8\036\uffc8\037\uffc8\040\uffc8\043\uffc8\054\uffc8\001\002" +
    "\000\044\003\uffce\012\uffce\013\uffce\014\uffce\016\uffce\017" +
    "\uffce\021\uffce\024\uffce\027\uffce\030\uffce\031\uffce\032\uffce" +
    "\036\uffce\037\uffce\040\uffce\043\uffce\054\uffce\001\002\000" +
    "\006\016\051\023\202\001\002\000\044\003\uffc9\012\uffc9" +
    "\013\uffc9\014\uffc9\016\uffc9\017\uffc9\021\uffc9\024\uffc9\027" +
    "\uffc9\030\uffc9\031\uffc9\032\uffc9\036\uffc9\037\uffc9\040\uffc9" +
    "\043\uffc9\054\uffc9\001\002\000\042\003\045\012\015\013" +
    "\011\014\004\016\051\017\053\021\043\024\uffb4\027\040" +
    "\031\030\032\054\036\044\037\013\040\052\043\057\054" +
    "\025\001\002\000\004\024\204\001\002\000\044\003\uffca" +
    "\012\uffca\013\uffca\014\uffca\016\uffca\017\uffca\021\uffca\024" +
    "\uffca\027\uffca\030\uffca\031\uffca\032\uffca\036\uffca\037\uffca" +
    "\040\uffca\043\uffca\054\uffca\001\002\000\004\024\206\001" +
    "\002\000\046\003\uffc8\012\uffc8\013\uffc8\014\uffc8\016\uffc8" +
    "\017\uffc8\020\200\021\uffc8\024\uffc8\027\uffc8\030\uffc8\031" +
    "\uffc8\032\uffc8\036\uffc8\037\uffc8\040\uffc8\043\uffc8\054\uffc8" +
    "\001\002\000\044\003\uffcc\012\uffcc\013\uffcc\014\uffcc\016" +
    "\uffcc\017\uffcc\021\uffcc\024\uffcc\027\uffcc\030\uffcc\031\uffcc" +
    "\032\uffcc\036\uffcc\037\uffcc\040\uffcc\043\uffcc\054\uffcc\001" +
    "\002\000\042\003\045\012\015\013\011\014\004\016\051" +
    "\017\053\021\043\024\uffb4\027\040\031\030\032\054\036" +
    "\044\037\013\040\052\043\057\054\025\001\002\000\004" +
    "\024\212\001\002\000\046\003\uffc8\012\uffc8\013\uffc8\014" +
    "\uffc8\016\uffc8\017\uffc8\020\200\021\uffc8\024\uffc8\027\uffc8" +
    "\030\uffc8\031\uffc8\032\uffc8\036\uffc8\037\uffc8\040\uffc8\043" +
    "\uffc8\054\uffc8\001\002\000\044\003\uffcb\012\uffcb\013\uffcb" +
    "\014\uffcb\016\uffcb\017\uffcb\021\uffcb\024\uffcb\027\uffcb\030" +
    "\uffcb\031\uffcb\032\uffcb\036\uffcb\037\uffcb\040\uffcb\043\uffcb" +
    "\054\uffcb\001\002\000\004\022\215\001\002\000\004\023" +
    "\216\001\002\000\042\003\045\012\015\013\011\014\004" +
    "\016\051\017\053\021\043\024\uffb4\027\040\031\030\032" +
    "\054\036\044\037\013\040\052\043\057\054\025\001\002" +
    "\000\004\024\220\001\002\000\046\003\uffc8\012\uffc8\013" +
    "\uffc8\014\uffc8\016\uffc8\017\uffc8\020\200\021\uffc8\024\uffc8" +
    "\027\uffc8\030\uffc8\031\uffc8\032\uffc8\036\uffc8\037\uffc8\040" +
    "\uffc8\043\uffc8\054\uffc8\001\002\000\044\003\uffcd\012\uffcd" +
    "\013\uffcd\014\uffcd\016\uffcd\017\uffcd\021\uffcd\024\uffcd\027" +
    "\uffcd\030\uffcd\031\uffcd\032\uffcd\036\uffcd\037\uffcd\040\uffcd" +
    "\043\uffcd\054\uffcd\001\002\000\006\024\uffb5\030\uffb5\001" +
    "\002\000\006\024\uffb7\030\uffb7\001\002\000\006\024\uffb8" +
    "\030\uffb8\001\002\000\010\040\064\043\057\054\025\001" +
    "\002\000\004\041\235\001\002\000\006\041\uffee\044\233" +
    "\001\002\000\012\003\231\010\232\041\uff96\044\uff96\001" +
    "\002\000\012\021\ufffa\040\ufffa\043\ufffa\054\ufffa\001\002" +
    "\000\012\021\ufffb\040\ufffb\043\ufffb\054\ufffb\001\002\000" +
    "\012\040\230\041\uffed\043\057\054\025\001\002\000\004" +
    "\041\ufff0\001\002\000\044\003\ufff1\012\ufff1\013\ufff1\014" +
    "\ufff1\016\ufff1\017\ufff1\021\ufff1\024\ufff1\027\ufff1\030\ufff1" +
    "\031\ufff1\032\ufff1\036\ufff1\037\ufff1\040\ufff1\043\ufff1\054" +
    "\ufff1\001\002\000\004\044\237\001\002\000\012\040\230" +
    "\041\uffed\043\057\054\025\001\002\000\004\041\uffef\001" +
    "\002\000\004\022\256\001\002\000\014\004\250\005\246" +
    "\007\245\010\254\022\247\001\002\000\012\021\243\040" +
    "\064\043\057\054\025\001\002\000\012\004\250\005\246" +
    "\007\245\022\247\001\002\000\012\021\243\040\064\043" +
    "\057\054\025\001\002\000\012\021\243\040\064\043\057" +
    "\054\025\001\002\000\026\003\uffa3\004\uffa3\005\uffa3\007" +
    "\uffa3\010\uffa3\022\uffa3\025\uffa3\026\uffa3\041\uffa3\042\uffa3" +
    "\001\002\000\012\021\243\040\064\043\057\054\025\001" +
    "\002\000\026\003\uffa6\004\uffa6\005\246\007\245\010\uffa6" +
    "\022\uffa6\025\uffa6\026\uffa6\041\uffa6\042\uffa6\001\002\000" +
    "\026\003\uffa5\004\uffa5\005\uffa5\007\uffa5\010\uffa5\022\uffa5" +
    "\025\uffa5\026\uffa5\041\uffa5\042\uffa5\001\002\000\026\003" +
    "\uffa4\004\uffa4\005\uffa4\007\uffa4\010\uffa4\022\uffa4\025\uffa4" +
    "\026\uffa4\041\uffa4\042\uffa4\001\002\000\012\021\243\040" +
    "\064\043\057\054\025\001\002\000\024\003\uffad\004\250" +
    "\005\246\007\245\022\uffad\025\uffad\026\uffad\041\uffad\042" +
    "\uffad\001\002\000\016\003\uffaf\022\uffaf\025\260\026\257" +
    "\041\uffaf\042\uffaf\001\002\000\012\021\043\040\064\043" +
    "\057\054\025\001\002\000\012\021\043\040\064\043\057" +
    "\054\025\001\002\000\012\003\uffb1\022\uffb1\041\uffb1\042" +
    "\uffb1\001\002\000\012\003\uffb0\022\uffb0\041\uffb0\042\uffb0" +
    "\001\002\000\012\021\243\040\270\043\057\054\025\001" +
    "\002\000\004\041\265\001\002\000\044\003\ufff2\012\ufff2" +
    "\013\ufff2\014\ufff2\016\ufff2\017\ufff2\021\ufff2\024\ufff2\027" +
    "\ufff2\030\ufff2\031\ufff2\032\ufff2\036\ufff2\037\ufff2\040\ufff2" +
    "\043\ufff2\054\ufff2\001\002\000\012\004\250\005\246\007" +
    "\245\041\301\001\002\000\014\004\uffa2\005\uffa2\007\uffa2" +
    "\041\uffa2\044\237\001\002\000\016\004\uff96\005\uff96\007" +
    "\uff96\021\271\041\uff96\044\uff96\001\002\000\006\022\uffe3" +
    "\040\273\001\002\000\004\022\uffe4\001\002\000\006\022" +
    "\uffd3\044\277\001\002\000\004\022\275\001\002\000\004" +
    "\041\276\001\002\000\044\003\uffd2\012\uffd2\013\uffd2\014" +
    "\uffd2\016\uffd2\017\uffd2\021\uffd2\024\uffd2\027\uffd2\030\uffd2" +
    "\031\uffd2\032\uffd2\036\uffd2\037\uffd2\040\uffd2\043\uffd2\054" +
    "\uffd2\001\002\000\004\040\273\001\002\000\004\022\uffd4" +
    "\001\002\000\044\003\uffa7\012\uffa7\013\uffa7\014\uffa7\016" +
    "\uffa7\017\uffa7\021\uffa7\024\uffa7\027\uffa7\030\uffa7\031\uffa7" +
    "\032\uffa7\036\uffa7\037\uffa7\040\uffa7\043\uffa7\054\uffa7\001" +
    "\002\000\004\036\344\001\002\000\006\036\306\040\305" +
    "\001\002\000\010\040\064\043\057\054\025\001\002\000" +
    "\006\003\231\010\232\001\002\000\004\040\305\001\002" +
    "\000\010\040\064\043\057\054\025\001\002\000\004\041" +
    "\311\001\002\000\012\021\043\040\064\043\057\054\025" +
    "\001\002\000\004\041\313\001\002\000\004\040\314\001" +
    "\002\000\012\003\315\004\161\033\160\034\157\001\002" +
    "\000\004\022\326\001\002\000\004\022\317\001\002\000" +
    "\006\003\320\023\321\001\002\000\042\003\045\012\015" +
    "\013\011\014\004\016\051\017\053\021\043\024\uffb4\027" +
    "\040\031\030\032\054\036\044\037\013\040\052\043\057" +
    "\054\025\001\002\000\042\003\045\012\015\013\011\014" +
    "\004\016\051\017\053\021\043\024\uffb4\027\040\031\030" +
    "\032\054\036\044\037\013\040\052\043\057\054\025\001" +
    "\002\000\004\024\323\001\002\000\044\003\uffc7\012\uffc7" +
    "\013\uffc7\014\uffc7\016\uffc7\017\uffc7\021\uffc7\024\uffc7\027" +
    "\uffc7\030\uffc7\031\uffc7\032\uffc7\036\uffc7\037\uffc7\040\uffc7" +
    "\043\uffc7\054\uffc7\001\002\000\004\024\325\001\002\000" +
    "\044\003\uffc3\012\uffc3\013\uffc3\014\uffc3\016\uffc3\017\uffc3" +
    "\021\uffc3\024\uffc3\027\uffc3\030\uffc3\031\uffc3\032\uffc3\036" +
    "\uffc3\037\uffc3\040\uffc3\043\uffc3\054\uffc3\001\002\000\004" +
    "\023\327\001\002\000\042\003\045\012\015\013\011\014" +
    "\004\016\051\017\053\021\043\024\uffb4\027\040\031\030" +
    "\032\054\036\044\037\013\040\052\043\057\054\025\001" +
    "\002\000\004\024\331\001\002\000\044\003\uffc4\012\uffc4" +
    "\013\uffc4\014\uffc4\016\uffc4\017\uffc4\021\uffc4\024\uffc4\027" +
    "\uffc4\030\uffc4\031\uffc4\032\uffc4\036\uffc4\037\uffc4\040\uffc4" +
    "\043\uffc4\054\uffc4\001\002\000\004\041\333\001\002\000" +
    "\012\021\043\040\064\043\057\054\025\001\002\000\004" +
    "\041\335\001\002\000\004\040\336\001\002\000\010\004" +
    "\161\033\160\034\157\001\002\000\004\022\340\001\002" +
    "\000\004\023\341\001\002\000\042\003\045\012\015\013" +
    "\011\014\004\016\051\017\053\021\043\024\uffb4\027\040" +
    "\031\030\032\054\036\044\037\013\040\052\043\057\054" +
    "\025\001\002\000\004\024\343\001\002\000\044\003\uffc6" +
    "\012\uffc6\013\uffc6\014\uffc6\016\uffc6\017\uffc6\021\uffc6\024" +
    "\uffc6\027\uffc6\030\uffc6\031\uffc6\032\uffc6\036\uffc6\037\uffc6" +
    "\040\uffc6\043\uffc6\054\uffc6\001\002\000\004\040\305\001" +
    "\002\000\010\040\064\043\057\054\025\001\002\000\004" +
    "\041\347\001\002\000\012\021\043\040\064\043\057\054" +
    "\025\001\002\000\004\041\351\001\002\000\004\040\352" +
    "\001\002\000\010\004\161\033\160\034\157\001\002\000" +
    "\004\022\354\001\002\000\004\023\355\001\002\000\042" +
    "\003\045\012\015\013\011\014\004\016\051\017\053\021" +
    "\043\024\uffb4\027\040\031\030\032\054\036\044\037\013" +
    "\040\052\043\057\054\025\001\002\000\004\024\357\001" +
    "\002\000\044\003\uffc5\012\uffc5\013\uffc5\014\uffc5\016\uffc5" +
    "\017\uffc5\021\uffc5\024\uffc5\027\uffc5\030\uffc5\031\uffc5\032" +
    "\uffc5\036\uffc5\037\uffc5\040\uffc5\043\uffc5\054\uffc5\001\002" +
    "\000\006\024\uffba\030\uffba\001\002\000\006\024\uffbc\030" +
    "\uffbc\001\002\000\004\043\363\001\002\000\006\003\364" +
    "\041\365\001\002\000\004\024\u0125\001\002\000\006\003" +
    "\366\024\367\001\002\000\016\002\uffeb\012\015\013\011" +
    "\014\004\036\044\037\013\001\002\000\016\002\uffeb\012" +
    "\015\013\011\014\004\036\044\037\013\001\002\000\016" +
    "\002\uffeb\012\015\013\011\014\004\036\044\037\013\001" +
    "\002\000\004\002\000\001\002\000\004\040\373\001\002" +
    "\000\006\003\374\021\375\001\002\000\020\003\u0100\012" +
    "\015\013\011\014\004\022\uffe7\036\044\037\013\001\002" +
    "\000\020\003\u0100\012\015\013\011\014\004\022\uffe7\036" +
    "\044\037\013\001\002\000\004\022\u010a\001\002\000\004" +
    "\040\u0105\001\002\000\004\040\u0102\001\002\000\004\022" +
    "\uffe8\001\002\000\006\022\uffda\044\u0103\001\002\000\016" +
    "\003\u0100\012\015\013\011\014\004\036\044\037\013\001" +
    "\002\000\004\022\uffdb\001\002\000\010\003\u0107\022\uffdd" +
    "\044\u0106\001\002\000\016\003\u0100\012\015\013\011\014" +
    "\004\036\044\037\013\001\002\000\016\003\u0100\012\015" +
    "\013\011\014\004\036\044\037\013\001\002\000\004\022" +
    "\uffdc\001\002\000\004\022\uffde\001\002\000\006\003\u010b" +
    "\023\u010c\001\002\000\042\003\045\012\015\013\011\014" +
    "\004\016\051\017\053\021\043\027\040\030\uffb4\031\030" +
    "\032\054\036\044\037\013\040\052\043\057\054\025\001" +
    "\002\000\042\003\045\012\015\013\011\014\004\016\051" +
    "\017\053\021\043\027\040\030\uffb4\031\030\032\054\036" +
    "\044\037\013\040\052\043\057\054\025\001\002\000\004" +
    "\030\u010e\001\002\000\012\003\u0110\040\064\043\057\054" +
    "\025\001\002\000\004\041\u0113\001\002\000\004\041\u0111" +
    "\001\002\000\004\024\u0112\001\002\000\016\002\uffd5\012" +
    "\uffd5\013\uffd5\014\uffd5\036\uffd5\037\uffd5\001\002\000\006" +
    "\003\u0114\024\u0115\001\002\000\016\002\uffd8\012\uffd8\013" +
    "\uffd8\014\uffd8\036\uffd8\037\uffd8\001\002\000\016\002\uffd9" +
    "\012\uffd9\013\uffd9\014\uffd9\036\uffd9\037\uffd9\001\002\000" +
    "\004\030\u0117\001\002\000\010\040\064\043\057\054\025" +
    "\001\002\000\004\041\u0119\001\002\000\004\024\u011a\001" +
    "\002\000\016\002\uffd7\012\uffd7\013\uffd7\014\uffd7\036\uffd7" +
    "\037\uffd7\001\002\000\004\022\u011c\001\002\000\004\023" +
    "\u011d\001\002\000\042\003\045\012\015\013\011\014\004" +
    "\016\051\017\053\021\043\027\040\030\uffb4\031\030\032" +
    "\054\036\044\037\013\040\052\043\057\054\025\001\002" +
    "\000\004\030\u011f\001\002\000\010\040\064\043\057\054" +
    "\025\001\002\000\004\041\u0121\001\002\000\004\024\u0122" +
    "\001\002\000\016\002\uffd6\012\uffd6\013\uffd6\014\uffd6\036" +
    "\uffd6\037\uffd6\001\002\000\004\002\uffec\001\002\000\004" +
    "\002\ufffc\001\002\000\016\002\uffeb\012\015\013\011\014" +
    "\004\036\044\037\013\001\002\000\004\002\ufffd\001\002" +
    "\000\006\024\uffbb\030\uffbb\001\002\000\006\024\uffb9\030" +
    "\uffb9\001\002\000\006\024\uffbe\030\uffbe\001\002\000\004" +
    "\053\u012b\001\002\000\010\003\u012d\022\u012e\044\u012c\001" +
    "\002\000\006\003\u0133\040\u0134\001\002\000\004\040\u0130" +
    "\001\002\000\004\041\u012f\001\002\000\050\003\uffa0\012" +
    "\uffa0\013\uffa0\014\uffa0\016\uffa0\017\uffa0\021\uffa0\024\uffa0" +
    "\027\uffa0\030\uffa0\031\uffa0\032\uffa0\035\uffa0\036\uffa0\037" +
    "\uffa0\040\uffa0\041\uffa0\043\uffa0\054\uffa0\001\002\000\004" +
    "\022\u0131\001\002\000\004\041\u0132\001\002\000\050\003" +
    "\uff9f\012\uff9f\013\uff9f\014\uff9f\016\uff9f\017\uff9f\021\uff9f" +
    "\024\uff9f\027\uff9f\030\uff9f\031\uff9f\032\uff9f\035\uff9f\036" +
    "\uff9f\037\uff9f\040\uff9f\041\uff9f\043\uff9f\054\uff9f\001\002" +
    "\000\004\022\u013a\001\002\000\006\003\u0135\022\u0136\001" +
    "\002\000\004\041\u0139\001\002\000\006\003\u0137\041\u0138" +
    "\001\002\000\050\003\uff9c\012\uff9c\013\uff9c\014\uff9c\016" +
    "\uff9c\017\uff9c\021\uff9c\024\uff9c\027\uff9c\030\uff9c\031\uff9c" +
    "\032\uff9c\035\uff9c\036\uff9c\037\uff9c\040\uff9c\041\uff9c\043" +
    "\uff9c\054\uff9c\001\002\000\050\003\uffa1\012\uffa1\013\uffa1" +
    "\014\uffa1\016\uffa1\017\uffa1\021\uffa1\024\uffa1\027\uffa1\030" +
    "\uffa1\031\uffa1\032\uffa1\035\uffa1\036\uffa1\037\uffa1\040\uffa1" +
    "\041\uffa1\043\uffa1\054\uffa1\001\002\000\050\003\uff9d\012" +
    "\uff9d\013\uff9d\014\uff9d\016\uff9d\017\uff9d\021\uff9d\024\uff9d" +
    "\027\uff9d\030\uff9d\031\uff9d\032\uff9d\035\uff9d\036\uff9d\037" +
    "\uff9d\040\uff9d\041\uff9d\043\uff9d\054\uff9d\001\002\000\004" +
    "\041\u013b\001\002\000\050\003\uff9e\012\uff9e\013\uff9e\014" +
    "\uff9e\016\uff9e\017\uff9e\021\uff9e\024\uff9e\027\uff9e\030\uff9e" +
    "\031\uff9e\032\uff9e\035\uff9e\036\uff9e\037\uff9e\040\uff9e\041" +
    "\uff9e\043\uff9e\054\uff9e\001\002\000\012\021\043\040\064" +
    "\043\057\054\025\001\002\000\012\021\043\040\064\043" +
    "\057\054\025\001\002\000\012\003\uffb3\022\uffb3\041\uffb3" +
    "\042\uffb3\001\002\000\012\003\uffb2\022\uffb2\041\uffb2\042" +
    "\uffb2\001\002\000\006\024\uffb6\030\uffb6\001\002\000\042" +
    "\003\045\012\015\013\011\014\004\016\051\017\053\021" +
    "\043\027\040\030\uffb4\031\030\032\054\036\044\037\013" +
    "\040\052\043\057\054\025\001\002\000\004\030\u0143\001" +
    "\002\000\004\043\u0144\001\002\000\004\041\u0145\001\002" +
    "\000\004\024\u0146\001\002\000\016\002\uffeb\012\015\013" +
    "\011\014\004\036\044\037\013\001\002\000\004\002\uffff" +
    "\001\002\000\004\022\u0149\001\002\000\004\023\u014a\001" +
    "\002\000\042\003\045\012\015\013\011\014\004\016\051" +
    "\017\053\021\043\027\040\030\uffb4\031\030\032\054\036" +
    "\044\037\013\040\052\043\057\054\025\001\002\000\004" +
    "\030\u014c\001\002\000\004\043\u014d\001\002\000\004\041" +
    "\u014e\001\002\000\004\024\u014f\001\002\000\016\002\uffeb" +
    "\012\015\013\011\014\004\036\044\037\013\001\002\000" +
    "\004\002\ufffe\001\002\000\014\003\231\010\232\021\u0152" +
    "\041\uff96\044\uff96\001\002\000\016\012\015\013\011\014" +
    "\004\022\uffe5\036\044\037\013\001\002\000\004\022\u015b" +
    "\001\002\000\004\022\uffe6\001\002\000\010\022\uffe0\040" +
    "\u0157\044\u0156\001\002\000\014\012\015\013\011\014\004" +
    "\036\044\037\013\001\002\000\006\022\uffdf\044\u0158\001" +
    "\002\000\014\012\015\013\011\014\004\036\044\037\013" +
    "\001\002\000\004\022\uffe2\001\002\000\004\022\uffe1\001" +
    "\002\000\004\041\u015c\001\002\000\016\003\uffcf\012\uffcf" +
    "\013\uffcf\014\uffcf\036\uffcf\037\uffcf\001\002\000\014\003" +
    "\231\010\232\021\u015e\041\uff96\044\uff96\001\002\000\016" +
    "\012\015\013\011\014\004\022\uffe5\036\044\037\013\001" +
    "\002\000\004\022\u0160\001\002\000\004\041\u0161\001\002" +
    "\000\016\003\uffd1\012\uffd1\013\uffd1\014\uffd1\036\uffd1\037" +
    "\uffd1\001\002\000\004\002\uffea\001\002\000\004\002\001" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0161\000\014\002\006\006\004\014\011\026\007\027" +
    "\005\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\002\u0161\006\004\014" +
    "\011\026\007\027\005\001\001\000\002\001\001\000\010" +
    "\015\263\032\226\045\224\001\001\000\002\001\001\000" +
    "\010\015\225\032\226\045\224\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\042" +
    "\003\030\004\035\005\054\006\032\007\034\010\055\012" +
    "\026\014\041\016\036\020\047\021\025\022\031\032\033" +
    "\035\046\042\045\043\040\001\001\000\002\001\001\000" +
    "\042\003\030\004\035\005\054\006\032\007\u013f\010\055" +
    "\012\026\014\041\016\036\020\047\021\025\022\031\032" +
    "\033\035\046\042\045\043\040\001\001\000\002\001\001" +
    "\000\002\001\001\000\042\003\030\004\035\005\054\006" +
    "\032\007\u0128\010\055\012\026\014\041\016\036\020\047" +
    "\021\025\022\031\032\033\035\046\042\045\043\040\001" +
    "\001\000\042\003\030\004\035\005\054\006\032\007\u0127" +
    "\010\055\012\026\014\041\016\036\020\047\021\025\022" +
    "\031\032\033\035\046\042\045\043\040\001\001\000\042" +
    "\003\030\004\035\005\054\006\032\007\u0126\010\055\012" +
    "\026\014\041\016\036\020\047\021\025\022\031\032\033" +
    "\035\046\042\045\043\040\001\001\000\002\001\001\000" +
    "\002\001\001\000\042\003\030\004\035\005\054\006\032" +
    "\007\360\010\055\012\026\014\041\016\036\020\047\021" +
    "\025\022\031\032\033\035\046\042\045\043\040\001\001" +
    "\000\042\003\030\004\035\005\054\006\032\007\357\010" +
    "\055\012\026\014\041\016\036\020\047\021\025\022\031" +
    "\032\033\035\046\042\045\043\040\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\015\263\032\226\045\262" +
    "\001\001\000\010\012\240\032\033\043\241\001\001\000" +
    "\002\001\001\000\010\015\225\032\226\045\224\001\001" +
    "\000\042\003\030\004\035\005\054\006\032\007\223\010" +
    "\055\012\026\014\041\016\036\020\047\021\025\022\031" +
    "\032\033\035\046\042\045\043\040\001\001\000\042\003" +
    "\030\004\035\005\054\006\032\007\222\010\055\012\026" +
    "\014\041\016\036\020\047\021\025\022\031\032\033\035" +
    "\046\042\045\043\040\001\001\000\042\003\030\004\035" +
    "\005\054\006\032\007\221\010\055\012\026\014\041\016" +
    "\036\020\047\021\025\022\031\032\033\035\046\042\045" +
    "\043\040\001\001\000\002\001\001\000\004\046\161\001" +
    "\001\000\002\001\001\000\002\001\001\000\042\003\030" +
    "\004\035\005\054\006\032\007\103\010\055\012\026\014" +
    "\041\016\036\020\047\021\025\022\031\032\033\035\046" +
    "\042\045\043\040\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\010\055\012\026\016\061\020\064\032\065" +
    "\040\076\043\040\001\001\000\020\010\055\012\026\016" +
    "\061\020\064\032\065\040\066\043\040\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\010\055" +
    "\012\026\016\061\020\064\032\065\040\074\043\040\001" +
    "\001\000\020\010\055\012\026\016\061\020\064\032\065" +
    "\040\071\043\040\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\010\055\012\026\016\061\020" +
    "\064\032\065\040\100\043\040\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\010\151\012\026\032\033\043\040\001\001\000" +
    "\012\010\135\012\026\032\033\043\040\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\042\003" +
    "\030\004\035\005\054\006\032\007\144\010\055\012\026" +
    "\014\041\016\036\020\047\021\025\022\031\032\033\035" +
    "\046\042\045\043\040\001\001\000\042\003\030\004\035" +
    "\005\054\006\032\007\142\010\055\012\026\014\041\016" +
    "\036\020\047\021\025\022\031\032\033\035\046\042\045" +
    "\043\040\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\042\003\030\004\035" +
    "\005\054\006\032\007\147\010\055\012\026\014\041\016" +
    "\036\020\047\021\025\022\031\032\033\035\046\042\045" +
    "\043\040\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\042\003\030\004\035" +
    "\005\054\006\032\007\154\010\055\012\026\014\041\016" +
    "\036\020\047\021\025\022\031\032\033\035\046\042\045" +
    "\043\040\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\032\164\001\001\000" +
    "\002\001\001\000\012\010\213\012\026\032\033\043\040" +
    "\001\001\000\012\010\167\012\026\032\033\043\040\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\042\003\030\004\035\005\054\006\032\007\204\010" +
    "\055\012\026\014\041\016\036\020\047\021\025\022\031" +
    "\032\033\035\046\042\045\043\040\001\001\000\042\003" +
    "\030\004\035\005\054\006\032\007\174\010\055\012\026" +
    "\014\041\016\036\020\047\021\025\022\031\032\033\035" +
    "\046\042\045\043\040\001\001\000\002\001\001\000\004" +
    "\011\176\001\001\000\002\001\001\000\004\004\200\001" +
    "\001\000\002\001\001\000\042\003\030\004\035\005\054" +
    "\006\032\007\202\010\055\012\026\014\041\016\036\020" +
    "\047\021\025\022\031\032\033\035\046\042\045\043\040" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\011\206\001\001\000\002\001\001\000\042" +
    "\003\030\004\035\005\054\006\032\007\210\010\055\012" +
    "\026\014\041\016\036\020\047\021\025\022\031\032\033" +
    "\035\046\042\045\043\040\001\001\000\002\001\001\000" +
    "\004\011\212\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\042\003\030\004\035\005\054\006" +
    "\032\007\216\010\055\012\026\014\041\016\036\020\047" +
    "\021\025\022\031\032\033\035\046\042\045\043\040\001" +
    "\001\000\002\001\001\000\004\011\220\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\032\235\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\015\233\032\226\045\224\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\015" +
    "\237\032\226\045\224\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\032\033\043\243\001" +
    "\001\000\002\001\001\000\006\032\033\043\252\001\001" +
    "\000\006\032\033\043\251\001\001\000\002\001\001\000" +
    "\006\032\033\043\250\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\032\033\043\254\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\010\261" +
    "\012\026\032\033\043\040\001\001\000\012\010\260\012" +
    "\026\032\033\043\040\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\032\266\043\265\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\036\271\037\273\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\036\277\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\045\303\001\001\000\004\032\331\001\001\000\002\001" +
    "\001\000\004\045\306\001\001\000\004\032\307\001\001" +
    "\000\002\001\001\000\012\010\311\012\026\032\033\043" +
    "\040\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\046\315\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\042\003\030\004\035\005\054\006\032" +
    "\007\323\010\055\012\026\014\041\016\036\020\047\021" +
    "\025\022\031\032\033\035\046\042\045\043\040\001\001" +
    "\000\042\003\030\004\035\005\054\006\032\007\321\010" +
    "\055\012\026\014\041\016\036\020\047\021\025\022\031" +
    "\032\033\035\046\042\045\043\040\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\042\003\030\004\035\005\054\006" +
    "\032\007\327\010\055\012\026\014\041\016\036\020\047" +
    "\021\025\022\031\032\033\035\046\042\045\043\040\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\010\333\012\026\032\033\043\040\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\046\336\001\001" +
    "\000\002\001\001\000\002\001\001\000\042\003\030\004" +
    "\035\005\054\006\032\007\341\010\055\012\026\014\041" +
    "\016\036\020\047\021\025\022\031\032\033\035\046\042" +
    "\045\043\040\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\045\344\001\001\000\004\032\345\001\001\000" +
    "\002\001\001\000\012\010\347\012\026\032\033\043\040" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\046" +
    "\352\001\001\000\002\001\001\000\002\001\001\000\042" +
    "\003\030\004\035\005\054\006\032\007\355\010\055\012" +
    "\026\014\041\016\036\020\047\021\025\022\031\032\033" +
    "\035\046\042\045\043\040\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\014\371\023\367\031\u0123\001\001\000\010" +
    "\014\371\023\367\031\370\001\001\000\010\014\371\023" +
    "\367\031\u0122\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\014\376\024\u011a\025\u0100\001" +
    "\001\000\010\014\376\024\375\025\u0100\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\014\376\025\u0103\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\014\376\025" +
    "\u0108\001\001\000\006\014\376\025\u0107\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\042\003" +
    "\030\004\035\005\054\006\032\007\u0115\010\055\012\026" +
    "\014\041\016\036\020\047\021\025\022\031\032\033\035" +
    "\046\042\045\043\040\001\001\000\042\003\030\004\035" +
    "\005\054\006\032\007\u010c\010\055\012\026\014\041\016" +
    "\036\020\047\021\025\022\031\032\033\035\046\042\045" +
    "\043\040\001\001\000\002\001\001\000\004\032\u010e\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\032\u0117\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\042\003\030\004\035" +
    "\005\054\006\032\007\u011d\010\055\012\026\014\041\016" +
    "\036\020\047\021\025\022\031\032\033\035\046\042\045" +
    "\043\040\001\001\000\002\001\001\000\004\032\u011f\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\014\371\023" +
    "\367\031\u0125\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\010\u013e\012\026\032\033\043\040\001" +
    "\001\000\012\010\u013d\012\026\032\033\043\040\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\042\003\030\004\035\005\054\006\032\007\u0141\010\055" +
    "\012\026\014\041\016\036\020\047\021\025\022\031\032" +
    "\033\035\046\042\045\043\040\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\014\371\023\367\031\u0146\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\042\003\030\004" +
    "\035\005\054\006\032\007\u014a\010\055\012\026\014\041" +
    "\016\036\020\047\021\025\022\031\032\033\035\046\042" +
    "\045\043\040\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\014\371\023" +
    "\367\031\u014f\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\014\u0154\030\u0152\033\u0153\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\014\u0154" +
    "\033\u0159\001\001\000\002\001\001\000\006\014\u0154\033" +
    "\u0158\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\014" +
    "\u0154\030\u015e\033\u0153\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    ArrayList gramas = new ArrayList();
    public Nodo raiz;
    public int cont = 0;
    public int maximo(){
    int a=5;
    return a;
}
    ArrayList errores=new ArrayList();
    public Symbol s;
    @Override
    public void syntax_error (Symbol s){
        if(s.left==-1){
        }else{
                errores.add("Syntax error en la línea: " + (s.left) + " , columna: " +(s.right)+ " con el símbolo = "+(s.value));
    }
}
    @Override
    public void unrecovered_syntax_error(Symbol s){
    if(s.left==-1){
    }else{
        errores.add("Error desconocido, por favor revise la linea: " + (s.left ) + " y columna:  " + (s.right )+ "Con simbolo: "+s.value);
    }    
    }
    public Symbol getS(){
        return this.s;
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // CONTADOR ::= tkn_id ITERADOR tkn_puntocoma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTADOR",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // ITERADOR ::= tkn_opadicion tkn_oprel RETURN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ITERADOR",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // ITERADOR ::= tkn_decrement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ITERADOR",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // ITERADOR ::= tkn_increment 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ITERADOR",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // RETURN ::= tkn_caracter 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("RETURN",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // RETURN ::= tkn_num 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("RETURN",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // RETURN ::= tkn_id 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("RETURN",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // SCANF ::= tkn_scanf error tkn_cadena tkn_coma tkn_ampersand tkn_id tkn_parentesisde tkn_puntocoma 
            {
              Object RESULT =null;
		parser.errores.add("parentesis de apertura '(' ausente en la funcion scanf");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SCANF",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // SCANF ::= tkn_scanf tkn_parentesisiz tkn_cadena tkn_coma tkn_ampersand tkn_id error tkn_puntocoma 
            {
              Object RESULT =null;
		parser.errores.add("parentesis de cierre ')' ausente en la funcion scanf");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SCANF",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // SCANF ::= tkn_scanf tkn_parentesisiz tkn_cadena tkn_coma tkn_ampersand error tkn_parentesisde tkn_puntocoma 
            {
              Object RESULT =null;
		parser.errores.add("identificador ausente en la funcion scanf");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SCANF",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // SCANF ::= tkn_scanf tkn_parentesisiz tkn_cadena tkn_coma error tkn_id tkn_parentesisde tkn_puntocoma 
            {
              Object RESULT =null;
		parser.errores.add("Puntero a identificador '&' ausente en la funcion scanf");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SCANF",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // SCANF ::= tkn_scanf tkn_parentesisiz tkn_cadena tkn_coma tkn_ampersand tkn_id tkn_parentesisde tkn_puntocoma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SCANF",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // PRINTF ::= tkn_printf tkn_parentesisiz tkn_cadena tkn_coma tkn_id tkn_parentesisde error 
            {
              Object RESULT =null;
		parser.errores.add("se esperaba el simbolo ';' en la funcion printf");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRINTF",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // PRINTF ::= tkn_printf tkn_parentesisiz tkn_cadena tkn_coma tkn_id error tkn_puntocoma 
            {
              Object RESULT =null;
		parser.errores.add("parentesis de cierre '(' ausente en la funcion printf");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRINTF",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // PRINTF ::= tkn_printf tkn_parentesisiz tkn_cadena tkn_coma error tkn_parentesisde tkn_puntocoma 
            {
              Object RESULT =null;
		parser.errores.add("identificador ausente en la funcion printf");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRINTF",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // PRINTF ::= tkn_printf tkn_parentesisiz tkn_cadena error tkn_id tkn_parentesisde tkn_puntocoma 
            {
              Object RESULT =null;
		parser.errores.add("coma ',' ausente en la funcion printf");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRINTF",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // PRINTF ::= tkn_printf tkn_parentesisiz tkn_cadena tkn_parentesisde tkn_puntocoma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRINTF",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // PRINTF ::= tkn_printf tkn_parentesisiz tkn_cadena tkn_coma tkn_id tkn_parentesisde tkn_puntocoma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRINTF",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // EXPR ::= RETURN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPR",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // EXPR ::= tkn_parentesisiz EXPR tkn_parentesisde 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPR",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // EXPR ::= EXPR tkn_opmod EXPR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPR",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // EXPR ::= EXPR tkn_opmulti EXPR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPR",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // EXPR ::= EXPR tkn_opadicion EXPR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPR",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // EXPRFIN ::= TIPO ASIGN EXPR tkn_puntocoma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRFIN",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // TIPO ::= tkn_void 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // TIPO ::= tkn_int 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // TIPO ::= tkn_charp 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // TIPO ::= tkn_intp 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // TIPO ::= tkn_char 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // CONDICIONP ::= EXPR tkn_oprel EXPR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICIONP",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // CONDICION ::= CONDICIONP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICION",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // CONDICION ::= tkn_parentesisiz CONDICIONP tkn_parentesisde 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICION",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // CONDICION ::= tkn_parentesisiz CONDICIONP tkn_parentesisde tkn_or CONDICION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICION",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // CONDICION ::= tkn_parentesisiz CONDICIONP tkn_parentesisde tkn_and CONDICION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICION",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // CONDICION ::= CONDICIONP tkn_or CONDICION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICION",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // CONDICION ::= CONDICIONP tkn_and CONDICION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICION",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // BLOQUE ::= 
            {
              Object RESULT =null;
		
                    Nodo node = new Nodo("VACIO",parser.cont);
                    parser.cont++;
                    node.addHijo(new Nodo("VACIO",parser.cont++));
                    parser.cont++;
                    RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // BLOQUE ::= TERNARIO BLOQUE 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // BLOQUE ::= CONTADOR BLOQUE 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // BLOQUE ::= LLAMADO BLOQUE 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // BLOQUE ::= EXPRFIN BLOQUE 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // BLOQUE ::= SCANF BLOQUE 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // BLOQUE ::= PRINTF BLOQUE 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // BLOQUE ::= DECLARACION BLOQUE 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // BLOQUE ::= IF BLOQUE 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // BLOQUE ::= FOR BLOQUE 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // BLOQUE ::= WHILE BLOQUE 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Nodo nodo = new Nodo("BLOQUE",parser.cont);
                parser.cont++;
                nodo.addHijo(i);
                nodo.addHijo(s);
                RESULT=nodo;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // WHILE ::= tkn_while tkn_parentesisiz CONDICION error tkn_llaveiz BLOQUE tkn_llaveder 
            {
              Object RESULT =null;
		parser.errores.add("Parentesis de cierre ')' ausente en bloque while");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("WHILE",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // WHILE ::= tkn_while error CONDICION tkn_parentesisde tkn_llaveiz BLOQUE tkn_llaveder 
            {
              Object RESULT =null;
		parser.errores.add("Parentesis de apertura '(' ausente en bloque while");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("WHILE",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // WHILE ::= tkn_while tkn_parentesisiz CONDICION tkn_parentesisde error BLOQUE tkn_llaveder 
            {
              Object RESULT =null;
		parser.errores.add("Llave de apertura '{' ausente en bloque while");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("WHILE",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // WHILE ::= tkn_while tkn_parentesisiz CONDICION tkn_parentesisde tkn_llaveiz BLOQUE tkn_llaveder 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("WHILE",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // FOR ::= tkn_for tkn_parentesisiz tkn_int ASIGN RETURN tkn_puntocoma CONDICION tkn_puntocoma tkn_id ITERADOR tkn_parentesisde error BLOQUE tkn_llaveder 
            {
              Object RESULT =null;
		parser.errores.add("Llave de apertura '{' ausente en bloque for");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FOR",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // FOR ::= tkn_for tkn_parentesisiz tkn_int ASIGN RETURN tkn_puntocoma CONDICION tkn_puntocoma tkn_id error tkn_parentesisde tkn_llaveiz BLOQUE tkn_llaveder 
            {
              Object RESULT =null;
		parser.errores.add("autoincremento o autodecremento ausente en bloque for");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FOR",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // FOR ::= tkn_for error tkn_int ASIGN RETURN tkn_puntocoma CONDICION tkn_puntocoma tkn_id ITERADOR tkn_parentesisde tkn_llaveiz BLOQUE tkn_llaveder 
            {
              Object RESULT =null;
		parser.errores.add("Parentesis de apertura '(' ausente en bloque for");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FOR",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // FOR ::= tkn_for tkn_parentesisiz ASIGN RETURN tkn_puntocoma CONDICION tkn_puntocoma tkn_id ITERADOR tkn_parentesisde tkn_llaveiz BLOQUE tkn_llaveder 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FOR",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // FOR ::= tkn_for tkn_parentesisiz tkn_int ASIGN RETURN tkn_puntocoma CONDICION tkn_puntocoma tkn_id ITERADOR tkn_parentesisde tkn_llaveiz BLOQUE tkn_llaveder 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FOR",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // ELSE ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ELSE",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // ELSE ::= tkn_else IF 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ELSE",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // ELSE ::= tkn_else tkn_llaveiz BLOQUE tkn_llaveder 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ELSE",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // IF ::= tkn_if tkn_parentesisiz CONDICION error tkn_llaveiz BLOQUE tkn_llaveder ELSE 
            {
              Object RESULT =null;
		parser.errores.add("Parentesis de cierre ausente ')' en bloque if");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IF",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // IF ::= tkn_if tkn_parentesisiz CONDICION tkn_parentesisde error BLOQUE tkn_llaveder ELSE 
            {
              Object RESULT =null;
		parser.errores.add("Llave de apertura ausente en bloque if");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IF",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // IF ::= tkn_if error CONDICION tkn_parentesisde tkn_llaveiz BLOQUE tkn_llaveder ELSE 
            {
              Object RESULT =null;
		parser.errores.add("Parentesis de apertura ausente");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IF",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // IF ::= tkn_if tkn_parentesisiz CONDICION tkn_parentesisde tkn_llaveiz BLOQUE tkn_llaveder ELSE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IF",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // PROTOTIPO ::= error tkn_id tkn_parentesisiz PROTOPARAMS tkn_parentesisde tkn_puntocoma 
            {
              Object RESULT =null;
		parser.errores.add("Tipo de dato incorrecto para prototipo\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROTOTIPO",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // PROTOTIPO ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROTOTIPO",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // PROTOTIPO ::= TIPO tkn_id tkn_parentesisiz PROTOPARAMS tkn_parentesisde tkn_puntocoma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROTOTIPO",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // LLAMADO ::= TIPO ASIGN tkn_id tkn_parentesisiz ARGS tkn_parentesisde tkn_puntocoma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LLAMADO",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // ARGSPARAMS ::= tkn_id 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARGSPARAMS",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // ARGSPARAMS ::= tkn_id tkn_coma ARGSPARAMS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARGSPARAMS",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // FUNCION ::= TIPO tkn_id tkn_parentesisiz FUNCIONPARAMS tkn_parentesisde tkn_llaveiz BLOQUE tkn_return error tkn_puntocoma tkn_llaveder 
            {
              Object RESULT =null;
		parser.errores.add("Tipo de retorno inválido en la funcion\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCION",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // FUNCION ::= TIPO tkn_id error FUNCIONPARAMS tkn_parentesisde tkn_llaveiz BLOQUE tkn_return RETURN tkn_puntocoma tkn_llaveder 
            {
              Object RESULT =null;
		parser.errores.add("Parentesis de apertura '(' ausente en la funcion\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCION",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // FUNCION ::= TIPO tkn_id tkn_parentesisiz FUNCIONPARAMS tkn_parentesisde error BLOQUE tkn_return RETURN tkn_puntocoma tkn_llaveder 
            {
              Object RESULT =null;
		parser.errores.add("Llave de apertura '{' ausente en la funcion\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCION",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // FUNCION ::= TIPO tkn_id tkn_parentesisiz FUNCIONPARAMS tkn_parentesisde tkn_llaveiz BLOQUE tkn_return RETURN tkn_puntocoma error 
            {
              Object RESULT =null;
		parser.errores.add("Llave de cierre '}' ausente en la funcion\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCION",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // FUNCION ::= TIPO tkn_id tkn_parentesisiz FUNCIONPARAMS tkn_parentesisde tkn_llaveiz BLOQUE tkn_return RETURN tkn_puntocoma tkn_llaveder 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCION",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // DECLAPARAM ::= error tkn_id 
            {
              Object RESULT =null;
		parser.errores.add("Tipo de dato incorrecto para el parámetro de la función\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLAPARAM",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // DECLAPARAM ::= error tkn_id tkn_coma DECLAPARAM 
            {
              Object RESULT =null;
		parser.errores.add("Tipo de dato incorrecto para los parámetros de la función\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLAPARAM",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // DECLAPARAM ::= TIPO tkn_id error DECLAPARAM 
            {
              Object RESULT =null;
		parser.errores.add("Se esperaba el simbolo ',' para separar parámetros en la función\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLAPARAM",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // DECLAPARAM ::= TIPO tkn_id 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLAPARAM",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // DECLAPARAM ::= TIPO tkn_id tkn_coma DECLAPARAM 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLAPARAM",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // PARAMS ::= TIPO tkn_id 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMS",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // PARAMS ::= TIPO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMS",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // PARAMS ::= TIPO tkn_coma PARAMS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMS",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // PARAMS ::= TIPO tkn_id tkn_coma PARAMS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMS",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // ARGS ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARGS",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ARGS ::= ARGSPARAMS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARGS",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // PROTOPARAMS ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROTOPARAMS",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // PROTOPARAMS ::= PARAMS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROTOPARAMS",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // FUNCIONPARAMS ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCIONPARAMS",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // FUNCIONPARAMS ::= DECLAPARAM 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCIONPARAMS",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // INICIO ::= MAIN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // INICIO ::= PROTOTIPO INICIO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // FUNCIONES ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCIONES",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // FUNCIONES ::= FUNCION FUNCIONES 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCIONES",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // IDINT ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IDINT",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // IDINT ::= RETURN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IDINT",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // IDINT ::= ASIGN RETURN tkn_coma IDINT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IDINT",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // IDINT ::= RETURN tkn_coma IDINT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IDINT",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // DECLARACION ::= error IDINT tkn_puntocoma 
            {
              Object RESULT =null;
		parser.errores.add("Tipo de dato incorrecto para declaración de variables\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // DECLARACION ::= TIPO IDINT tkn_puntocoma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // EXPRTERNARIO ::= RETURN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRTERNARIO",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // EXPRTERNARIO ::= TERNARIO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRTERNARIO",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // EXPRTERNARIO ::= PRINTF 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRTERNARIO",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // EXPRTERNARIO ::= tkn_cadena 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRTERNARIO",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // TERNARIO ::= CONDICION tkn_ternario EXPRTERNARIO error EXPRTERNARIO tkn_puntocoma error 
            {
              Object RESULT =null;
		parser.errores.add("Se esperaba el simbolo ':' expresión condicional\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TERNARIO",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // TERNARIO ::= CONDICION error EXPRTERNARIO tkn_dospuntos EXPRTERNARIO tkn_puntocoma error 
            {
              Object RESULT =null;
		parser.errores.add("Se esperaba el simbolo '?' expresión condicional\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TERNARIO",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // TERNARIO ::= CONDICION tkn_ternario EXPRTERNARIO tkn_dospuntos EXPRTERNARIO tkn_puntocoma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TERNARIO",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // ASIGN ::= tkn_id error 
            {
              Object RESULT =null;
		parser.errores.add("Nomenclatura incorrecta de asignación\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGN",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // ASIGN ::= tkn_id tkn_oprel 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGN",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // MAIN ::= tkn_int tkn_main tkn_parentesisiz tkn_parentesisde tkn_llaveiz BLOQUE tkn_return tkn_num tkn_puntocoma error FUNCIONES 
            {
              Object RESULT =null;
		parser.errores.add("Punto y coma o llave de cierre ausente en retorno funcion main\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MAIN",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // MAIN ::= tkn_int tkn_main tkn_parentesisiz tkn_parentesisde tkn_llaveiz BLOQUE tkn_return tkn_num error tkn_llaveder FUNCIONES 
            {
              Object RESULT =null;
		parser.errores.add("Punto y coma o llave de cierre ausente en retorno funcion main\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MAIN",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // MAIN ::= tkn_int error tkn_parentesisiz tkn_parentesisde tkn_llaveiz BLOQUE tkn_return tkn_num tkn_puntocoma tkn_llaveder FUNCIONES 
            {
              Object RESULT =null;
		parser.errores.add("No hay funcion main o no esta escrito la palabra main\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MAIN",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // MAIN ::= tkn_int tkn_main tkn_parentesisiz error tkn_llaveiz BLOQUE tkn_return tkn_num tkn_puntocoma tkn_llaveder FUNCIONES 
            {
              Object RESULT =null;
		parser.errores.add("Parentesis de cierre ')' ausente en el main\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MAIN",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // MAIN ::= tkn_int tkn_main tkn_parentesisiz tkn_parentesisde tkn_llaveiz BLOQUE tkn_return tkn_num tkn_puntocoma tkn_llaveder FUNCIONES 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            parser.gramas.add("Funcion main reconocida");
            System.out.println(id);
            Nodo nodo = new Nodo(id.toString(),parser.cont);
            parser.cont++;
            parser.raiz=nodo;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MAIN",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

