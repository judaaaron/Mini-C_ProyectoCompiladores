
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Aug 31 22:52:45 CST 2022
//----------------------------------------------------

package Compiladorcito;

import java_cup.runtime.*;
import java.util.ArrayList;
import java.util.*;
import java.io.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Aug 31 22:52:45 CST 2022
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\117\000\002\002\004\000\002\031\015\000\002\031" +
    "\015\000\002\031\015\000\002\006\005\000\002\017\005" +
    "\000\002\017\003\000\002\017\007\000\002\017\005\000" +
    "\002\017\007\000\002\017\005\000\002\017\002\000\002" +
    "\033\004\000\002\033\002\000\002\002\004\000\002\002" +
    "\003\000\002\026\003\000\002\026\002\000\002\032\003" +
    "\000\002\032\002\000\002\042\003\000\002\042\002\000" +
    "\002\035\006\000\002\035\005\000\002\035\003\000\002" +
    "\035\004\000\002\027\006\000\002\027\004\000\002\025" +
    "\015\000\002\025\015\000\002\025\015\000\002\041\005" +
    "\000\002\041\003\000\002\037\012\000\002\037\007\000" +
    "\002\030\010\000\002\030\003\000\002\004\012\000\002" +
    "\012\006\000\002\012\004\000\002\012\002\000\002\005" +
    "\021\000\002\003\011\000\002\007\004\000\002\007\004" +
    "\000\002\007\004\000\002\007\004\000\002\007\004\000" +
    "\002\007\004\000\002\007\004\000\002\007\004\000\002" +
    "\007\004\000\002\007\002\000\002\010\005\000\002\010" +
    "\005\000\002\010\007\000\002\010\007\000\002\010\005" +
    "\000\002\010\003\000\002\013\005\000\002\014\003\000" +
    "\002\014\003\000\002\015\003\000\002\015\003\000\002" +
    "\015\003\000\002\016\003\000\002\016\003\000\002\016" +
    "\003\000\002\016\003\000\002\016\003\000\002\020\011" +
    "\000\002\020\007\000\002\022\010\000\002\023\005\000" +
    "\002\023\005\000\002\024\012\000\002\034\003\000\002" +
    "\034\003\000\002\034\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\331\000\014\003\013\012\014\013\010\035\015\036" +
    "\011\001\002\000\004\002\ufff2\001\002\000\014\003\uffdd" +
    "\012\uffdd\013\uffdd\035\uffdd\036\uffdd\001\002\000\004\002" +
    "\333\001\002\000\014\003\013\012\014\013\010\035\015" +
    "\036\011\001\002\000\014\003\uffbe\021\uffbe\037\uffbe\040" +
    "\uffbe\043\uffbe\001\002\000\014\003\uffc0\021\uffc0\037\uffc0" +
    "\040\uffc0\043\uffc0\001\002\000\006\037\316\040\ufff6\001" +
    "\002\000\010\010\304\037\uffbc\040\uffbc\001\002\000\014" +
    "\003\uffbf\021\uffbf\037\uffbf\040\uffbf\043\uffbf\001\002\000" +
    "\010\010\016\037\uffbd\040\uffbd\001\002\000\004\020\017" +
    "\001\002\000\004\021\020\001\002\000\006\003\021\022" +
    "\022\001\002\000\040\003\041\012\014\013\010\014\034" +
    "\015\044\016\046\020\037\026\035\027\uffcd\030\025\031" +
    "\050\035\040\036\011\037\045\042\053\001\002\000\040" +
    "\003\041\012\014\013\010\014\034\015\044\016\046\020" +
    "\037\026\035\027\uffcd\030\025\031\050\035\040\036\011" +
    "\037\045\042\053\001\002\000\046\003\041\012\014\013" +
    "\010\014\034\015\044\016\046\020\037\023\uffcd\026\035" +
    "\027\uffcd\030\025\031\050\034\uffcd\035\040\036\011\037" +
    "\045\040\uffcd\042\053\001\002\000\014\021\uffc7\024\272" +
    "\025\271\040\uffc7\041\uffc7\001\002\000\004\020\261\001" +
    "\002\000\046\003\041\012\014\013\010\014\034\015\044" +
    "\016\046\020\037\023\uffcd\026\035\027\uffcd\030\025\031" +
    "\050\034\uffcd\035\040\036\011\037\045\040\uffcd\042\053" +
    "\001\002\000\046\003\041\012\014\013\010\014\034\015" +
    "\044\016\046\020\037\023\uffcd\026\035\027\uffcd\030\025" +
    "\031\050\034\uffcd\035\040\036\011\037\045\040\uffcd\042" +
    "\053\001\002\000\046\003\041\012\014\013\010\014\034" +
    "\015\044\016\046\020\037\023\uffcd\026\035\027\uffcd\030" +
    "\025\031\050\034\uffcd\035\040\036\011\037\045\040\uffcd" +
    "\042\053\001\002\000\046\003\041\012\014\013\010\014" +
    "\034\015\044\016\046\020\037\023\uffcd\026\035\027\uffcd" +
    "\030\025\031\050\034\uffcd\035\040\036\011\037\045\040" +
    "\uffcd\042\053\001\002\000\004\027\206\001\002\000\046" +
    "\003\041\012\014\013\010\014\034\015\044\016\046\020" +
    "\037\023\uffcd\026\035\027\uffcd\030\025\031\050\034\uffcd" +
    "\035\040\036\011\037\045\040\uffcd\042\053\001\002\000" +
    "\020\007\uffc3\011\uffc3\021\uffc3\024\uffc3\025\uffc3\040\uffc3" +
    "\041\uffc3\001\002\000\004\020\167\001\002\000\006\037" +
    "\145\040\ufff6\001\002\000\010\014\034\037\064\042\053" +
    "\001\002\000\014\003\uffbd\021\uffbd\037\uffbd\040\uffbd\043" +
    "\uffbd\001\002\000\014\003\uffbc\021\uffbc\037\uffbc\040\uffbc" +
    "\043\uffbc\001\002\000\046\003\041\012\014\013\010\014" +
    "\034\015\044\016\046\020\037\023\uffcd\026\035\027\uffcd" +
    "\030\025\031\050\034\uffcd\035\040\036\011\037\045\040" +
    "\uffcd\042\053\001\002\000\046\003\041\012\014\013\010" +
    "\014\034\015\044\016\046\020\037\023\uffcd\026\035\027" +
    "\uffcd\030\025\031\050\034\uffcd\035\040\036\011\037\045" +
    "\040\uffcd\042\053\001\002\000\004\020\120\001\002\000" +
    "\014\007\uffc1\011\uffc1\020\106\032\105\033\104\001\002" +
    "\000\004\020\076\001\002\000\046\003\041\012\014\013" +
    "\010\014\034\015\044\016\046\020\037\023\uffcd\026\035" +
    "\027\uffcd\030\025\031\050\034\uffcd\035\040\036\011\037" +
    "\045\040\uffcd\042\053\001\002\000\004\020\066\001\002" +
    "\000\006\007\063\011\062\001\002\000\004\041\054\001" +
    "\002\000\020\007\uffc2\011\uffc2\021\uffc2\024\uffc2\025\uffc2" +
    "\040\uffc2\041\uffc2\001\002\000\040\003\041\012\014\013" +
    "\010\014\034\015\044\016\046\020\037\026\035\030\025" +
    "\031\050\034\uffcd\035\040\036\011\037\045\042\053\001" +
    "\002\000\004\034\056\001\002\000\040\003\041\012\014" +
    "\013\010\014\034\015\044\016\046\020\037\026\035\030" +
    "\025\031\050\035\040\036\011\037\045\040\uffcd\042\053" +
    "\001\002\000\004\040\060\001\002\000\046\003\uffb9\012" +
    "\uffb9\013\uffb9\014\uffb9\015\uffb9\016\uffb9\020\uffb9\023\uffb9" +
    "\026\uffb9\027\uffb9\030\uffb9\031\uffb9\034\uffb9\035\uffb9\036" +
    "\uffb9\037\uffb9\040\uffb9\042\uffb9\001\002\000\010\014\034" +
    "\037\064\042\053\001\002\000\010\014\uffc4\037\uffc4\042" +
    "\uffc4\001\002\000\010\014\uffc5\037\uffc5\042\uffc5\001\002" +
    "\000\020\007\uffc1\011\uffc1\021\uffc1\024\uffc1\025\uffc1\040" +
    "\uffc1\041\uffc1\001\002\000\014\021\uffc6\024\uffc6\025\uffc6" +
    "\040\uffc6\041\uffc6\001\002\000\002\001\002\000\004\043" +
    "\070\001\002\000\004\051\071\001\002\000\004\037\072" +
    "\001\002\000\004\021\073\001\002\000\004\040\074\001" +
    "\002\000\046\003\uffb6\012\uffb6\013\uffb6\014\uffb6\015\uffb6" +
    "\016\uffb6\020\uffb6\023\uffb6\026\uffb6\027\uffb6\030\uffb6\031" +
    "\uffb6\034\uffb6\035\uffb6\036\uffb6\037\uffb6\040\uffb6\042\uffb6" +
    "\001\002\000\012\023\uffd5\027\uffd5\034\uffd5\040\uffd5\001" +
    "\002\000\012\014\034\020\037\037\064\042\053\001\002" +
    "\000\004\021\100\001\002\000\004\022\101\001\002\000" +
    "\040\003\041\012\014\013\010\014\034\015\044\016\046" +
    "\020\037\023\uffcd\026\035\030\025\031\050\035\040\036" +
    "\011\037\045\042\053\001\002\000\004\023\103\001\002" +
    "\000\046\003\uffd7\012\uffd7\013\uffd7\014\uffd7\015\uffd7\016" +
    "\uffd7\020\uffd7\023\uffd7\026\uffd7\027\uffd7\030\uffd7\031\uffd7" +
    "\034\uffd7\035\uffd7\036\uffd7\037\uffd7\040\uffd7\042\uffd7\001" +
    "\002\000\004\040\117\001\002\000\004\040\116\001\002" +
    "\000\006\021\uffec\037\110\001\002\000\004\021\uffed\001" +
    "\002\000\006\021\uffe1\043\114\001\002\000\004\021\112" +
    "\001\002\000\004\040\113\001\002\000\046\003\uffdf\012" +
    "\uffdf\013\uffdf\014\uffdf\015\uffdf\016\uffdf\020\uffdf\023\uffdf" +
    "\026\uffdf\027\uffdf\030\uffdf\031\uffdf\034\uffdf\035\uffdf\036" +
    "\uffdf\037\uffdf\040\uffdf\042\uffdf\001\002\000\004\037\110" +
    "\001\002\000\004\021\uffe2\001\002\000\046\003\uffb8\012" +
    "\uffb8\013\uffb8\014\uffb8\015\uffb8\016\uffb8\020\uffb8\023\uffb8" +
    "\026\uffb8\027\uffb8\030\uffb8\031\uffb8\034\uffb8\035\uffb8\036" +
    "\uffb8\037\uffb8\040\uffb8\042\uffb8\001\002\000\046\003\uffb7" +
    "\012\uffb7\013\uffb7\014\uffb7\015\uffb7\016\uffb7\020\uffb7\023" +
    "\uffb7\026\uffb7\027\uffb7\030\uffb7\031\uffb7\034\uffb7\035\uffb7" +
    "\036\uffb7\037\uffb7\040\uffb7\042\uffb7\001\002\000\012\014" +
    "\034\020\037\037\064\042\053\001\002\000\004\021\122" +
    "\001\002\000\004\022\123\001\002\000\040\003\041\012" +
    "\014\013\010\014\034\015\044\016\046\020\037\023\uffcd" +
    "\026\035\030\025\031\050\035\040\036\011\037\045\042" +
    "\053\001\002\000\004\023\125\001\002\000\050\003\uffd9" +
    "\012\uffd9\013\uffd9\014\uffd9\015\uffd9\016\uffd9\017\127\020" +
    "\uffd9\023\uffd9\026\uffd9\027\uffd9\030\uffd9\031\uffd9\034\uffd9" +
    "\035\uffd9\036\uffd9\037\uffd9\040\uffd9\042\uffd9\001\002\000" +
    "\046\003\uffdc\012\uffdc\013\uffdc\014\uffdc\015\uffdc\016\uffdc" +
    "\020\uffdc\023\uffdc\026\uffdc\027\uffdc\030\uffdc\031\uffdc\034" +
    "\uffdc\035\uffdc\036\uffdc\037\uffdc\040\uffdc\042\uffdc\001\002" +
    "\000\006\015\044\022\131\001\002\000\046\003\uffda\012" +
    "\uffda\013\uffda\014\uffda\015\uffda\016\uffda\020\uffda\023\uffda" +
    "\026\uffda\027\uffda\030\uffda\031\uffda\034\uffda\035\uffda\036" +
    "\uffda\037\uffda\040\uffda\042\uffda\001\002\000\040\003\041" +
    "\012\014\013\010\014\034\015\044\016\046\020\037\023" +
    "\uffcd\026\035\030\025\031\050\035\040\036\011\037\045" +
    "\042\053\001\002\000\004\023\133\001\002\000\046\003" +
    "\uffdb\012\uffdb\013\uffdb\014\uffdb\015\uffdb\016\uffdb\020\uffdb" +
    "\023\uffdb\026\uffdb\027\uffdb\030\uffdb\031\uffdb\034\uffdb\035" +
    "\uffdb\036\uffdb\037\uffdb\040\uffdb\042\uffdb\001\002\000\012" +
    "\023\uffd1\027\uffd1\034\uffd1\040\uffd1\001\002\000\012\023" +
    "\uffce\027\uffce\034\uffce\040\uffce\001\002\000\004\021\137" +
    "\001\002\000\014\021\uffc8\024\141\025\140\040\uffc8\041" +
    "\uffc8\001\002\000\012\014\034\020\037\037\064\042\053" +
    "\001\002\000\012\014\034\020\037\037\064\042\053\001" +
    "\002\000\010\021\uffca\040\uffca\041\uffca\001\002\000\010" +
    "\021\uffc9\040\uffc9\041\uffc9\001\002\000\004\040\166\001" +
    "\002\000\010\011\147\040\ufffb\043\146\001\002\000\006" +
    "\037\155\040\ufff6\001\002\000\010\037\151\042\152\053" +
    "\150\001\002\000\006\040\ufff7\043\163\001\002\000\004" +
    "\020\157\001\002\000\006\040\ufff9\043\153\001\002\000" +
    "\006\037\155\040\ufff6\001\002\000\004\040\ufffa\001\002" +
    "\000\010\011\156\040\ufffb\043\146\001\002\000\006\042" +
    "\152\053\150\001\002\000\006\021\uffec\037\110\001\002" +
    "\000\004\021\161\001\002\000\004\040\162\001\002\000" +
    "\046\003\uffe0\012\uffe0\013\uffe0\014\uffe0\015\uffe0\016\uffe0" +
    "\020\uffe0\023\uffe0\026\uffe0\027\uffe0\030\uffe0\031\uffe0\034" +
    "\uffe0\035\uffe0\036\uffe0\037\uffe0\040\uffe0\042\uffe0\001\002" +
    "\000\006\037\155\040\ufff6\001\002\000\004\040\ufff8\001" +
    "\002\000\004\040\ufffc\001\002\000\046\003\ufffd\012\ufffd" +
    "\013\ufffd\014\ufffd\015\ufffd\016\ufffd\020\ufffd\023\ufffd\026" +
    "\ufffd\027\ufffd\030\ufffd\031\ufffd\034\ufffd\035\ufffd\036\ufffd" +
    "\037\ufffd\040\ufffd\042\ufffd\001\002\000\004\035\170\001" +
    "\002\000\004\037\171\001\002\000\004\011\172\001\002" +
    "\000\004\042\173\001\002\000\004\040\174\001\002\000" +
    "\012\014\034\020\037\037\064\042\053\001\002\000\004" +
    "\040\176\001\002\000\004\037\177\001\002\000\004\032" +
    "\200\001\002\000\004\021\201\001\002\000\004\022\202" +
    "\001\002\000\040\003\041\012\014\013\010\014\034\015" +
    "\044\016\046\020\037\023\uffcd\026\035\030\025\031\050" +
    "\035\040\036\011\037\045\042\053\001\002\000\004\023" +
    "\204\001\002\000\046\003\uffd8\012\uffd8\013\uffd8\014\uffd8" +
    "\015\uffd8\016\uffd8\020\uffd8\023\uffd8\026\uffd8\027\uffd8\030" +
    "\uffd8\031\uffd8\034\uffd8\035\uffd8\036\uffd8\037\uffd8\040\uffd8" +
    "\042\uffd8\001\002\000\012\023\uffd2\027\uffd2\034\uffd2\040" +
    "\uffd2\001\002\000\004\042\207\001\002\000\004\040\210" +
    "\001\002\000\004\023\211\001\002\000\016\002\ufff4\003" +
    "\041\012\014\013\010\035\040\036\011\001\002\000\016" +
    "\002\ufff4\003\041\012\014\013\010\035\040\036\011\001" +
    "\002\000\004\002\000\001\002\000\006\003\215\037\216" +
    "\001\002\000\004\020\243\001\002\000\004\020\217\001" +
    "\002\000\016\003\041\012\014\013\010\021\ufff0\035\040" +
    "\036\011\001\002\000\004\021\ufff1\001\002\000\004\021" +
    "\226\001\002\000\004\037\223\001\002\000\006\021\uffe6" +
    "\043\224\001\002\000\014\003\041\012\014\013\010\035" +
    "\040\036\011\001\002\000\004\021\uffe7\001\002\000\004" +
    "\022\227\001\002\000\040\003\041\012\014\013\010\014" +
    "\034\015\044\016\046\020\037\026\035\027\uffcd\030\025" +
    "\031\050\035\040\036\011\037\045\042\053\001\002\000" +
    "\004\027\231\001\002\000\012\003\233\037\235\042\236" +
    "\053\232\001\002\000\004\040\uffb3\001\002\000\004\040" +
    "\241\001\002\000\004\040\237\001\002\000\004\040\uffb5" +
    "\001\002\000\004\040\uffb4\001\002\000\004\023\240\001" +
    "\002\000\016\002\uffe5\003\uffe5\012\uffe5\013\uffe5\035\uffe5" +
    "\036\uffe5\001\002\000\004\023\242\001\002\000\016\002" +
    "\uffe3\003\uffe3\012\uffe3\013\uffe3\035\uffe3\036\uffe3\001\002" +
    "\000\016\003\041\012\014\013\010\021\ufff0\035\040\036" +
    "\011\001\002\000\004\021\245\001\002\000\004\022\246" +
    "\001\002\000\040\003\041\012\014\013\010\014\034\015" +
    "\044\016\046\020\037\026\035\027\uffcd\030\025\031\050" +
    "\035\040\036\011\037\045\042\053\001\002\000\004\027" +
    "\250\001\002\000\010\037\235\042\236\053\232\001\002" +
    "\000\004\040\252\001\002\000\004\023\253\001\002\000" +
    "\016\002\uffe4\003\uffe4\012\uffe4\013\uffe4\035\uffe4\036\uffe4" +
    "\001\002\000\004\002\ufff5\001\002\000\012\023\uffd4\027" +
    "\uffd4\034\uffd4\040\uffd4\001\002\000\012\023\uffd3\027\uffd3" +
    "\034\uffd3\040\uffd3\001\002\000\012\023\uffcf\027\uffcf\034" +
    "\uffcf\040\uffcf\001\002\000\012\023\uffd6\027\uffd6\034\uffd6" +
    "\040\uffd6\001\002\000\004\052\262\001\002\000\006\021" +
    "\264\043\263\001\002\000\004\037\266\001\002\000\004" +
    "\040\265\001\002\000\046\003\uffba\012\uffba\013\uffba\014" +
    "\uffba\015\uffba\016\uffba\020\uffba\023\uffba\026\uffba\027\uffba" +
    "\030\uffba\031\uffba\034\uffba\035\uffba\036\uffba\037\uffba\040" +
    "\uffba\042\uffba\001\002\000\004\021\267\001\002\000\004" +
    "\040\270\001\002\000\046\003\uffbb\012\uffbb\013\uffbb\014" +
    "\uffbb\015\uffbb\016\uffbb\020\uffbb\023\uffbb\026\uffbb\027\uffbb" +
    "\030\uffbb\031\uffbb\034\uffbb\035\uffbb\036\uffbb\037\uffbb\040" +
    "\uffbb\042\uffbb\001\002\000\012\014\034\020\037\037\064" +
    "\042\053\001\002\000\012\014\034\020\037\037\064\042" +
    "\053\001\002\000\010\021\uffcc\040\uffcc\041\uffcc\001\002" +
    "\000\010\021\uffcb\040\uffcb\041\uffcb\001\002\000\012\023" +
    "\uffd0\027\uffd0\034\uffd0\040\uffd0\001\002\000\004\027\277" +
    "\001\002\000\004\042\300\001\002\000\004\040\301\001" +
    "\002\000\004\023\302\001\002\000\016\002\ufff4\003\041" +
    "\012\014\013\010\035\040\036\011\001\002\000\004\002" +
    "\ufffe\001\002\000\004\020\305\001\002\000\004\021\306" +
    "\001\002\000\004\022\307\001\002\000\040\003\041\012" +
    "\014\013\010\014\034\015\044\016\046\020\037\026\035" +
    "\027\uffcd\030\025\031\050\035\040\036\011\037\045\042" +
    "\053\001\002\000\004\027\311\001\002\000\004\042\312" +
    "\001\002\000\004\040\313\001\002\000\004\023\314\001" +
    "\002\000\016\002\ufff4\003\041\012\014\013\010\035\040" +
    "\036\011\001\002\000\004\002\uffff\001\002\000\012\011" +
    "\156\020\317\040\ufffb\043\146\001\002\000\016\003\041" +
    "\012\014\013\010\021\uffee\035\040\036\011\001\002\000" +
    "\004\021\330\001\002\000\004\021\uffef\001\002\000\010" +
    "\021\uffe9\037\324\043\323\001\002\000\014\003\041\012" +
    "\014\013\010\035\040\036\011\001\002\000\006\021\uffe8" +
    "\043\325\001\002\000\014\003\041\012\014\013\010\035" +
    "\040\036\011\001\002\000\004\021\uffeb\001\002\000\004" +
    "\021\uffea\001\002\000\004\040\331\001\002\000\014\003" +
    "\uffde\012\uffde\013\uffde\035\uffde\036\uffde\001\002\000\004" +
    "\002\ufff3\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\331\000\014\002\005\006\004\016\011\030\006\031" +
    "\003\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\002\331\006\004\016\011\030\006\031" +
    "\003\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\017\143\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\036\003\025\004\030\005\046\006\027\007" +
    "\275\010\051\013\023\015\050\016\035\020\032\022\042" +
    "\023\022\024\026\037\041\001\001\000\036\003\025\004" +
    "\030\005\046\006\027\007\031\010\051\013\023\015\050" +
    "\016\035\020\032\022\042\023\022\024\026\037\041\001" +
    "\001\000\036\003\025\004\030\005\046\006\027\007\274" +
    "\010\051\013\023\015\050\016\035\020\032\022\042\023" +
    "\022\024\026\037\041\001\001\000\002\001\001\000\002" +
    "\001\001\000\036\003\025\004\030\005\046\006\027\007" +
    "\257\010\051\013\023\015\050\016\035\020\032\022\042" +
    "\023\022\024\026\037\041\001\001\000\036\003\025\004" +
    "\030\005\046\006\027\007\256\010\051\013\023\015\050" +
    "\016\035\020\032\022\042\023\022\024\026\037\041\001" +
    "\001\000\036\003\025\004\030\005\046\006\027\007\255" +
    "\010\051\013\023\015\050\016\035\020\032\022\042\023" +
    "\022\024\026\037\041\001\001\000\036\003\025\004\030" +
    "\005\046\006\027\007\254\010\051\013\023\015\050\016" +
    "\035\020\032\022\042\023\022\024\026\037\041\001\001" +
    "\000\002\001\001\000\036\003\025\004\030\005\046\006" +
    "\027\007\204\010\051\013\023\015\050\016\035\020\032" +
    "\022\042\023\022\024\026\037\041\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\017\143\001\001\000\006" +
    "\013\135\015\050\001\001\000\002\001\001\000\002\001" +
    "\001\000\036\003\025\004\030\005\046\006\027\007\134" +
    "\010\051\013\023\015\050\016\035\020\032\022\042\023" +
    "\022\024\026\037\041\001\001\000\036\003\025\004\030" +
    "\005\046\006\027\007\133\010\051\013\023\015\050\016" +
    "\035\020\032\022\042\023\022\024\026\037\041\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\036\003\025\004\030\005\046\006\027\007\074\010\051" +
    "\013\023\015\050\016\035\020\032\022\042\023\022\024" +
    "\026\037\041\001\001\000\002\001\001\000\004\014\060" +
    "\001\001\000\002\001\001\000\002\001\001\000\036\003" +
    "\025\004\030\005\046\006\027\007\054\010\051\013\023" +
    "\015\050\016\035\020\032\022\042\023\022\024\026\037" +
    "\041\001\001\000\002\001\001\000\036\003\025\004\030" +
    "\005\046\006\027\007\056\010\051\013\023\015\050\016" +
    "\035\020\032\022\042\023\022\024\026\037\041\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\015\064\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\021\066\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\010\076\013\023\015\050\001\001\000\002\001\001" +
    "\000\002\001\001\000\036\003\025\004\030\005\046\006" +
    "\027\007\101\010\051\013\023\015\050\016\035\020\032" +
    "\022\042\023\022\024\026\037\041\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\041\106\042\110\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\041\114\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\010\120\013\023" +
    "\015\050\001\001\000\002\001\001\000\002\001\001\000" +
    "\036\003\025\004\030\005\046\006\027\007\123\010\051" +
    "\013\023\015\050\016\035\020\032\022\042\023\022\024" +
    "\026\037\041\001\001\000\002\001\001\000\004\012\125" +
    "\001\001\000\002\001\001\000\004\004\127\001\001\000" +
    "\002\001\001\000\036\003\025\004\030\005\046\006\027" +
    "\007\131\010\051\013\023\015\050\016\035\020\032\022" +
    "\042\023\022\024\026\037\041\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\010\142\013\023" +
    "\015\050\001\001\000\010\010\141\013\023\015\050\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\017\164\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\017\153\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\041\106\042\157\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\017\163\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\010\174\013\023\015\050\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\036\003\025\004\030\005\046\006\027\007" +
    "\202\010\051\013\023\015\050\016\035\020\032\022\042" +
    "\023\022\024\026\037\041\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\016\213\025\211\033" +
    "\212\001\001\000\010\016\213\025\211\033\253\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\016\221\026\220\027\217\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\016\221\027\224\001\001\000\002" +
    "\001\001\000\002\001\001\000\036\003\025\004\030\005" +
    "\046\006\027\007\227\010\051\013\023\015\050\016\035" +
    "\020\032\022\042\023\022\024\026\037\041\001\001\000" +
    "\002\001\001\000\004\034\233\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\016\221\026\243\027" +
    "\217\001\001\000\002\001\001\000\002\001\001\000\036" +
    "\003\025\004\030\005\046\006\027\007\246\010\051\013" +
    "\023\015\050\016\035\020\032\022\042\023\022\024\026" +
    "\037\041\001\001\000\002\001\001\000\004\034\250\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\010\273\013\023\015\050\001\001\000\010\010" +
    "\272\013\023\015\050\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\016\213" +
    "\025\211\033\302\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\036\003\025" +
    "\004\030\005\046\006\027\007\307\010\051\013\023\015" +
    "\050\016\035\020\032\022\042\023\022\024\026\037\041" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\016\213\025\211\033\314" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\016" +
    "\321\032\317\035\320\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\016\321\035\326\001" +
    "\001\000\002\001\001\000\006\016\321\035\325\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



     ArrayList gramas = new ArrayList();
    public int cont = 0;
    public int maximo(){
    int a=5;
    return a;
}
    ArrayList errores=new ArrayList();
    public Symbol s;
    @Override
    public void syntax_error (Symbol s){
        if(s.left==-1){
        }else{
                errores.add("Syntax error en la línea: " + (s.left) + " , columna: " +(s.right)+ " con el símbolo = "+(s.value));
    }
}
    @Override
    public void unrecovered_syntax_error(Symbol s){
    if(s.left==-1){
    }else{
        errores.add("Error desconocido, por favor revise la linea: " + (s.left ) + " y columna:  " + (s.right )+ "Con simbolo: "+s.value);
    }    
    }
    public Symbol getS(){
        return this.s;
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // RETURN ::= tkn_caracter 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("RETURN",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // RETURN ::= tkn_num 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("RETURN",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // RETURN ::= tkn_id 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("RETURN",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // SCANF ::= tkn_scanf tkn_parentesisiz CONSTSTR tkn_coma tkn_ampersand tkn_id tkn_parentesisde tkn_puntocoma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SCANF",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // CONTADOR ::= tkn_id tkn_decrement tkn_puntocoma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTADOR",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // CONTADOR ::= tkn_id tkn_increment tkn_puntocoma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTADOR",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // TERNARIO ::= CONDICION tkn_ternario BLOQUE tkn_dospuntos BLOQUE tkn_puntocoma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TERNARIO",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // PRINTF ::= tkn_printf tkn_parentesisiz tkn_cadena tkn_parentesisde tkn_puntocoma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRINTF",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // PRINTF ::= tkn_printf tkn_parentesisiz tkn_cadena tkn_coma tkn_id tkn_parentesisde tkn_puntocoma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRINTF",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // TIPO ::= error 
            {
              Object RESULT =null;
		parser.errores.add("Tipo de dato incorrecto");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // TIPO ::= tkn_int 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // TIPO ::= tkn_charp 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // TIPO ::= tkn_intp 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // TIPO ::= tkn_char 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // VALOR ::= tkn_id 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // VALOR ::= tkn_num 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // VALOR ::= tkn_digitos 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // OPCONDICION ::= tkn_igual 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPCONDICION",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // OPCONDICION ::= tkn_oprel 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPCONDICION",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // CONDICIONP ::= VALOR OPCONDICION VALOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICIONP",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // CONDICION ::= CONDICIONP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICION",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // CONDICION ::= tkn_parentesisiz CONDICIONP tkn_parentesisde 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICION",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // CONDICION ::= tkn_parentesisiz CONDICIONP tkn_parentesisde tkn_or CONDICION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICION",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // CONDICION ::= tkn_parentesisiz CONDICIONP tkn_parentesisde tkn_and CONDICION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICION",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // CONDICION ::= CONDICIONP tkn_or CONDICION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICION",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // CONDICION ::= CONDICIONP tkn_and CONDICION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICION",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // BLOQUE ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // BLOQUE ::= LLAMADO BLOQUE 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // BLOQUE ::= SCANF BLOQUE 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // BLOQUE ::= CONTADOR BLOQUE 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // BLOQUE ::= TERNARIO BLOQUE 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // BLOQUE ::= PRINTF BLOQUE 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // BLOQUE ::= DECLARACION BLOQUE 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // BLOQUE ::= IF BLOQUE 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // BLOQUE ::= FOR BLOQUE 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // BLOQUE ::= WHILE BLOQUE 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // WHILE ::= tkn_while tkn_parentesisiz CONDICION tkn_parentesisde tkn_llaveiz BLOQUE tkn_llaveder 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("WHILE",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // FOR ::= tkn_for tkn_parentesisiz tkn_int tkn_id tkn_igual tkn_num tkn_puntocoma CONDICION tkn_puntocoma tkn_id tkn_increment tkn_parentesisde tkn_llaveiz BLOQUE tkn_llaveder 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FOR",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-14)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // ELSE ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ELSE",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // ELSE ::= tkn_else IF 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ELSE",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // ELSE ::= tkn_else tkn_llaveiz BLOQUE tkn_llaveder 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ELSE",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // IF ::= tkn_if tkn_parentesisiz CONDICION tkn_parentesisde tkn_llaveiz BLOQUE tkn_llaveder ELSE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IF",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // PROTOTIPO ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROTOTIPO",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // PROTOTIPO ::= TIPO tkn_id tkn_parentesisiz PROTOPARAMS tkn_parentesisde tkn_puntocoma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROTOTIPO",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // LLAMADO ::= tkn_id tkn_parentesisiz ARGS tkn_parentesisde tkn_puntocoma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LLAMADO",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // LLAMADO ::= TIPO tkn_id tkn_igual tkn_id tkn_parentesisiz ARGS tkn_parentesisde tkn_puntocoma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LLAMADO",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // ARGSPARAMS ::= tkn_id 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARGSPARAMS",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ARGSPARAMS ::= tkn_id tkn_coma ARGSPARAMS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARGSPARAMS",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // FUNCION ::= TIPO tkn_id tkn_parentesisiz FUNCIONPARAMS tkn_parentesisde tkn_llaveiz BLOQUE tkn_return error tkn_puntocoma tkn_llaveder 
            {
              Object RESULT =null;
		parser.errores.add("La función no retorna tipo de dato correcto");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCION",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // FUNCION ::= TIPO error tkn_parentesisiz FUNCIONPARAMS tkn_parentesisde tkn_llaveiz BLOQUE tkn_return RETURN tkn_puntocoma tkn_llaveder 
            {
              Object RESULT =null;
		parser.errores.add("Identificador incorrecto para la función");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCION",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // FUNCION ::= TIPO tkn_id tkn_parentesisiz FUNCIONPARAMS tkn_parentesisde tkn_llaveiz BLOQUE tkn_return RETURN tkn_puntocoma tkn_llaveder 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCION",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // DECLAPARAM ::= TIPO tkn_id 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLAPARAM",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // DECLAPARAM ::= TIPO tkn_id tkn_coma DECLAPARAM 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLAPARAM",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // PARAMS ::= TIPO tkn_id 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMS",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // PARAMS ::= TIPO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMS",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // PARAMS ::= TIPO tkn_coma PARAMS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMS",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // PARAMS ::= TIPO tkn_id tkn_coma PARAMS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMS",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // ARGS ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARGS",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // ARGS ::= ARGSPARAMS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARGS",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // PROTOPARAMS ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROTOPARAMS",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // PROTOPARAMS ::= PARAMS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROTOPARAMS",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // FUNCIONPARAMS ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCIONPARAMS",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // FUNCIONPARAMS ::= DECLAPARAM 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCIONPARAMS",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // INICIO ::= MAIN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // INICIO ::= PROTOTIPO INICIO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // FUNCIONES ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCIONES",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // FUNCIONES ::= FUNCION FUNCIONES 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCIONES",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // IDINT ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IDINT",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // IDINT ::= tkn_id tkn_igual tkn_caracter 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IDINT",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // IDINT ::= tkn_id tkn_igual tkn_caracter tkn_coma IDINT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IDINT",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // IDINT ::= tkn_id tkn_igual tkn_num 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IDINT",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // IDINT ::= tkn_id tkn_igual tkn_num tkn_coma IDINT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IDINT",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // IDINT ::= tkn_id 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IDINT",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // IDINT ::= tkn_id tkn_coma IDINT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IDINT",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // DECLARACION ::= TIPO IDINT tkn_puntocoma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // MAIN ::= tkn_int tkn_main tkn_parentesisiz tkn_parentesisde error BLOQUE tkn_return tkn_num tkn_puntocoma tkn_llaveder FUNCIONES 
            {
              Object RESULT =null;
		parser.errores.add("\n llave de apertura ausente '{' en el main");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MAIN",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // MAIN ::= error tkn_main tkn_parentesisiz tkn_parentesisde tkn_llaveiz BLOQUE tkn_return tkn_num tkn_puntocoma tkn_llaveder FUNCIONES 
            {
              Object RESULT =null;
		parser.errores.add("\ntipo de dato int ausente en la función main");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MAIN",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // MAIN ::= tkn_int tkn_main tkn_parentesisiz tkn_parentesisde tkn_llaveiz BLOQUE tkn_return tkn_num tkn_puntocoma tkn_llaveder FUNCIONES 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("MAIN",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

