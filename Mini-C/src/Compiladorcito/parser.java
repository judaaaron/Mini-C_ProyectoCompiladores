
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Sep 15 14:19:25 CST 2022
//----------------------------------------------------

package Compiladorcito;

import java_cup.runtime.*;
import java.util.ArrayList;
import java.util.*;
import java.io.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Sep 15 14:19:25 CST 2022
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\137\000\002\002\004\000\002\036\003\000\002\044" +
    "\004\000\002\044\004\000\002\044\004\000\002\020\004" +
    "\000\002\020\004\000\002\015\011\000\002\015\014\000" +
    "\002\015\011\000\002\015\011\000\002\050\006\000\002" +
    "\047\004\000\002\034\005\000\002\034\004\000\002\035" +
    "\007\000\002\035\005\000\002\035\005\000\002\035\005" +
    "\000\002\035\006\000\002\035\007\000\002\035\005\000" +
    "\002\035\003\000\002\035\010\000\002\035\010\000\002" +
    "\032\004\000\002\032\004\000\002\023\005\000\002\023" +
    "\005\000\002\023\003\000\002\023\003\000\002\023\002" +
    "\000\002\003\012\000\002\003\012\000\002\003\012\000" +
    "\002\003\012\000\002\006\006\000\002\006\004\000\002" +
    "\006\002\000\002\004\017\000\002\004\017\000\002\004" +
    "\017\000\002\002\011\000\002\002\011\000\002\002\011" +
    "\000\002\042\011\000\002\042\007\000\002\042\011\000" +
    "\002\042\011\000\002\042\011\000\002\042\011\000\002" +
    "\042\011\000\002\042\011\000\002\014\012\000\002\014" +
    "\012\000\002\014\012\000\002\014\012\000\002\014\012" +
    "\000\002\014\012\000\002\040\004\000\002\040\004\000" +
    "\002\040\004\000\002\040\004\000\002\040\004\000\002" +
    "\040\004\000\002\040\004\000\002\040\002\000\002\033" +
    "\003\000\002\033\003\000\002\033\005\000\002\033\005" +
    "\000\002\005\005\000\002\005\005\000\002\005\007\000" +
    "\002\005\007\000\002\005\005\000\002\005\003\000\002" +
    "\007\005\000\002\010\003\000\002\010\003\000\002\010" +
    "\003\000\002\010\003\000\002\010\003\000\002\031\005" +
    "\000\002\031\005\000\002\031\005\000\002\031\005\000" +
    "\002\031\003\000\002\031\003\000\002\031\003\000\002" +
    "\026\003\000\002\026\002\000\002\025\005\000\002\025" +
    "\003\000\002\013\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0110\000\020\003\020\012\022\013\013\014\005\035" +
    "\023\036\017\037\007\001\002\000\004\002\000\001\002" +
    "\000\010\021\uffaf\037\uffaf\043\uffaf\001\002\000\004\040" +
    "\u0112\001\002\000\010\003\162\010\165\043\157\001\002" +
    "\000\004\002\u0111\001\002\000\020\003\020\012\022\013" +
    "\013\014\005\035\023\036\017\037\007\001\002\000\020" +
    "\003\020\012\022\013\013\014\005\035\023\036\017\037" +
    "\007\001\002\000\010\021\uffb1\037\uffb1\043\uffb1\001\002" +
    "\000\010\003\u0104\022\u0106\040\u0105\001\002\000\012\010" +
    "\310\020\373\040\uffeb\043\307\001\002\000\004\037\372" +
    "\001\002\000\010\021\uffb3\037\uffb3\043\uffb3\001\002\000" +
    "\004\040\371\001\002\000\020\003\020\012\022\013\013" +
    "\014\005\035\023\036\017\037\007\001\002\000\010\021" +
    "\uffb2\037\uffb2\043\uffb2\001\002\000\006\011\024\037\uffb0" +
    "\001\002\000\004\020\025\001\002\000\004\021\026\001" +
    "\002\000\004\022\027\001\002\000\034\003\020\012\022" +
    "\013\013\014\005\015\043\016\045\026\041\027\uffbf\030" +
    "\031\031\046\035\042\036\017\037\044\001\002\000\036" +
    "\003\020\012\022\013\013\014\005\015\043\016\045\023" +
    "\uffbf\026\041\027\uffbf\030\031\031\046\035\042\036\017" +
    "\037\044\001\002\000\006\003\332\020\333\001\002\000" +
    "\036\003\020\012\022\013\013\014\005\015\043\016\045" +
    "\023\uffbf\026\041\027\uffbf\030\031\031\046\035\042\036" +
    "\017\037\044\001\002\000\036\003\020\012\022\013\013" +
    "\014\005\015\043\016\045\023\uffbf\026\041\027\uffbf\030" +
    "\031\031\046\035\042\036\017\037\044\001\002\000\004" +
    "\027\324\001\002\000\036\003\020\012\022\013\013\014" +
    "\005\015\043\016\045\023\uffbf\026\041\027\uffbf\030\031" +
    "\031\046\035\042\036\017\037\044\001\002\000\036\003" +
    "\020\012\022\013\013\014\005\015\043\016\045\023\uffbf" +
    "\026\041\027\uffbf\030\031\031\046\035\042\036\017\037" +
    "\044\001\002\000\036\003\020\012\022\013\013\014\005" +
    "\015\043\016\045\023\uffbf\026\041\027\uffbf\030\031\031" +
    "\046\035\042\036\017\037\044\001\002\000\012\003\uffeb" +
    "\010\310\040\uffeb\043\307\001\002\000\006\003\246\020" +
    "\247\001\002\000\010\021\uffb0\037\uffb0\043\uffb0\001\002" +
    "\000\006\003\212\020\213\001\002\000\020\003\162\004" +
    "\164\005\161\010\165\032\163\033\160\043\157\001\002" +
    "\000\004\020\106\001\002\000\006\003\051\020\052\001" +
    "\002\000\036\003\020\012\022\013\013\014\005\015\043" +
    "\016\045\023\uffbf\026\041\027\uffbf\030\031\031\046\035" +
    "\042\036\017\037\044\001\002\000\006\023\uffc5\027\uffc5" +
    "\001\002\000\004\045\100\001\002\000\006\003\053\045" +
    "\054\001\002\000\004\043\073\001\002\000\004\043\055" +
    "\001\002\000\006\003\056\044\057\001\002\000\004\037" +
    "\070\001\002\000\006\003\060\037\061\001\002\000\004" +
    "\021\066\001\002\000\006\003\062\021\063\001\002\000" +
    "\004\040\065\001\002\000\004\040\064\001\002\000\036" +
    "\003\uffcc\012\uffcc\013\uffcc\014\uffcc\015\uffcc\016\uffcc\023" +
    "\uffcc\026\uffcc\027\uffcc\030\uffcc\031\uffcc\035\uffcc\036\uffcc" +
    "\037\uffcc\001\002\000\036\003\uffc9\012\uffc9\013\uffc9\014" +
    "\uffc9\015\uffc9\016\uffc9\023\uffc9\026\uffc9\027\uffc9\030\uffc9" +
    "\031\uffc9\035\uffc9\036\uffc9\037\uffc9\001\002\000\004\040" +
    "\067\001\002\000\036\003\uffca\012\uffca\013\uffca\014\uffca" +
    "\015\uffca\016\uffca\023\uffca\026\uffca\027\uffca\030\uffca\031" +
    "\uffca\035\uffca\036\uffca\037\uffca\001\002\000\004\021\071" +
    "\001\002\000\004\040\072\001\002\000\036\003\uffcb\012" +
    "\uffcb\013\uffcb\014\uffcb\015\uffcb\016\uffcb\023\uffcb\026\uffcb" +
    "\027\uffcb\030\uffcb\031\uffcb\035\uffcb\036\uffcb\037\uffcb\001" +
    "\002\000\004\044\074\001\002\000\004\037\075\001\002" +
    "\000\004\021\076\001\002\000\004\040\077\001\002\000" +
    "\036\003\uffc7\012\uffc7\013\uffc7\014\uffc7\015\uffc7\016\uffc7" +
    "\023\uffc7\026\uffc7\027\uffc7\030\uffc7\031\uffc7\035\uffc7\036" +
    "\uffc7\037\uffc7\001\002\000\004\043\101\001\002\000\004" +
    "\044\102\001\002\000\004\037\103\001\002\000\004\021" +
    "\104\001\002\000\004\040\105\001\002\000\036\003\uffc8" +
    "\012\uffc8\013\uffc8\014\uffc8\015\uffc8\016\uffc8\023\uffc8\026" +
    "\uffc8\027\uffc8\030\uffc8\031\uffc8\035\uffc8\036\uffc8\037\uffc8" +
    "\001\002\000\012\020\114\037\113\042\115\046\110\001" +
    "\002\000\014\003\uffb5\021\uffb5\024\154\025\153\040\uffb5" +
    "\001\002\000\026\003\uffa8\004\uffa8\005\uffa8\007\uffa8\010" +
    "\uffa8\021\uffa8\024\uffa8\025\uffa8\040\uffa8\043\uffa8\001\002" +
    "\000\006\003\140\021\141\001\002\000\012\004\125\005" +
    "\123\007\122\010\131\001\002\000\026\003\uffaa\004\uffaa" +
    "\005\uffaa\007\uffaa\010\uffaa\021\uffaa\024\uffaa\025\uffaa\040" +
    "\uffaa\043\uffaa\001\002\000\012\020\120\037\113\042\115" +
    "\046\110\001\002\000\026\003\uffa9\004\uffa9\005\uffa9\007" +
    "\uffa9\010\uffa9\021\uffa9\024\uffa9\025\uffa9\040\uffa9\043\uffa9" +
    "\001\002\000\004\021\133\001\002\000\014\004\125\005" +
    "\123\007\122\010\131\021\124\001\002\000\012\020\120" +
    "\037\113\042\115\046\110\001\002\000\012\004\125\005" +
    "\123\007\122\021\124\001\002\000\012\020\120\037\113" +
    "\042\115\046\110\001\002\000\012\020\120\037\113\042" +
    "\115\046\110\001\002\000\026\003\uffab\004\uffab\005\uffab" +
    "\007\uffab\010\uffab\021\uffab\024\uffab\025\uffab\040\uffab\043" +
    "\uffab\001\002\000\012\020\120\037\113\042\115\046\110" +
    "\001\002\000\026\003\uffae\004\uffae\005\123\007\122\010" +
    "\uffae\021\uffae\024\uffae\025\uffae\040\uffae\043\uffae\001\002" +
    "\000\026\003\uffad\004\uffad\005\uffad\007\uffad\010\uffad\021" +
    "\uffad\024\uffad\025\uffad\040\uffad\043\uffad\001\002\000\026" +
    "\003\uffac\004\uffac\005\uffac\007\uffac\010\uffac\021\uffac\024" +
    "\uffac\025\uffac\040\uffac\043\uffac\001\002\000\012\020\120" +
    "\037\113\042\115\046\110\001\002\000\022\003\uffb4\004" +
    "\125\005\123\007\122\021\uffb4\024\uffb4\025\uffb4\040\uffb4" +
    "\001\002\000\014\003\uffb6\021\uffb6\024\135\025\134\040" +
    "\uffb6\001\002\000\012\020\114\037\113\042\115\046\110" +
    "\001\002\000\012\020\114\037\113\042\115\046\110\001" +
    "\002\000\010\003\uffb8\021\uffb8\040\uffb8\001\002\000\010" +
    "\003\uffb7\021\uffb7\040\uffb7\001\002\000\004\022\150\001" +
    "\002\000\006\003\142\022\143\001\002\000\034\003\020" +
    "\012\022\013\013\014\005\015\043\016\045\023\uffbf\026" +
    "\041\030\031\031\046\035\042\036\017\037\044\001\002" +
    "\000\034\003\020\012\022\013\013\014\005\015\043\016" +
    "\045\023\uffbf\026\041\030\031\031\046\035\042\036\017" +
    "\037\044\001\002\000\004\023\145\001\002\000\036\003" +
    "\uffd7\012\uffd7\013\uffd7\014\uffd7\015\uffd7\016\uffd7\023\uffd7" +
    "\026\uffd7\027\uffd7\030\uffd7\031\uffd7\035\uffd7\036\uffd7\037" +
    "\uffd7\001\002\000\004\023\147\001\002\000\036\003\uffd6" +
    "\012\uffd6\013\uffd6\014\uffd6\015\uffd6\016\uffd6\023\uffd6\026" +
    "\uffd6\027\uffd6\030\uffd6\031\uffd6\035\uffd6\036\uffd6\037\uffd6" +
    "\001\002\000\034\003\020\012\022\013\013\014\005\015" +
    "\043\016\045\023\uffbf\026\041\030\031\031\046\035\042" +
    "\036\017\037\044\001\002\000\004\023\152\001\002\000" +
    "\036\003\uffd5\012\uffd5\013\uffd5\014\uffd5\015\uffd5\016\uffd5" +
    "\023\uffd5\026\uffd5\027\uffd5\030\uffd5\031\uffd5\035\uffd5\036" +
    "\uffd5\037\uffd5\001\002\000\012\020\114\037\113\042\115" +
    "\046\110\001\002\000\012\020\114\037\113\042\115\046" +
    "\110\001\002\000\010\003\uffba\021\uffba\040\uffba\001\002" +
    "\000\010\003\uffb9\021\uffb9\040\uffb9\001\002\000\016\012" +
    "\022\013\013\014\005\035\042\036\017\037\007\001\002" +
    "\000\010\003\uffbd\021\uffbd\040\uffbd\001\002\000\004\010" +
    "\207\001\002\000\016\012\022\013\013\014\005\035\042" +
    "\036\017\037\007\001\002\000\010\003\uffbe\021\uffbe\040" +
    "\uffbe\001\002\000\004\010\203\001\002\000\012\020\120" +
    "\037\171\042\115\046\110\001\002\000\004\040\167\001" +
    "\002\000\036\003\uffa3\012\uffa3\013\uffa3\014\uffa3\015\uffa3" +
    "\016\uffa3\023\uffa3\026\uffa3\027\uffa3\030\uffa3\031\uffa3\035" +
    "\uffa3\036\uffa3\037\uffa3\001\002\000\016\003\uffec\004\125" +
    "\005\123\007\122\040\uffec\043\201\001\002\000\020\003" +
    "\uffaa\004\uffaa\005\uffaa\007\uffaa\020\172\040\uffaa\043\uffaa" +
    "\001\002\000\006\021\uffa6\037\174\001\002\000\004\021" +
    "\uffa7\001\002\000\006\021\uffa4\043\177\001\002\000\004" +
    "\021\176\001\002\000\006\003\uffe9\040\uffe9\001\002\000" +
    "\004\037\174\001\002\000\004\021\uffa5\001\002\000\016" +
    "\012\022\013\013\014\005\035\042\036\017\037\007\001" +
    "\002\000\006\003\uffed\040\uffed\001\002\000\012\020\120" +
    "\037\113\042\115\046\110\001\002\000\016\003\uffbc\004" +
    "\125\005\123\007\122\021\uffbc\040\uffbc\001\002\000\004" +
    "\003\206\001\002\000\006\003\uffee\040\uffee\001\002\000" +
    "\012\020\120\037\113\042\115\046\110\001\002\000\016" +
    "\003\uffbb\004\125\005\123\007\122\021\uffbb\040\uffbb\001" +
    "\002\000\006\003\uffef\040\uffef\001\002\000\012\020\114" +
    "\037\113\042\115\046\110\001\002\000\012\020\114\037" +
    "\113\042\115\046\110\001\002\000\006\003\215\021\216" +
    "\001\002\000\004\022\234\001\002\000\006\003\217\022" +
    "\220\001\002\000\034\003\020\012\022\013\013\014\005" +
    "\015\043\016\045\023\uffbf\026\041\030\031\031\046\035" +
    "\042\036\017\037\044\001\002\000\034\003\020\012\022" +
    "\013\013\014\005\015\043\016\045\023\uffbf\026\041\030" +
    "\031\031\046\035\042\036\017\037\044\001\002\000\004" +
    "\023\222\001\002\000\040\003\uffdb\012\uffdb\013\uffdb\014" +
    "\uffdb\015\uffdb\016\uffdb\017\224\023\uffdb\026\uffdb\027\uffdb" +
    "\030\uffdb\031\uffdb\035\uffdb\036\uffdb\037\uffdb\001\002\000" +
    "\036\003\uffe1\012\uffe1\013\uffe1\014\uffe1\015\uffe1\016\uffe1" +
    "\023\uffe1\026\uffe1\027\uffe1\030\uffe1\031\uffe1\035\uffe1\036" +
    "\uffe1\037\uffe1\001\002\000\006\015\043\022\226\001\002" +
    "\000\036\003\uffdc\012\uffdc\013\uffdc\014\uffdc\015\uffdc\016" +
    "\uffdc\023\uffdc\026\uffdc\027\uffdc\030\uffdc\031\uffdc\035\uffdc" +
    "\036\uffdc\037\uffdc\001\002\000\034\003\020\012\022\013" +
    "\013\014\005\015\043\016\045\023\uffbf\026\041\030\031" +
    "\031\046\035\042\036\017\037\044\001\002\000\004\023" +
    "\230\001\002\000\036\003\uffdd\012\uffdd\013\uffdd\014\uffdd" +
    "\015\uffdd\016\uffdd\023\uffdd\026\uffdd\027\uffdd\030\uffdd\031" +
    "\uffdd\035\uffdd\036\uffdd\037\uffdd\001\002\000\004\023\232" +
    "\001\002\000\040\003\uffdb\012\uffdb\013\uffdb\014\uffdb\015" +
    "\uffdb\016\uffdb\017\224\023\uffdb\026\uffdb\027\uffdb\030\uffdb" +
    "\031\uffdb\035\uffdb\036\uffdb\037\uffdb\001\002\000\036\003" +
    "\uffe0\012\uffe0\013\uffe0\014\uffe0\015\uffe0\016\uffe0\023\uffe0" +
    "\026\uffe0\027\uffe0\030\uffe0\031\uffe0\035\uffe0\036\uffe0\037" +
    "\uffe0\001\002\000\034\003\020\012\022\013\013\014\005" +
    "\015\043\016\045\023\uffbf\026\041\030\031\031\046\035" +
    "\042\036\017\037\044\001\002\000\004\023\236\001\002" +
    "\000\040\003\uffdb\012\uffdb\013\uffdb\014\uffdb\015\uffdb\016" +
    "\uffdb\017\224\023\uffdb\026\uffdb\027\uffdb\030\uffdb\031\uffdb" +
    "\035\uffdb\036\uffdb\037\uffdb\001\002\000\036\003\uffde\012" +
    "\uffde\013\uffde\014\uffde\015\uffde\016\uffde\023\uffde\026\uffde" +
    "\027\uffde\030\uffde\031\uffde\035\uffde\036\uffde\037\uffde\001" +
    "\002\000\004\021\241\001\002\000\004\022\242\001\002" +
    "\000\034\003\020\012\022\013\013\014\005\015\043\016" +
    "\045\023\uffbf\026\041\030\031\031\046\035\042\036\017" +
    "\037\044\001\002\000\004\023\244\001\002\000\040\003" +
    "\uffdb\012\uffdb\013\uffdb\014\uffdb\015\uffdb\016\uffdb\017\224" +
    "\023\uffdb\026\uffdb\027\uffdb\030\uffdb\031\uffdb\035\uffdb\036" +
    "\uffdb\037\uffdb\001\002\000\036\003\uffdf\012\uffdf\013\uffdf" +
    "\014\uffdf\015\uffdf\016\uffdf\023\uffdf\026\uffdf\027\uffdf\030" +
    "\uffdf\031\uffdf\035\uffdf\036\uffdf\037\uffdf\001\002\000\016" +
    "\012\022\013\013\014\005\035\042\036\017\037\251\001" +
    "\002\000\016\012\022\013\013\014\005\035\042\036\017" +
    "\037\251\001\002\000\012\020\120\037\113\042\115\046" +
    "\110\001\002\000\004\010\255\001\002\000\004\037\253" +
    "\001\002\000\004\010\254\001\002\000\012\020\ufff4\037" +
    "\ufff4\042\ufff4\046\ufff4\001\002\000\012\020\ufff3\037\ufff3" +
    "\042\ufff3\046\ufff3\001\002\000\012\004\125\005\123\007" +
    "\122\040\257\001\002\000\012\020\114\037\113\042\115" +
    "\046\110\001\002\000\004\040\261\001\002\000\004\037" +
    "\262\001\002\000\012\004\164\005\161\032\163\033\160" +
    "\001\002\000\006\003\264\021\265\001\002\000\004\022" +
    "\271\001\002\000\004\022\266\001\002\000\034\003\020" +
    "\012\022\013\013\014\005\015\043\016\045\023\uffbf\026" +
    "\041\030\031\031\046\035\042\036\017\037\044\001\002" +
    "\000\004\023\270\001\002\000\036\003\uffda\012\uffda\013" +
    "\uffda\014\uffda\015\uffda\016\uffda\023\uffda\026\uffda\027\uffda" +
    "\030\uffda\031\uffda\035\uffda\036\uffda\037\uffda\001\002\000" +
    "\034\003\020\012\022\013\013\014\005\015\043\016\045" +
    "\023\uffbf\026\041\030\031\031\046\035\042\036\017\037" +
    "\044\001\002\000\004\023\273\001\002\000\036\003\uffd8" +
    "\012\uffd8\013\uffd8\014\uffd8\015\uffd8\016\uffd8\023\uffd8\026" +
    "\uffd8\027\uffd8\030\uffd8\031\uffd8\035\uffd8\036\uffd8\037\uffd8" +
    "\001\002\000\012\020\120\037\113\042\115\046\110\001" +
    "\002\000\012\004\125\005\123\007\122\040\276\001\002" +
    "\000\012\020\114\037\113\042\115\046\110\001\002\000" +
    "\004\040\300\001\002\000\004\037\301\001\002\000\012" +
    "\004\164\005\161\032\163\033\160\001\002\000\004\021" +
    "\303\001\002\000\004\022\304\001\002\000\034\003\020" +
    "\012\022\013\013\014\005\015\043\016\045\023\uffbf\026" +
    "\041\030\031\031\046\035\042\036\017\037\044\001\002" +
    "\000\004\023\306\001\002\000\036\003\uffd9\012\uffd9\013" +
    "\uffd9\014\uffd9\015\uffd9\016\uffd9\023\uffd9\026\uffd9\027\uffd9" +
    "\030\uffd9\031\uffd9\035\uffd9\036\uffd9\037\uffd9\001\002\000" +
    "\016\012\022\013\013\014\005\035\042\036\017\037\007" +
    "\001\002\000\012\020\120\037\312\042\115\046\110\001" +
    "\002\000\016\003\ufff1\004\125\005\123\007\122\040\ufff1" +
    "\043\316\001\002\000\020\003\uffaa\004\uffaa\005\uffaa\007" +
    "\uffaa\020\313\040\uffaa\043\uffaa\001\002\000\006\021\uffa6" +
    "\037\174\001\002\000\004\021\315\001\002\000\006\003" +
    "\uffea\040\uffea\001\002\000\016\012\022\013\013\014\005" +
    "\035\042\036\017\037\007\001\002\000\006\003\ufff2\040" +
    "\ufff2\001\002\000\006\003\ufff0\040\ufff0\001\002\000\006" +
    "\023\uffc1\027\uffc1\001\002\000\006\023\uffc6\027\uffc6\001" +
    "\002\000\006\023\uffc3\027\uffc3\001\002\000\012\020\120" +
    "\037\113\042\115\046\110\001\002\000\012\004\125\005" +
    "\123\007\122\040\326\001\002\000\004\023\327\001\002" +
    "\000\020\003\ufff9\012\ufff9\013\ufff9\014\ufff9\035\ufff9\036" +
    "\ufff9\037\ufff9\001\002\000\006\023\uffc2\027\uffc2\001\002" +
    "\000\006\023\uffc4\027\uffc4\001\002\000\004\045\362\001" +
    "\002\000\006\003\334\045\335\001\002\000\004\043\356" +
    "\001\002\000\010\003\337\021\340\043\336\001\002\000" +
    "\006\003\345\037\346\001\002\000\004\037\342\001\002" +
    "\000\004\040\341\001\002\000\036\003\uffd3\012\uffd3\013" +
    "\uffd3\014\uffd3\015\uffd3\016\uffd3\023\uffd3\026\uffd3\027\uffd3" +
    "\030\uffd3\031\uffd3\035\uffd3\036\uffd3\037\uffd3\001\002\000" +
    "\004\021\343\001\002\000\004\040\344\001\002\000\036" +
    "\003\uffd2\012\uffd2\013\uffd2\014\uffd2\015\uffd2\016\uffd2\023" +
    "\uffd2\026\uffd2\027\uffd2\030\uffd2\031\uffd2\035\uffd2\036\uffd2" +
    "\037\uffd2\001\002\000\004\021\354\001\002\000\006\003" +
    "\347\021\350\001\002\000\004\040\353\001\002\000\006" +
    "\003\351\040\352\001\002\000\036\003\uffcf\012\uffcf\013" +
    "\uffcf\014\uffcf\015\uffcf\016\uffcf\023\uffcf\026\uffcf\027\uffcf" +
    "\030\uffcf\031\uffcf\035\uffcf\036\uffcf\037\uffcf\001\002\000" +
    "\036\003\uffd4\012\uffd4\013\uffd4\014\uffd4\015\uffd4\016\uffd4" +
    "\023\uffd4\026\uffd4\027\uffd4\030\uffd4\031\uffd4\035\uffd4\036" +
    "\uffd4\037\uffd4\001\002\000\036\003\uffd0\012\uffd0\013\uffd0" +
    "\014\uffd0\015\uffd0\016\uffd0\023\uffd0\026\uffd0\027\uffd0\030" +
    "\uffd0\031\uffd0\035\uffd0\036\uffd0\037\uffd0\001\002\000\004" +
    "\040\355\001\002\000\036\003\uffd1\012\uffd1\013\uffd1\014" +
    "\uffd1\015\uffd1\016\uffd1\023\uffd1\026\uffd1\027\uffd1\030\uffd1" +
    "\031\uffd1\035\uffd1\036\uffd1\037\uffd1\001\002\000\004\037" +
    "\357\001\002\000\004\021\360\001\002\000\004\040\361" +
    "\001\002\000\036\003\uffcd\012\uffcd\013\uffcd\014\uffcd\015" +
    "\uffcd\016\uffcd\023\uffcd\026\uffcd\027\uffcd\030\uffcd\031\uffcd" +
    "\035\uffcd\036\uffcd\037\uffcd\001\002\000\004\043\363\001" +
    "\002\000\004\037\364\001\002\000\004\021\365\001\002" +
    "\000\004\040\366\001\002\000\036\003\uffce\012\uffce\013" +
    "\uffce\014\uffce\015\uffce\016\uffce\023\uffce\026\uffce\027\uffce" +
    "\030\uffce\031\uffce\035\uffce\036\uffce\037\uffce\001\002\000" +
    "\006\023\uffc0\027\uffc0\001\002\000\004\002\ufffe\001\002" +
    "\000\036\003\uffe7\012\uffe7\013\uffe7\014\uffe7\015\uffe7\016" +
    "\uffe7\023\uffe7\026\uffe7\027\uffe7\030\uffe7\031\uffe7\035\uffe7" +
    "\036\uffe7\037\uffe7\001\002\000\016\003\ufff5\010\ufff5\020" +
    "\ufff5\021\ufff5\040\ufff5\043\ufff5\001\002\000\016\012\022" +
    "\013\013\014\005\021\uffe2\035\042\036\017\001\002\000" +
    "\006\021\uffe4\043\u0102\001\002\000\004\021\u0101\001\002" +
    "\000\010\021\uffe3\037\372\043\377\001\002\000\016\012" +
    "\022\013\013\014\005\021\uffe2\035\042\036\017\001\002" +
    "\000\004\021\uffe6\001\002\000\010\003\ufff6\022\ufff6\040" +
    "\ufff6\001\002\000\016\012\022\013\013\014\005\021\uffe2" +
    "\035\042\036\017\001\002\000\004\021\uffe5\001\002\000" +
    "\020\003\ufffb\012\ufffb\013\ufffb\014\ufffb\035\ufffb\036\ufffb" +
    "\037\ufffb\001\002\000\020\003\ufffc\012\ufffc\013\ufffc\014" +
    "\ufffc\035\ufffc\036\ufffc\037\ufffc\001\002\000\034\003\020" +
    "\012\022\013\013\014\005\015\043\016\045\026\041\027" +
    "\uffbf\030\031\031\046\035\042\036\017\037\044\001\002" +
    "\000\004\027\u0108\001\002\000\012\020\120\037\113\042" +
    "\115\046\110\001\002\000\014\003\u010a\004\125\005\123" +
    "\007\122\040\u010b\001\002\000\004\022\u010e\001\002\000" +
    "\006\003\u010c\023\u010d\001\002\000\020\003\ufff8\012\ufff8" +
    "\013\ufff8\014\ufff8\035\ufff8\036\ufff8\037\ufff8\001\002\000" +
    "\020\003\ufffa\012\ufffa\013\ufffa\014\ufffa\035\ufffa\036\ufffa" +
    "\037\ufffa\001\002\000\020\003\ufff7\012\ufff7\013\ufff7\014" +
    "\ufff7\035\ufff7\036\ufff7\037\ufff7\001\002\000\004\002\ufffd" +
    "\001\002\000\004\002\uffff\001\002\000\004\002\001\001" +
    "\002\000\036\003\uffe8\012\uffe8\013\uffe8\014\uffe8\015\uffe8" +
    "\016\uffe8\023\uffe8\026\uffe8\027\uffe8\030\uffe8\031\uffe8\035" +
    "\uffe8\036\uffe8\037\uffe8\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0110\000\024\010\015\015\020\020\010\032\011\035" +
    "\005\036\007\044\003\047\014\050\013\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\010\015\015\020\020\010" +
    "\032\011\035\005\044\u010f\047\014\050\013\001\001\000" +
    "\022\010\015\015\020\020\010\032\011\035\005\044\u010e" +
    "\047\014\050\013\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\010\015\015\020\020\010\032" +
    "\011\035\005\044\367\047\014\050\013\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\030\002\031\003\035\004\046" +
    "\010\015\013\027\014\032\032\034\035\005\040\033\042" +
    "\036\047\037\001\001\000\030\002\031\003\035\004\046" +
    "\010\015\013\027\014\032\032\034\035\005\040\366\042" +
    "\036\047\037\001\001\000\002\001\001\000\030\002\031" +
    "\003\035\004\046\010\015\013\027\014\032\032\034\035" +
    "\005\040\330\042\036\047\037\001\001\000\030\002\031" +
    "\003\035\004\046\010\015\013\027\014\032\032\034\035" +
    "\005\040\327\042\036\047\037\001\001\000\002\001\001" +
    "\000\030\002\031\003\035\004\046\010\015\013\027\014" +
    "\032\032\034\035\005\040\322\042\036\047\037\001\001" +
    "\000\030\002\031\003\035\004\046\010\015\013\027\014" +
    "\032\032\034\035\005\040\321\042\036\047\037\001\001" +
    "\000\030\002\031\003\035\004\046\010\015\013\027\014" +
    "\032\032\034\035\005\040\320\042\036\047\037\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\033\165\001\001\000\002\001\001" +
    "\000\002\001\001\000\030\002\031\003\035\004\046\010" +
    "\015\013\027\014\032\032\034\035\005\040\047\042\036" +
    "\047\037\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\005\110\007\106" +
    "\031\111\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\007\115\031\116\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\031\120\001\001\000\002" +
    "\001\001\000\004\031\127\001\001\000\004\031\126\001" +
    "\001\000\002\001\001\000\004\031\125\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\031" +
    "\131\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\005\136\007\106\031\111\001\001\000\010\005\135\007" +
    "\106\031\111\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\030\002\031\003" +
    "\035\004\046\010\015\013\027\014\032\032\034\035\005" +
    "\040\145\042\036\047\037\001\001\000\030\002\031\003" +
    "\035\004\046\010\015\013\027\014\032\032\034\035\005" +
    "\040\143\042\036\047\037\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\030" +
    "\002\031\003\035\004\046\010\015\013\027\014\032\032" +
    "\034\035\005\040\150\042\036\047\037\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\005\155\007\106\031" +
    "\111\001\001\000\010\005\154\007\106\031\111\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\010\015\035" +
    "\210\047\037\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\010\015\035\204\047\037\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\031\167\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\025\172\026\174\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\025\177\001\001\000\002\001\001\000\010\010\015" +
    "\035\201\047\037\001\001\000\002\001\001\000\004\031" +
    "\203\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\031\207\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\005\237\007\106\031\111\001\001" +
    "\000\010\005\213\007\106\031\111\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\030\002\031" +
    "\003\035\004\046\010\015\013\027\014\032\032\034\035" +
    "\005\040\230\042\036\047\037\001\001\000\030\002\031" +
    "\003\035\004\046\010\015\013\027\014\032\032\034\035" +
    "\005\040\220\042\036\047\037\001\001\000\002\001\001" +
    "\000\004\006\222\001\001\000\002\001\001\000\004\003" +
    "\224\001\001\000\002\001\001\000\030\002\031\003\035" +
    "\004\046\010\015\013\027\014\032\032\034\035\005\040" +
    "\226\042\036\047\037\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\006\232\001\001\000" +
    "\002\001\001\000\030\002\031\003\035\004\046\010\015" +
    "\013\027\014\032\032\034\035\005\040\234\042\036\047" +
    "\037\001\001\000\002\001\001\000\004\006\236\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\030\002\031\003\035\004\046\010\015\013\027\014\032" +
    "\032\034\035\005\040\242\042\036\047\037\001\001\000" +
    "\002\001\001\000\004\006\244\001\001\000\002\001\001" +
    "\000\006\010\251\034\273\001\001\000\006\010\251\034" +
    "\247\001\001\000\004\031\255\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\005\257\007\106" +
    "\031\111\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\033\262\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\030\002\031\003\035\004\046\010" +
    "\015\013\027\014\032\032\034\035\005\040\266\042\036" +
    "\047\037\001\001\000\002\001\001\000\002\001\001\000" +
    "\030\002\031\003\035\004\046\010\015\013\027\014\032" +
    "\032\034\035\005\040\271\042\036\047\037\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\031\274\001\001" +
    "\000\002\001\001\000\010\005\276\007\106\031\111\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\033\301" +
    "\001\001\000\002\001\001\000\002\001\001\000\030\002" +
    "\031\003\035\004\046\010\015\013\027\014\032\032\034" +
    "\035\005\040\304\042\036\047\037\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\010\015\035\317\047\037" +
    "\001\001\000\004\031\310\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\025\172\026\313\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\010\015\035\316\047" +
    "\037\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\031" +
    "\324\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\010\375\023\374\047\373\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\010\375\023" +
    "\377\047\373\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\010\375\023\u0102\047\373\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\030\002\031" +
    "\003\035\004\046\010\015\013\027\014\032\032\034\035" +
    "\005\040\u0106\042\036\047\037\001\001\000\002\001\001" +
    "\000\004\031\u0108\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    ArrayList gramas = new ArrayList();
    public Nodo raiz;
    public int cont = 0;
    public int maximo(){
    int a=5;
    return a;
}
    ArrayList errores=new ArrayList();
    public Symbol s;
    @Override
    public void syntax_error (Symbol s){
        if(s.left==-1){
        }else{
                errores.add("Syntax error en la línea: " + (s.left) + " , columna: " +(s.right)+ " con el símbolo = "+(s.value));
    }
}
    @Override
    public void unrecovered_syntax_error(Symbol s){
    if(s.left==-1){
    }else{
        errores.add("Error desconocido, por favor revise la linea: " + (s.left ) + " y columna:  " + (s.right )+ "Con simbolo: "+s.value);
    }    
    }
    public Symbol getS(){
        return this.s;
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // CONTADOR ::= tkn_id ITERADOR tkn_puntocoma 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTADOR",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // ARGSPARAMS ::= tkn_id 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARGSPARAMS",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // ARGSPARAMS ::= tkn_id tkn_coma ARGSPARAMS 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARGSPARAMS",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // ARGS ::= 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARGS",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // ARGS ::= ARGSPARAMS 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARGS",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // EXPR ::= tkn_caracter 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPR",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // EXPR ::= tkn_num 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPR",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // EXPR ::= tkn_id 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPR",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // EXPR ::= tkn_parentesisiz EXPR tkn_parentesisde 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPR",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // EXPR ::= EXPR tkn_opmod EXPR 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPR",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // EXPR ::= EXPR tkn_opmulti EXPR 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPR",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // EXPR ::= EXPR tkn_opadicion EXPR 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPR",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // TIPO ::= tkn_void 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // TIPO ::= tkn_int 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // TIPO ::= tkn_charp 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // TIPO ::= tkn_intp 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // TIPO ::= tkn_char 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // CONDICIONP ::= EXPR tkn_oprel EXPR 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICIONP",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // CONDICION ::= CONDICIONP 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // CONDICION ::= tkn_parentesisiz CONDICIONP tkn_parentesisde 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // CONDICION ::= tkn_parentesisiz CONDICIONP tkn_parentesisde tkn_or CONDICION 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // CONDICION ::= tkn_parentesisiz CONDICIONP tkn_parentesisde tkn_and CONDICION 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // CONDICION ::= CONDICIONP tkn_or CONDICION 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // CONDICION ::= CONDICIONP tkn_and CONDICION 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // ITERADOR ::= tkn_opmulti tkn_oprel EXPR 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ITERADOR",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // ITERADOR ::= tkn_opadicion tkn_oprel EXPR 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ITERADOR",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // ITERADOR ::= tkn_decrement 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ITERADOR",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // ITERADOR ::= tkn_increment 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ITERADOR",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // BLOQUE ::= 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // BLOQUE ::= CONTADOR BLOQUE 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // BLOQUE ::= PRINTF BLOQUE 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // BLOQUE ::= SCANF BLOQUE 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // BLOQUE ::= ASIGN BLOQUE 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // BLOQUE ::= WHILE BLOQUE 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // BLOQUE ::= FOR BLOQUE 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // BLOQUE ::= IF BLOQUE 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // SCANF ::= tkn_scanf tkn_parentesisiz error tkn_coma tkn_ampersand tkn_id tkn_parentesisde tkn_puntocoma 
            {
              Nodo RESULT =null;
		parser.errores.add("conststr ausente en la funcion scanf");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SCANF",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // SCANF ::= tkn_scanf error tkn_cadena tkn_coma tkn_ampersand tkn_id tkn_parentesisde tkn_puntocoma 
            {
              Nodo RESULT =null;
		parser.errores.add("parentesis de apertura '(' ausente en la funcion scanf");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SCANF",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // SCANF ::= tkn_scanf tkn_parentesisiz tkn_cadena tkn_coma tkn_ampersand tkn_id error tkn_puntocoma 
            {
              Nodo RESULT =null;
		parser.errores.add("parentesis de cierre ')' ausente en la funcion scanf");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SCANF",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // SCANF ::= tkn_scanf tkn_parentesisiz tkn_cadena tkn_coma tkn_ampersand error tkn_parentesisde tkn_puntocoma 
            {
              Nodo RESULT =null;
		parser.errores.add("identificador ausente en la funcion scanf");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SCANF",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // SCANF ::= tkn_scanf tkn_parentesisiz tkn_cadena tkn_coma error tkn_id tkn_parentesisde tkn_puntocoma 
            {
              Nodo RESULT =null;
		parser.errores.add("Puntero a identificador '&' ausente en la funcion scanf");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SCANF",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // SCANF ::= tkn_scanf tkn_parentesisiz tkn_cadena tkn_coma tkn_ampersand tkn_id tkn_parentesisde tkn_puntocoma 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SCANF",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // PRINTF ::= tkn_printf tkn_parentesisiz error tkn_coma tkn_id tkn_parentesisde tkn_puntocoma 
            {
              Nodo RESULT =null;
		parser.errores.add("conststr ausente en la funcion printf");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRINTF",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // PRINTF ::= tkn_printf error tkn_cadena tkn_coma tkn_id tkn_parentesisde tkn_puntocoma 
            {
              Nodo RESULT =null;
		parser.errores.add("se esperaba el simbolo '(' en la funcion printf");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRINTF",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // PRINTF ::= tkn_printf tkn_parentesisiz tkn_cadena tkn_coma tkn_id tkn_parentesisde error 
            {
              Nodo RESULT =null;
		parser.errores.add("se esperaba el simbolo ';' en la funcion printf");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRINTF",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // PRINTF ::= tkn_printf tkn_parentesisiz tkn_cadena tkn_coma tkn_id error tkn_puntocoma 
            {
              Nodo RESULT =null;
		parser.errores.add("parentesis de cierre ')' ausente en la funcion printf");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRINTF",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // PRINTF ::= tkn_printf tkn_parentesisiz tkn_cadena tkn_coma error tkn_parentesisde tkn_puntocoma 
            {
              Nodo RESULT =null;
		parser.errores.add("identificador ausente en la funcion printf");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRINTF",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // PRINTF ::= tkn_printf tkn_parentesisiz tkn_cadena error tkn_id tkn_parentesisde tkn_puntocoma 
            {
              Nodo RESULT =null;
		parser.errores.add("coma ',' ausente en la funcion printf");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRINTF",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // PRINTF ::= tkn_printf tkn_parentesisiz tkn_cadena tkn_parentesisde tkn_puntocoma 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRINTF",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // PRINTF ::= tkn_printf tkn_parentesisiz tkn_cadena tkn_coma tkn_id tkn_parentesisde tkn_puntocoma 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRINTF",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // WHILE ::= tkn_while tkn_parentesisiz CONDICION error tkn_llaveiz BLOQUE tkn_llaveder 
            {
              Nodo RESULT =null;
		int jleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int jright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo j = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		parser.errores.add("Se esperaba un ')' en bloque while\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("WHILE",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // WHILE ::= tkn_while tkn_parentesisiz CONDICION tkn_parentesisde error BLOQUE tkn_llaveder 
            {
              Nodo RESULT =null;
		int jleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int jright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo j = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		parser.errores.add("Se esperaba un '{' en bloque while\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("WHILE",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // WHILE ::= tkn_while tkn_parentesisiz CONDICION tkn_parentesisde tkn_llaveiz BLOQUE tkn_llaveder 
            {
              Nodo RESULT =null;
		int jleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int jright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo j = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("WHILE",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // FOR ::= tkn_for tkn_parentesisiz ASIGNACION EXPR tkn_puntocoma CONDICION tkn_puntocoma tkn_id ITERADOR error tkn_llaveiz BLOQUE tkn_llaveder 
            {
              Nodo RESULT =null;
		int jleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int jright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo j = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		parser.errores.add("Se esperaba un parentesis de cierre ')' for\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FOR",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // FOR ::= tkn_for error ASIGNACION EXPR tkn_puntocoma CONDICION tkn_puntocoma tkn_id ITERADOR tkn_parentesisde tkn_llaveiz BLOQUE tkn_llaveder 
            {
              Nodo RESULT =null;
		int jleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int jright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo j = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		parser.errores.add("Se esperaba un parentesis de apertura '(' for\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FOR",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // FOR ::= tkn_for tkn_parentesisiz ASIGNACION EXPR tkn_puntocoma CONDICION tkn_puntocoma tkn_id ITERADOR tkn_parentesisde tkn_llaveiz BLOQUE tkn_llaveder 
            {
              Nodo RESULT =null;
		int jleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int jright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo j = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FOR",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // ELSE ::= 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ELSE",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // ELSE ::= tkn_else IF 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ELSE",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // ELSE ::= tkn_else tkn_llaveiz BLOQUE tkn_llaveder 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ELSE",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // IF ::= tkn_if tkn_parentesisiz CONDICION error tkn_llaveiz BLOQUE tkn_llaveder ELSE 
            {
              Nodo RESULT =null;
		parser.errores.add("Se esperaba el simbolo ')' en bloque if\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IF",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // IF ::= tkn_if error CONDICION tkn_parentesisde tkn_llaveiz BLOQUE tkn_llaveder ELSE 
            {
              Nodo RESULT =null;
		parser.errores.add("Se esperaba el simbolo '(' en bloque if\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IF",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // IF ::= tkn_if tkn_parentesisiz CONDICION tkn_parentesisde error BLOQUE tkn_llaveder ELSE 
            {
              Nodo RESULT =null;
		parser.errores.add("Llave de apertura '{' ausente en bloque if\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IF",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // IF ::= tkn_if tkn_parentesisiz CONDICION tkn_parentesisde tkn_llaveiz BLOQUE tkn_llaveder ELSE 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IF",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // PARAMS ::= 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMS",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // PARAMS ::= TIPO 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMS",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // PARAMS ::= DECLR 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMS",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // PARAMS ::= DECLR tkn_coma PARAMS 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMS",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // PARAMS ::= TIPO tkn_coma PARAMS 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMS",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // ASIGN ::= error tkn_puntocoma 
            {
              Nodo RESULT =null;
		parser.errores.add("Error en declaracion \n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGN",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // ASIGN ::= DECLASIGN tkn_puntocoma 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGN",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // DECLASIGN ::= tkn_id tkn_oprel tkn_id tkn_parentesisiz ARGS tkn_parentesisde 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLASIGN",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // DECLASIGN ::= DECLR tkn_oprel tkn_id tkn_parentesisiz ARGS tkn_parentesisde 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLASIGN",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // DECLASIGN ::= DECLR 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLASIGN",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // DECLASIGN ::= tkn_id tkn_oprel EXPR 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLASIGN",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // DECLASIGN ::= tkn_id tkn_oprel EXPR tkn_coma DECLASIGN 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLASIGN",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // DECLASIGN ::= tkn_id error DECLASIGN error 
            {
              Nodo RESULT =null;
		parser.errores.add("Se esperaba el simbolo ',' en declaración \n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLASIGN",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // DECLASIGN ::= tkn_id tkn_coma DECLASIGN 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLASIGN",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // DECLASIGN ::= DECLR tkn_coma DECLASIGN 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLASIGN",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // DECLASIGN ::= DECLR tkn_oprel EXPR 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLASIGN",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // DECLASIGN ::= DECLR tkn_oprel EXPR tkn_coma DECLASIGN 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLASIGN",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // ASIGNACION ::= tkn_id tkn_oprel 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // ASIGNACION ::= TIPO tkn_id tkn_oprel 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // DECLR ::= TIPO tkn_id 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLR",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // PROTOFUN ::= DECLR tkn_parentesisiz PARAMS tkn_parentesisde 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROTOFUN",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // FUNCION ::= PROTOFUN tkn_llaveiz BLOQUE tkn_return EXPR error tkn_llaveiz 
            {
              Nodo RESULT =null;
		parser.errores.add("Se esperaba un ';' en linea de retorno de la funcion\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCION",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // FUNCION ::= PROTOFUN tkn_llaveiz BLOQUE tkn_return EXPR tkn_puntocoma error 
            {
              Nodo RESULT =null;
		parser.errores.add("Llave de cierre '}' ausente en la funcion\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCION",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // FUNCION ::= tkn_int tkn_main tkn_parentesisiz tkn_parentesisde tkn_llaveiz BLOQUE tkn_return EXPR tkn_puntocoma tkn_llaveder 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCION",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // FUNCION ::= PROTOFUN tkn_llaveiz BLOQUE tkn_return EXPR tkn_puntocoma tkn_llaveder 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCION",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // PROTOTIPO ::= PROTOFUN error 
            {
              Nodo RESULT =null;
		parser.errores.add("Error en fin de linea se espera un ';' \n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROTOTIPO",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // PROTOTIPO ::= PROTOFUN tkn_puntocoma 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROTOTIPO",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // PROGRAM ::= ASIGN PROGRAM 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROGRAM",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // PROGRAM ::= FUNCION PROGRAM 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROGRAM",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // PROGRAM ::= PROTOTIPO PROGRAM 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROGRAM",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= PROGRAM 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIO",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo start_val = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

