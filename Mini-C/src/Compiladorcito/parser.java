
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Fri Sep 16 23:54:31 CST 2022
//----------------------------------------------------

package Compiladorcito;

import java_cup.runtime.*;
import java.util.ArrayList;
import java.util.*;
import java.io.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Fri Sep 16 23:54:31 CST 2022
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\155\000\002\002\004\000\002\025\003\000\002\030" +
    "\004\000\002\030\004\000\002\030\004\000\002\030\002" +
    "\000\002\014\004\000\002\013\011\000\002\032\006\000" +
    "\002\031\004\000\002\031\004\000\002\023\005\000\002" +
    "\023\004\000\002\023\005\000\002\024\007\000\002\024" +
    "\005\000\002\024\005\000\002\024\005\000\002\024\005" +
    "\000\002\024\007\000\002\024\005\000\002\024\005\000" +
    "\002\024\003\000\002\024\010\000\002\024\010\000\002" +
    "\024\010\000\002\024\010\000\002\024\006\000\002\024" +
    "\006\000\002\021\004\000\002\021\004\000\002\015\005" +
    "\000\002\015\005\000\002\015\003\000\002\015\003\000" +
    "\002\015\002\000\002\034\011\000\002\003\012\000\002" +
    "\003\012\000\002\003\012\000\002\003\012\000\002\006" +
    "\006\000\002\006\004\000\002\006\006\000\002\006\002" +
    "\000\002\004\017\000\002\004\017\000\002\004\017\000" +
    "\002\004\017\000\002\004\017\000\002\002\011\000\002" +
    "\002\011\000\002\002\011\000\002\002\011\000\002\027" +
    "\011\000\002\027\007\000\002\027\011\000\002\027\011" +
    "\000\002\027\011\000\002\027\011\000\002\027\011\000" +
    "\002\027\011\000\002\012\012\000\002\012\012\000\002" +
    "\012\012\000\002\012\012\000\002\012\012\000\002\012" +
    "\012\000\002\026\004\000\002\026\004\000\002\026\004" +
    "\000\002\026\004\000\002\026\004\000\002\026\004\000" +
    "\002\026\004\000\002\026\002\000\002\022\003\000\002" +
    "\022\003\000\002\022\005\000\002\022\005\000\002\005" +
    "\005\000\002\005\005\000\002\005\007\000\002\005\007" +
    "\000\002\005\005\000\002\005\003\000\002\005\003\000" +
    "\002\005\005\000\002\007\005\000\002\010\003\000\002" +
    "\010\003\000\002\010\003\000\002\010\003\000\002\033" +
    "\004\000\002\033\004\000\002\020\005\000\002\020\005" +
    "\000\002\020\005\000\002\020\005\000\002\020\003\000" +
    "\002\020\003\000\002\020\003\000\002\020\003\000\002" +
    "\017\003\000\002\017\002\000\002\016\005\000\002\016" +
    "\003\000\002\011\005\000\002\011\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0130\000\016\002\ufffc\003\017\014\004\035\021\036" +
    "\015\037\007\001\002\000\012\003\uffa5\021\uffa5\037\uffa5" +
    "\043\uffa5\001\002\000\004\040\u0132\001\002\000\004\002" +
    "\000\001\002\000\012\003\262\010\232\020\233\043\234" +
    "\001\002\000\004\002\u0131\001\002\000\016\002\ufffc\003" +
    "\017\014\004\035\021\036\015\037\007\001\002\000\016" +
    "\002\ufffc\003\017\014\004\035\021\036\015\037\007\001" +
    "\002\000\006\022\102\040\101\001\002\000\012\010\033" +
    "\020\032\040\uffeb\043\031\001\002\000\014\003\uffa8\005" +
    "\030\021\uffa8\037\uffa8\043\uffa8\001\002\000\004\037\027" +
    "\001\002\000\006\037\026\040\025\001\002\000\016\002" +
    "\ufffc\003\017\014\004\035\021\036\015\037\007\001\002" +
    "\000\014\003\uffa6\005\023\021\uffa6\037\uffa6\043\uffa6\001" +
    "\002\000\012\003\uffa7\021\uffa7\037\uffa7\043\uffa7\001\002" +
    "\000\012\003\uffa4\021\uffa4\037\uffa4\043\uffa4\001\002\000" +
    "\004\002\ufffe\001\002\000\034\002\uffe3\003\uffe3\014\uffe3" +
    "\015\uffe3\016\uffe3\023\uffe3\026\uffe3\027\uffe3\030\uffe3\031" +
    "\uffe3\035\uffe3\036\uffe3\037\uffe3\001\002\000\014\010\ufff7" +
    "\020\ufff7\021\ufff7\040\ufff7\043\ufff7\001\002\000\014\010" +
    "\ufff8\020\ufff8\021\ufff8\040\ufff8\043\ufff8\001\002\000\012" +
    "\003\uffa3\021\uffa3\037\uffa3\043\uffa3\001\002\000\014\003" +
    "\067\014\004\035\021\036\015\037\007\001\002\000\014" +
    "\003\067\014\004\021\uffde\035\021\036\015\001\002\000" +
    "\014\003\036\020\040\037\037\042\041\046\034\001\002" +
    "\000\026\003\uff9c\004\uff9c\005\uff9c\007\uff9c\010\uff9c\021" +
    "\uff9c\024\uff9c\025\uff9c\040\uff9c\043\uff9c\001\002\000\014" +
    "\004\047\005\045\007\044\040\ufff2\043\064\001\002\000" +
    "\026\003\uff9b\004\uff9b\005\uff9b\007\uff9b\010\uff9b\021\uff9b" +
    "\024\uff9b\025\uff9b\040\uff9b\043\uff9b\001\002\000\016\004" +
    "\uff9e\005\uff9e\007\uff9e\020\053\040\uff9e\043\uff9e\001\002" +
    "\000\014\003\036\020\040\037\043\042\041\046\034\001" +
    "\002\000\026\003\uff9d\004\uff9d\005\uff9d\007\uff9d\010\uff9d" +
    "\021\uff9d\024\uff9d\025\uff9d\040\uff9d\043\uff9d\001\002\000" +
    "\012\004\047\005\045\007\044\021\046\001\002\000\026" +
    "\003\uff9e\004\uff9e\005\uff9e\007\uff9e\010\uff9e\021\uff9e\024" +
    "\uff9e\025\uff9e\040\uff9e\043\uff9e\001\002\000\014\003\036" +
    "\020\040\037\043\042\041\046\034\001\002\000\014\003" +
    "\036\020\040\037\043\042\041\046\034\001\002\000\026" +
    "\003\uff9f\004\uff9f\005\uff9f\007\uff9f\010\uff9f\021\uff9f\024" +
    "\uff9f\025\uff9f\040\uff9f\043\uff9f\001\002\000\014\003\036" +
    "\020\040\037\043\042\041\046\034\001\002\000\026\003" +
    "\uffa2\004\uffa2\005\045\007\044\010\uffa2\021\uffa2\024\uffa2" +
    "\025\uffa2\040\uffa2\043\uffa2\001\002\000\026\003\uffa1\004" +
    "\uffa1\005\uffa1\007\uffa1\010\uffa1\021\uffa1\024\uffa1\025\uffa1" +
    "\040\uffa1\043\uffa1\001\002\000\026\003\uffa0\004\uffa0\005" +
    "\uffa0\007\uffa0\010\uffa0\021\uffa0\024\uffa0\025\uffa0\040\uffa0" +
    "\043\uffa0\001\002\000\010\003\054\021\uff99\037\056\001" +
    "\002\000\004\021\063\001\002\000\006\003\uff9a\021\uff9a" +
    "\001\002\000\010\003\uff97\021\uff97\043\061\001\002\000" +
    "\004\021\060\001\002\000\004\040\uffea\001\002\000\004" +
    "\037\056\001\002\000\006\003\uff98\021\uff98\001\002\000" +
    "\004\040\uffe8\001\002\000\014\003\067\014\004\035\021" +
    "\036\015\037\007\001\002\000\004\040\ufff3\001\002\000" +
    "\010\010\033\040\uffeb\043\031\001\002\000\004\037\026" +
    "\001\002\000\006\021\uffe0\043\076\001\002\000\004\021" +
    "\075\001\002\000\010\021\uffdf\037\027\043\073\001\002" +
    "\000\014\003\067\014\004\021\uffde\035\021\036\015\001" +
    "\002\000\004\021\uffe2\001\002\000\006\022\ufff9\040\ufff9" +
    "\001\002\000\014\003\067\014\004\021\uffde\035\021\036" +
    "\015\001\002\000\004\021\uffe1\001\002\000\004\040\ufff1" +
    "\001\002\000\016\002\ufffb\003\ufffb\014\ufffb\035\ufffb\036" +
    "\ufffb\037\ufffb\001\002\000\030\003\017\014\004\015\114" +
    "\016\116\026\113\027\uffb6\030\104\031\117\035\021\036" +
    "\015\037\115\001\002\000\032\003\017\014\004\015\114" +
    "\016\116\023\uffb6\026\113\027\uffb6\030\104\031\117\035" +
    "\021\036\015\037\115\001\002\000\006\003\u0111\020\u0112" +
    "\001\002\000\032\003\017\014\004\015\114\016\116\023" +
    "\uffb6\026\113\027\uffb6\030\104\031\117\035\021\036\015" +
    "\037\115\001\002\000\032\003\017\014\004\015\114\016" +
    "\116\023\uffb6\026\113\027\uffb6\030\104\031\117\035\021" +
    "\036\015\037\115\001\002\000\032\003\017\014\004\015" +
    "\114\016\116\023\uffb6\026\113\027\uffb6\030\104\031\117" +
    "\035\021\036\015\037\115\001\002\000\004\027\u010a\001" +
    "\002\000\032\003\017\014\004\015\114\016\116\023\uffb6" +
    "\026\113\027\uffb6\030\104\031\117\035\021\036\015\037" +
    "\115\001\002\000\032\003\017\014\004\015\114\016\116" +
    "\023\uffb6\026\113\027\uffb6\030\104\031\117\035\021\036" +
    "\015\037\115\001\002\000\006\003\325\020\326\001\002" +
    "\000\006\003\266\020\267\001\002\000\022\003\231\004" +
    "\235\005\227\010\232\020\233\032\226\033\230\043\234" +
    "\001\002\000\006\003\157\020\160\001\002\000\006\003" +
    "\122\020\123\001\002\000\032\003\017\014\004\015\114" +
    "\016\116\023\uffb6\026\113\027\uffb6\030\104\031\117\035" +
    "\021\036\015\037\115\001\002\000\006\023\uffbc\027\uffbc" +
    "\001\002\000\004\045\151\001\002\000\006\003\124\045" +
    "\125\001\002\000\004\043\144\001\002\000\004\043\126" +
    "\001\002\000\006\003\127\044\130\001\002\000\004\037" +
    "\141\001\002\000\006\003\131\037\132\001\002\000\004" +
    "\021\137\001\002\000\006\003\133\021\134\001\002\000" +
    "\004\040\136\001\002\000\004\040\135\001\002\000\032" +
    "\003\uffc3\014\uffc3\015\uffc3\016\uffc3\023\uffc3\026\uffc3\027" +
    "\uffc3\030\uffc3\031\uffc3\035\uffc3\036\uffc3\037\uffc3\001\002" +
    "\000\032\003\uffc0\014\uffc0\015\uffc0\016\uffc0\023\uffc0\026" +
    "\uffc0\027\uffc0\030\uffc0\031\uffc0\035\uffc0\036\uffc0\037\uffc0" +
    "\001\002\000\004\040\140\001\002\000\032\003\uffc1\014" +
    "\uffc1\015\uffc1\016\uffc1\023\uffc1\026\uffc1\027\uffc1\030\uffc1" +
    "\031\uffc1\035\uffc1\036\uffc1\037\uffc1\001\002\000\004\021" +
    "\142\001\002\000\004\040\143\001\002\000\032\003\uffc2" +
    "\014\uffc2\015\uffc2\016\uffc2\023\uffc2\026\uffc2\027\uffc2\030" +
    "\uffc2\031\uffc2\035\uffc2\036\uffc2\037\uffc2\001\002\000\004" +
    "\044\145\001\002\000\004\037\146\001\002\000\004\021" +
    "\147\001\002\000\004\040\150\001\002\000\032\003\uffbe" +
    "\014\uffbe\015\uffbe\016\uffbe\023\uffbe\026\uffbe\027\uffbe\030" +
    "\uffbe\031\uffbe\035\uffbe\036\uffbe\037\uffbe\001\002\000\004" +
    "\043\152\001\002\000\004\044\153\001\002\000\004\037" +
    "\154\001\002\000\004\021\155\001\002\000\004\040\156" +
    "\001\002\000\032\003\uffbf\014\uffbf\015\uffbf\016\uffbf\023" +
    "\uffbf\026\uffbf\027\uffbf\030\uffbf\031\uffbf\035\uffbf\036\uffbf" +
    "\037\uffbf\001\002\000\014\003\164\020\165\037\043\042" +
    "\041\046\034\001\002\000\014\003\164\020\165\037\043" +
    "\042\041\046\034\001\002\000\014\003\uffac\021\uffac\024" +
    "\215\025\214\040\uffac\001\002\000\012\004\047\005\045" +
    "\007\044\010\170\001\002\000\006\003\201\021\202\001" +
    "\002\000\022\003\uffab\004\uff9b\005\uff9b\007\uff9b\010\uff9b" +
    "\021\uffab\024\177\040\uffab\001\002\000\014\003\036\020" +
    "\040\037\043\042\041\046\034\001\002\000\004\021\172" +
    "\001\002\000\014\004\047\005\045\007\044\010\170\021" +
    "\046\001\002\000\014\003\036\020\040\037\043\042\041" +
    "\046\034\001\002\000\022\003\uffa9\004\047\005\045\007" +
    "\044\021\uffa9\024\uffa9\025\uffa9\040\uffa9\001\002\000\014" +
    "\003\uffad\021\uffad\024\174\025\173\040\uffad\001\002\000" +
    "\014\003\164\020\165\037\043\042\041\046\034\001\002" +
    "\000\014\003\164\020\165\037\043\042\041\046\034\001" +
    "\002\000\010\003\uffaf\021\uffaf\040\uffaf\001\002\000\010" +
    "\003\uffae\021\uffae\040\uffae\001\002\000\014\003\164\020" +
    "\165\037\043\042\041\046\034\001\002\000\010\003\uffaa" +
    "\021\uffaa\040\uffaa\001\002\000\004\022\211\001\002\000" +
    "\006\003\203\022\204\001\002\000\030\003\017\014\004" +
    "\015\114\016\116\023\uffb6\026\113\030\104\031\117\035" +
    "\021\036\015\037\115\001\002\000\030\003\017\014\004" +
    "\015\114\016\116\023\uffb6\026\113\030\104\031\117\035" +
    "\021\036\015\037\115\001\002\000\004\023\206\001\002" +
    "\000\032\003\uffcf\014\uffcf\015\uffcf\016\uffcf\023\uffcf\026" +
    "\uffcf\027\uffcf\030\uffcf\031\uffcf\035\uffcf\036\uffcf\037\uffcf" +
    "\001\002\000\004\023\210\001\002\000\032\003\uffce\014" +
    "\uffce\015\uffce\016\uffce\023\uffce\026\uffce\027\uffce\030\uffce" +
    "\031\uffce\035\uffce\036\uffce\037\uffce\001\002\000\030\003" +
    "\017\014\004\015\114\016\116\023\uffb6\026\113\030\104" +
    "\031\117\035\021\036\015\037\115\001\002\000\004\023" +
    "\213\001\002\000\032\003\uffcd\014\uffcd\015\uffcd\016\uffcd" +
    "\023\uffcd\026\uffcd\027\uffcd\030\uffcd\031\uffcd\035\uffcd\036" +
    "\uffcd\037\uffcd\001\002\000\014\003\164\020\165\037\043" +
    "\042\041\046\034\001\002\000\014\003\164\020\165\037" +
    "\043\042\041\046\034\001\002\000\010\003\uffb1\021\uffb1" +
    "\040\uffb1\001\002\000\010\003\uffb0\021\uffb0\040\uffb0\001" +
    "\002\000\004\021\221\001\002\000\004\022\222\001\002" +
    "\000\030\003\017\014\004\015\114\016\116\023\uffb6\026" +
    "\113\030\104\031\117\035\021\036\015\037\115\001\002" +
    "\000\004\023\224\001\002\000\032\003\uffcc\014\uffcc\015" +
    "\uffcc\016\uffcc\023\uffcc\026\uffcc\027\uffcc\030\uffcc\031\uffcc" +
    "\035\uffcc\036\uffcc\037\uffcc\001\002\000\004\040\265\001" +
    "\002\000\010\003\uffb5\021\uffb5\040\uffb5\001\002\000\004" +
    "\010\263\001\002\000\010\003\uffb4\021\uffb4\040\uffb4\001" +
    "\002\000\024\003\260\014\004\020\040\035\021\036\015" +
    "\037\256\040\257\042\041\046\034\001\002\000\014\003" +
    "\036\020\040\037\245\042\041\046\034\001\002\000\010" +
    "\003\uff99\021\uff99\037\056\001\002\000\014\003\067\014" +
    "\004\035\021\036\015\037\007\001\002\000\004\010\236" +
    "\001\002\000\014\003\036\020\040\037\043\042\041\046" +
    "\034\001\002\000\016\003\uffb3\004\047\005\045\007\044" +
    "\021\uffb3\040\uffb3\001\002\000\004\040\ufff0\001\002\000" +
    "\006\003\242\021\243\001\002\000\004\040\uffe5\001\002" +
    "\000\004\040\uffe6\001\002\000\014\004\047\005\045\007" +
    "\044\040\uffed\043\253\001\002\000\016\004\uff9e\005\uff9e" +
    "\007\uff9e\020\246\040\uff9e\043\uff9e\001\002\000\010\003" +
    "\247\021\uff99\037\056\001\002\000\004\021\252\001\002" +
    "\000\004\021\251\001\002\000\004\040\uffe9\001\002\000" +
    "\004\040\uffe7\001\002\000\014\003\067\014\004\035\021" +
    "\036\015\037\007\001\002\000\004\040\uffee\001\002\000" +
    "\004\040\uffef\001\002\000\022\003\262\004\uff9e\005\uff9e" +
    "\007\uff9e\010\232\020\233\040\uff9e\043\234\001\002\000" +
    "\032\003\uff95\014\uff95\015\uff95\016\uff95\023\uff95\026\uff95" +
    "\027\uff95\030\uff95\031\uff95\035\uff95\036\uff95\037\uff95\001" +
    "\002\000\014\004\uff9b\005\uff9b\007\uff9b\037\026\040\uff9b" +
    "\001\002\000\012\004\047\005\045\007\044\040\uffec\001" +
    "\002\000\022\003\260\014\004\020\040\035\021\036\015" +
    "\037\256\042\041\046\034\001\002\000\014\003\036\020" +
    "\040\037\043\042\041\046\034\001\002\000\016\003\uffb2" +
    "\004\047\005\045\007\044\021\uffb2\040\uffb2\001\002\000" +
    "\032\003\uff96\014\uff96\015\uff96\016\uff96\023\uff96\026\uff96" +
    "\027\uff96\030\uff96\031\uff96\035\uff96\036\uff96\037\uff96\001" +
    "\002\000\014\003\164\020\165\037\043\042\041\046\034" +
    "\001\002\000\014\003\164\020\165\037\043\042\041\046" +
    "\034\001\002\000\006\003\271\021\272\001\002\000\004" +
    "\022\313\001\002\000\006\003\273\022\274\001\002\000" +
    "\030\003\017\014\004\015\114\016\116\023\uffb6\026\113" +
    "\030\104\031\117\035\021\036\015\037\115\001\002\000" +
    "\030\003\017\014\004\015\114\016\116\023\uffb6\026\113" +
    "\030\104\031\117\035\021\036\015\037\115\001\002\000" +
    "\004\023\276\001\002\000\034\003\uffd5\014\uffd5\015\uffd5" +
    "\016\uffd5\017\300\023\uffd5\026\uffd5\027\uffd5\030\uffd5\031" +
    "\uffd5\035\uffd5\036\uffd5\037\uffd5\001\002\000\032\003\uffdc" +
    "\014\uffdc\015\uffdc\016\uffdc\023\uffdc\026\uffdc\027\uffdc\030" +
    "\uffdc\031\uffdc\035\uffdc\036\uffdc\037\uffdc\001\002\000\010" +
    "\003\301\015\114\022\303\001\002\000\030\003\017\014" +
    "\004\015\114\016\116\023\uffb6\026\113\030\104\031\117" +
    "\035\021\036\015\037\115\001\002\000\032\003\uffd7\014" +
    "\uffd7\015\uffd7\016\uffd7\023\uffd7\026\uffd7\027\uffd7\030\uffd7" +
    "\031\uffd7\035\uffd7\036\uffd7\037\uffd7\001\002\000\030\003" +
    "\017\014\004\015\114\016\116\023\uffb6\026\113\030\104" +
    "\031\117\035\021\036\015\037\115\001\002\000\004\023" +
    "\305\001\002\000\032\003\uffd8\014\uffd8\015\uffd8\016\uffd8" +
    "\023\uffd8\026\uffd8\027\uffd8\030\uffd8\031\uffd8\035\uffd8\036" +
    "\uffd8\037\uffd8\001\002\000\004\023\307\001\002\000\032" +
    "\003\uffd6\014\uffd6\015\uffd6\016\uffd6\023\uffd6\026\uffd6\027" +
    "\uffd6\030\uffd6\031\uffd6\035\uffd6\036\uffd6\037\uffd6\001\002" +
    "\000\004\023\311\001\002\000\034\003\uffd5\014\uffd5\015" +
    "\uffd5\016\uffd5\017\300\023\uffd5\026\uffd5\027\uffd5\030\uffd5" +
    "\031\uffd5\035\uffd5\036\uffd5\037\uffd5\001\002\000\032\003" +
    "\uffdb\014\uffdb\015\uffdb\016\uffdb\023\uffdb\026\uffdb\027\uffdb" +
    "\030\uffdb\031\uffdb\035\uffdb\036\uffdb\037\uffdb\001\002\000" +
    "\030\003\017\014\004\015\114\016\116\023\uffb6\026\113" +
    "\030\104\031\117\035\021\036\015\037\115\001\002\000" +
    "\004\023\315\001\002\000\034\003\uffd5\014\uffd5\015\uffd5" +
    "\016\uffd5\017\300\023\uffd5\026\uffd5\027\uffd5\030\uffd5\031" +
    "\uffd5\035\uffd5\036\uffd5\037\uffd5\001\002\000\032\003\uffd9" +
    "\014\uffd9\015\uffd9\016\uffd9\023\uffd9\026\uffd9\027\uffd9\030" +
    "\uffd9\031\uffd9\035\uffd9\036\uffd9\037\uffd9\001\002\000\004" +
    "\021\320\001\002\000\004\022\321\001\002\000\030\003" +
    "\017\014\004\015\114\016\116\023\uffb6\026\113\030\104" +
    "\031\117\035\021\036\015\037\115\001\002\000\004\023" +
    "\323\001\002\000\034\003\uffd5\014\uffd5\015\uffd5\016\uffd5" +
    "\017\300\023\uffd5\026\uffd5\027\uffd5\030\uffd5\031\uffd5\035" +
    "\uffd5\036\uffd5\037\uffd5\001\002\000\032\003\uffda\014\uffda" +
    "\015\uffda\016\uffda\023\uffda\026\uffda\027\uffda\030\uffda\031" +
    "\uffda\035\uffda\036\uffda\037\uffda\001\002\000\012\014\004" +
    "\035\021\036\015\037\331\001\002\000\014\003\330\014" +
    "\004\035\021\036\015\037\331\001\002\000\014\003\036" +
    "\020\040\037\043\042\041\046\034\001\002\000\014\003" +
    "\036\020\040\037\043\042\041\046\034\001\002\000\004" +
    "\010\337\001\002\000\006\003\333\037\334\001\002\000" +
    "\004\010\336\001\002\000\004\010\335\001\002\000\014" +
    "\003\ufff6\020\ufff6\037\ufff6\042\ufff6\046\ufff6\001\002\000" +
    "\014\003\ufff4\020\ufff4\037\ufff4\042\ufff4\046\ufff4\001\002" +
    "\000\014\003\ufff5\020\ufff5\037\ufff5\042\ufff5\046\ufff5\001" +
    "\002\000\012\004\047\005\045\007\044\040\341\001\002" +
    "\000\014\003\164\020\165\037\043\042\041\046\034\001" +
    "\002\000\004\040\343\001\002\000\004\037\344\001\002" +
    "\000\012\004\235\005\227\032\226\033\230\001\002\000" +
    "\004\021\346\001\002\000\004\022\347\001\002\000\030" +
    "\003\017\014\004\015\114\016\116\023\uffb6\026\113\030" +
    "\104\031\117\035\021\036\015\037\115\001\002\000\004" +
    "\023\351\001\002\000\032\003\uffd1\014\uffd1\015\uffd1\016" +
    "\uffd1\023\uffd1\026\uffd1\027\uffd1\030\uffd1\031\uffd1\035\uffd1" +
    "\036\uffd1\037\uffd1\001\002\000\012\004\047\005\045\007" +
    "\044\040\353\001\002\000\014\003\164\020\165\037\043" +
    "\042\041\046\034\001\002\000\004\040\355\001\002\000" +
    "\004\037\356\001\002\000\014\003\357\004\235\005\227" +
    "\032\226\033\230\001\002\000\004\021\371\001\002\000" +
    "\006\003\361\021\362\001\002\000\004\022\366\001\002" +
    "\000\004\022\363\001\002\000\030\003\017\014\004\015" +
    "\114\016\116\023\uffb6\026\113\030\104\031\117\035\021" +
    "\036\015\037\115\001\002\000\004\023\365\001\002\000" +
    "\032\003\uffd4\014\uffd4\015\uffd4\016\uffd4\023\uffd4\026\uffd4" +
    "\027\uffd4\030\uffd4\031\uffd4\035\uffd4\036\uffd4\037\uffd4\001" +
    "\002\000\030\003\017\014\004\015\114\016\116\023\uffb6" +
    "\026\113\030\104\031\117\035\021\036\015\037\115\001" +
    "\002\000\004\023\370\001\002\000\032\003\uffd2\014\uffd2" +
    "\015\uffd2\016\uffd2\023\uffd2\026\uffd2\027\uffd2\030\uffd2\031" +
    "\uffd2\035\uffd2\036\uffd2\037\uffd2\001\002\000\004\022\372" +
    "\001\002\000\030\003\017\014\004\015\114\016\116\023" +
    "\uffb6\026\113\030\104\031\117\035\021\036\015\037\115" +
    "\001\002\000\004\023\374\001\002\000\032\003\uffd0\014" +
    "\uffd0\015\uffd0\016\uffd0\023\uffd0\026\uffd0\027\uffd0\030\uffd0" +
    "\031\uffd0\035\uffd0\036\uffd0\037\uffd0\001\002\000\014\003" +
    "\036\020\040\037\043\042\041\046\034\001\002\000\012" +
    "\004\047\005\045\007\044\040\377\001\002\000\014\003" +
    "\164\020\165\037\043\042\041\046\034\001\002\000\004" +
    "\040\u0101\001\002\000\004\037\u0102\001\002\000\012\004" +
    "\235\005\227\032\226\033\230\001\002\000\004\021\u0104" +
    "\001\002\000\004\022\u0105\001\002\000\030\003\017\014" +
    "\004\015\114\016\116\023\uffb6\026\113\030\104\031\117" +
    "\035\021\036\015\037\115\001\002\000\004\023\u0107\001" +
    "\002\000\032\003\uffd3\014\uffd3\015\uffd3\016\uffd3\023\uffd3" +
    "\026\uffd3\027\uffd3\030\uffd3\031\uffd3\035\uffd3\036\uffd3\037" +
    "\uffd3\001\002\000\006\023\uffb8\027\uffb8\001\002\000\006" +
    "\023\uffbd\027\uffbd\001\002\000\014\003\036\020\040\037" +
    "\043\042\041\046\034\001\002\000\012\004\047\005\045" +
    "\007\044\040\u010c\001\002\000\004\023\u010d\001\002\000" +
    "\016\002\ufffa\003\ufffa\014\ufffa\035\ufffa\036\ufffa\037\ufffa" +
    "\001\002\000\006\023\uffba\027\uffba\001\002\000\006\023" +
    "\uffb9\027\uffb9\001\002\000\006\023\uffbb\027\uffbb\001\002" +
    "\000\004\045\u0129\001\002\000\006\003\u0113\045\u0114\001" +
    "\002\000\004\043\u0125\001\002\000\010\003\u0116\021\u0117" +
    "\043\u0115\001\002\000\006\003\u011c\037\u011d\001\002\000" +
    "\004\037\u0119\001\002\000\004\040\u0118\001\002\000\032" +
    "\003\uffca\014\uffca\015\uffca\016\uffca\023\uffca\026\uffca\027" +
    "\uffca\030\uffca\031\uffca\035\uffca\036\uffca\037\uffca\001\002" +
    "\000\004\021\u011a\001\002\000\004\040\u011b\001\002\000" +
    "\032\003\uffc9\014\uffc9\015\uffc9\016\uffc9\023\uffc9\026\uffc9" +
    "\027\uffc9\030\uffc9\031\uffc9\035\uffc9\036\uffc9\037\uffc9\001" +
    "\002\000\004\021\u0123\001\002\000\006\003\u011e\021\u011f" +
    "\001\002\000\004\040\u0122\001\002\000\006\003\u0120\040" +
    "\u0121\001\002\000\032\003\uffc6\014\uffc6\015\uffc6\016\uffc6" +
    "\023\uffc6\026\uffc6\027\uffc6\030\uffc6\031\uffc6\035\uffc6\036" +
    "\uffc6\037\uffc6\001\002\000\032\003\uffcb\014\uffcb\015\uffcb" +
    "\016\uffcb\023\uffcb\026\uffcb\027\uffcb\030\uffcb\031\uffcb\035" +
    "\uffcb\036\uffcb\037\uffcb\001\002\000\032\003\uffc7\014\uffc7" +
    "\015\uffc7\016\uffc7\023\uffc7\026\uffc7\027\uffc7\030\uffc7\031" +
    "\uffc7\035\uffc7\036\uffc7\037\uffc7\001\002\000\004\040\u0124" +
    "\001\002\000\032\003\uffc8\014\uffc8\015\uffc8\016\uffc8\023" +
    "\uffc8\026\uffc8\027\uffc8\030\uffc8\031\uffc8\035\uffc8\036\uffc8" +
    "\037\uffc8\001\002\000\004\037\u0126\001\002\000\004\021" +
    "\u0127\001\002\000\004\040\u0128\001\002\000\032\003\uffc4" +
    "\014\uffc4\015\uffc4\016\uffc4\023\uffc4\026\uffc4\027\uffc4\030" +
    "\uffc4\031\uffc4\035\uffc4\036\uffc4\037\uffc4\001\002\000\004" +
    "\043\u012a\001\002\000\004\037\u012b\001\002\000\004\021" +
    "\u012c\001\002\000\004\040\u012d\001\002\000\032\003\uffc5" +
    "\014\uffc5\015\uffc5\016\uffc5\023\uffc5\026\uffc5\027\uffc5\030" +
    "\uffc5\031\uffc5\035\uffc5\036\uffc5\037\uffc5\001\002\000\006" +
    "\023\uffb7\027\uffb7\001\002\000\004\002\ufffd\001\002\000" +
    "\004\002\uffff\001\002\000\004\002\001\001\002\000\034" +
    "\002\uffe4\003\uffe4\014\uffe4\015\uffe4\016\uffe4\023\uffe4\026" +
    "\uffe4\027\uffe4\030\uffe4\031\uffe4\035\uffe4\036\uffe4\037\uffe4" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0130\000\026\010\015\013\017\014\010\021\011\024" +
    "\004\025\007\030\005\031\013\032\012\033\021\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\010\015\013\017" +
    "\014\010\021\011\024\004\030\u012f\031\013\032\012\033" +
    "\021\001\001\000\024\010\015\013\017\014\010\021\011" +
    "\024\004\030\u012e\031\013\032\012\033\021\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\010\015\013\017\014" +
    "\010\021\011\024\004\030\023\031\013\032\012\033\021" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\010\015\024" +
    "\077\031\065\033\021\001\001\000\012\010\071\015\070" +
    "\031\067\033\021\001\001\000\004\020\034\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\020\041\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\020\051\001\001" +
    "\000\004\020\050\001\001\000\002\001\001\000\004\020" +
    "\047\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\016\054\017\056\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\016\061\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\010\015\024\064\031\065" +
    "\033\021\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\010\071\015\073\031\067\033\021\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\010\071" +
    "\015\076\031\067\033\021\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\032\002\104\003\110" +
    "\004\117\010\015\011\102\012\105\021\106\024\004\026" +
    "\107\027\111\031\065\033\021\001\001\000\032\002\104" +
    "\003\110\004\117\010\015\011\102\012\105\021\106\024" +
    "\004\026\u012d\027\111\031\065\033\021\001\001\000\002" +
    "\001\001\000\032\002\104\003\110\004\117\010\015\011" +
    "\102\012\105\021\106\024\004\026\u010f\027\111\031\065" +
    "\033\021\001\001\000\032\002\104\003\110\004\117\010" +
    "\015\011\102\012\105\021\106\024\004\026\u010e\027\111" +
    "\031\065\033\021\001\001\000\032\002\104\003\110\004" +
    "\117\010\015\011\102\012\105\021\106\024\004\026\u010d" +
    "\027\111\031\065\033\021\001\001\000\002\001\001\000" +
    "\032\002\104\003\110\004\117\010\015\011\102\012\105" +
    "\021\106\024\004\026\u0108\027\111\031\065\033\021\001" +
    "\001\000\032\002\104\003\110\004\117\010\015\011\102" +
    "\012\105\021\106\024\004\026\u0107\027\111\031\065\033" +
    "\021\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\022\224\001\001\000\002\001\001\000\002\001\001\000" +
    "\032\002\104\003\110\004\117\010\015\011\102\012\105" +
    "\021\106\024\004\026\120\027\111\031\065\033\021\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\005\217\007\160\020\161\001" +
    "\001\000\010\005\162\007\160\020\161\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\007\165\020\166\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\020\170\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\005\175\007\160\020\161" +
    "\001\001\000\010\005\174\007\160\020\161\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\005\177\007\160" +
    "\020\161\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\032\002\104\003\110\004\117\010\015" +
    "\011\102\012\105\021\106\024\004\026\206\027\111\031" +
    "\065\033\021\001\001\000\032\002\104\003\110\004\117" +
    "\010\015\011\102\012\105\021\106\024\004\026\204\027" +
    "\111\031\065\033\021\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\032\002" +
    "\104\003\110\004\117\010\015\011\102\012\105\021\106" +
    "\024\004\026\211\027\111\031\065\033\021\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\005\216\007\160" +
    "\020\161\001\001\000\010\005\215\007\160\020\161\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\032\002\104\003\110\004\117\010" +
    "\015\011\102\012\105\021\106\024\004\026\222\027\111" +
    "\031\065\033\021\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\010\015\020\260\024\254\031" +
    "\065\033\021\001\001\000\004\020\243\001\001\000\006" +
    "\016\054\017\240\001\001\000\012\010\015\024\237\031" +
    "\065\033\021\001\001\000\002\001\001\000\004\020\236" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\016\054\017\247\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\010\015\024\253\031\065\033\021\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\010\015\020\260\024\254\031\065\033\021\001\001" +
    "\000\004\020\263\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\005\316\007\160\020\161\001\001\000\010" +
    "\005\267\007\160\020\161\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\032\002\104\003\110" +
    "\004\117\010\015\011\102\012\105\021\106\024\004\026" +
    "\307\027\111\031\065\033\021\001\001\000\032\002\104" +
    "\003\110\004\117\010\015\011\102\012\105\021\106\024" +
    "\004\026\274\027\111\031\065\033\021\001\001\000\002" +
    "\001\001\000\004\006\276\001\001\000\002\001\001\000" +
    "\004\003\301\001\001\000\032\002\104\003\110\004\117" +
    "\010\015\011\102\012\105\021\106\024\004\026\305\027" +
    "\111\031\065\033\021\001\001\000\002\001\001\000\032" +
    "\002\104\003\110\004\117\010\015\011\102\012\105\021" +
    "\106\024\004\026\303\027\111\031\065\033\021\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\006\311\001\001" +
    "\000\002\001\001\000\032\002\104\003\110\004\117\010" +
    "\015\011\102\012\105\021\106\024\004\026\313\027\111" +
    "\031\065\033\021\001\001\000\002\001\001\000\004\006" +
    "\315\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\032\002\104\003\110\004\117\010\015\011" +
    "\102\012\105\021\106\024\004\026\321\027\111\031\065" +
    "\033\021\001\001\000\002\001\001\000\004\006\323\001" +
    "\001\000\002\001\001\000\010\010\331\023\374\033\021" +
    "\001\001\000\010\010\331\023\326\033\021\001\001\000" +
    "\004\020\351\001\001\000\004\020\337\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\005\341\007\160\020\161\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\022\344" +
    "\001\001\000\002\001\001\000\002\001\001\000\032\002" +
    "\104\003\110\004\117\010\015\011\102\012\105\021\106" +
    "\024\004\026\347\027\111\031\065\033\021\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\005\353\007\160\020\161\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\022\357\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\032\002\104\003\110\004\117\010\015\011\102\012\105" +
    "\021\106\024\004\026\363\027\111\031\065\033\021\001" +
    "\001\000\002\001\001\000\002\001\001\000\032\002\104" +
    "\003\110\004\117\010\015\011\102\012\105\021\106\024" +
    "\004\026\366\027\111\031\065\033\021\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\032\002" +
    "\104\003\110\004\117\010\015\011\102\012\105\021\106" +
    "\024\004\026\372\027\111\031\065\033\021\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\020\375\001\001" +
    "\000\002\001\001\000\010\005\377\007\160\020\161\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\022\u0102" +
    "\001\001\000\002\001\001\000\002\001\001\000\032\002" +
    "\104\003\110\004\117\010\015\011\102\012\105\021\106" +
    "\024\004\026\u0105\027\111\031\065\033\021\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\020\u010a\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    ArrayList gramas = new ArrayList();
    public Nodo raiz;
    public int cont = 0;
    public int maximo(){
    int a=5;
    return a;
}
    ArrayList errores=new ArrayList();
    public Symbol s;
    @Override
    public void syntax_error (Symbol s){
        if(s.left==-1){
        }else{
                errores.add("Syntax error en la línea: " + (s.left) + " , columna: " +(s.right)+ " con el símbolo = "+(s.value));
    }
}
    @Override
    public void unrecovered_syntax_error(Symbol s){
    if(s.left==-1){
    }else{
        errores.add("Error desconocido, por favor revise la linea: " + (s.left ) + " y columna:  " + (s.right )+ "Con simbolo: "+s.value);
    }    
    }
    public Symbol getS(){
        return this.s;
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // CONTADOR ::= tkn_id error tkn_puntocoma 
            {
              Nodo RESULT =null;
		parser.errores.add("Iterador en identificador incorrecta");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTADOR",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // CONTADOR ::= tkn_id ITERADOR tkn_puntocoma 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTADOR",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // ARGSPARAMS ::= tkn_id 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Nodo nodo= new Nodo("ARGS",parser.cont);
                parser.cont++;
                nodo.addHijo(new Nodo(id.toString(),parser.cont));
                parser.cont++; 
                RESULT=nodo;              
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARGSPARAMS",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // ARGSPARAMS ::= tkn_id tkn_coma ARGSPARAMS 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Nodo nodo= new Nodo("ARGS",parser.cont);
                parser.cont++;
                nodo.addHijo(new Nodo(id.toString(),parser.cont));
                parser.cont++; 
                nodo.addHijo(a);
                RESULT=nodo;              
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARGSPARAMS",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // ARGS ::= 
            {
              Nodo RESULT =null;
		
            Nodo node = new Nodo("VACIO",parser.cont);
            parser.cont++;
            RESULT = node;
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARGS",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // ARGS ::= ARGSPARAMS 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Nodo nodo = new Nodo("ARGSPARAM",parser.cont);
                parser.cont++;
                nodo.addHijo(a);
                RESULT=nodo;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARGS",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // EXPR ::= error 
            {
              Nodo RESULT =null;
		parser.errores.add("Expresión incorrecta");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPR",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // EXPR ::= tkn_caracter 
            {
              Nodo RESULT =null;
		int carleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int carright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object car = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Nodo nodo = new Nodo(car.toString(),parser.cont);
                parser.cont++;
                RESULT=nodo;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPR",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // EXPR ::= tkn_num 
            {
              Nodo RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object num = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Nodo nodo = new Nodo(num.toString(),parser.cont);
                parser.cont++;
                RESULT=nodo;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPR",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // EXPR ::= tkn_id 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Nodo nodo = new Nodo(id.toString(),parser.cont);
                parser.cont++;
                RESULT=nodo;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPR",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // EXPR ::= tkn_parentesisiz EXPR tkn_parentesisde 
            {
              Nodo RESULT =null;
		
                Nodo nodo = new Nodo("EXPR",parser.cont);
                parser.cont++;
                RESULT=nodo;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPR",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // EXPR ::= EXPR tkn_opmod EXPR 
            {
              Nodo RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo o = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Nodo nodo= new Nodo("expr",parser.cont);
                parser.cont++;
                nodo.addHijo(s);
                nodo.addHijo(new Nodo(id.toString(),parser.cont));
                parser.cont++;                
                nodo.addHijo(o);
                RESULT=nodo;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPR",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // EXPR ::= EXPR tkn_opmulti EXPR 
            {
              Nodo RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo o = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Nodo nodo= new Nodo("expr",parser.cont);
                parser.cont++;
                nodo.addHijo(s);
                nodo.addHijo(new Nodo(id.toString(),parser.cont));
                parser.cont++;                
                nodo.addHijo(o);
                RESULT=nodo;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPR",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // EXPR ::= EXPR tkn_opadicion EXPR 
            {
              Nodo RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo o = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Nodo nodo= new Nodo("expr",parser.cont);
                parser.cont++;
                nodo.addHijo(s);
                nodo.addHijo(new Nodo(id.toString(),parser.cont));
                parser.cont++;                
                nodo.addHijo(o);
                RESULT=nodo;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPR",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // TIPOAPUNT ::= tkn_char tkn_opmulti 
            {
              Nodo RESULT =null;
		
            Nodo nodo = new Nodo("char*",parser.cont);
                parser.cont++;
                RESULT=nodo;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOAPUNT",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // TIPOAPUNT ::= tkn_int tkn_opmulti 
            {
              Nodo RESULT =null;
		
            Nodo nodo = new Nodo("int*",parser.cont);
                parser.cont++;
                RESULT=nodo;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOAPUNT",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // TIPO ::= tkn_void 
            {
              Nodo RESULT =null;
		
            Nodo nodo = new Nodo("void",parser.cont);
                parser.cont++;
                RESULT=nodo;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // TIPO ::= tkn_int 
            {
              Nodo RESULT =null;
		
            Nodo nodo = new Nodo("int",parser.cont);
                parser.cont++;
                RESULT=nodo;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // TIPO ::= TIPOAPUNT 
            {
              Nodo RESULT =null;
		int apleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int apright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo ap = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            Nodo nodo = new Nodo("apun",parser.cont);
                parser.cont++;
                nodo.addHijo(ap);
                RESULT=nodo;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // TIPO ::= tkn_char 
            {
              Nodo RESULT =null;
		
            Nodo nodo = new Nodo("char",parser.cont);
                parser.cont++;
                RESULT=nodo;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // CONDICIONP ::= EXPR tkn_oprel EXPR 
            {
              Nodo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo f = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Nodo nodo= new Nodo("CONDICIONP",parser.cont);
                parser.cont++;
                nodo.addHijo(e);
                nodo.addHijo(new Nodo(id.toString(),parser.cont));
                parser.cont++;                
                nodo.addHijo(f);
                RESULT=nodo;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICIONP",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // CONDICION ::= error tkn_and CONDICION 
            {
              Nodo RESULT =null;
		parser.errores.add("Expresion erronea o ausente en condicion");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // CONDICION ::= error 
            {
              Nodo RESULT =null;
		parser.errores.add("Operador relacional ausente en condicion");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // CONDICION ::= CONDICIONP 
            {
              Nodo RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Nodo nodo= new Nodo("CONDICION",parser.cont);
                parser.cont++;
                nodo.addHijo(c);
                RESULT=nodo;              
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // CONDICION ::= tkn_parentesisiz CONDICIONP tkn_parentesisde 
            {
              Nodo RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                Nodo nodo= new Nodo("CONDICION",parser.cont);
                parser.cont++;
                nodo.addHijo(c);
                RESULT=nodo;              
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // CONDICION ::= tkn_parentesisiz CONDICIONP tkn_parentesisde tkn_or CONDICION 
            {
              Nodo RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo c1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Nodo nodo= new Nodo("CONDICION",parser.cont);
                parser.cont++;
                nodo.addHijo(c);
                nodo.addHijo(new Nodo(id.toString(),parser.cont));
                parser.cont++; 
                nodo.addHijo(c1);
                RESULT=nodo;              
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // CONDICION ::= tkn_parentesisiz CONDICIONP tkn_parentesisde tkn_and CONDICION 
            {
              Nodo RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo c1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Nodo nodo= new Nodo("CONDICION",parser.cont);
                parser.cont++;
                nodo.addHijo(c);
                nodo.addHijo(new Nodo(id.toString(),parser.cont));
                parser.cont++; 
                nodo.addHijo(c1);
                RESULT=nodo;              
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // CONDICION ::= CONDICIONP tkn_or CONDICION 
            {
              Nodo RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo o = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Nodo nodo= new Nodo("CONDICION",parser.cont);
                parser.cont++;
                nodo.addHijo(s);
                nodo.addHijo(new Nodo(id.toString(),parser.cont));
                parser.cont++; 
                nodo.addHijo(o);
                RESULT=nodo;              
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // CONDICION ::= CONDICIONP tkn_and CONDICION 
            {
              Nodo RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo o = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Nodo nodo= new Nodo("CONDICION",parser.cont);
                parser.cont++;
                nodo.addHijo(s);
                nodo.addHijo(new Nodo(id.toString(),parser.cont));
                parser.cont++;                
                nodo.addHijo(o);
                RESULT=nodo;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // ITERADOR ::= tkn_opmulti tkn_oprel EXPR 
            {
              Nodo RESULT =null;
		 
            Nodo nodo = new Nodo("ITERADOR",parser.cont);
            parser.cont++;
            RESULT=nodo;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ITERADOR",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // ITERADOR ::= tkn_opadicion tkn_oprel EXPR 
            {
              Nodo RESULT =null;
		 
            Nodo nodo = new Nodo("ITERADOR",parser.cont);
            parser.cont++;
            RESULT=nodo;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ITERADOR",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // ITERADOR ::= tkn_decrement 
            {
              Nodo RESULT =null;
		 
            Nodo nodo = new Nodo("ITERADOR",parser.cont);
            parser.cont++;
            RESULT=nodo;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ITERADOR",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // ITERADOR ::= tkn_increment 
            {
              Nodo RESULT =null;
		 
            Nodo nodo = new Nodo("ITERADOR",parser.cont);
            parser.cont++;
            RESULT=nodo;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ITERADOR",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // BLOQUE ::= 
            {
              Nodo RESULT =null;
		
                Nodo node = new Nodo("VACIO",parser.cont);
                parser.cont++;
                node.addHijo(new Nodo("VACIO",parser.cont++));
                parser.cont++;
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // BLOQUE ::= CONTADOR BLOQUE 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo i = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Nodo nodo = new Nodo("BLOQUE",parser.cont);
                parser.cont++;
                nodo.addHijo(i);
                nodo.addHijo(s);
                RESULT=nodo;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // BLOQUE ::= PRINTF BLOQUE 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo i = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Nodo nodo = new Nodo("BLOQUE",parser.cont);
                parser.cont++;
                nodo.addHijo(i);
                nodo.addHijo(s);
                RESULT=nodo;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // BLOQUE ::= SCANF BLOQUE 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo i = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Nodo nodo = new Nodo("BLOQUE",parser.cont);
                parser.cont++;
                nodo.addHijo(i);
                nodo.addHijo(s);
                RESULT=nodo;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // BLOQUE ::= ASIGN BLOQUE 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo i = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Nodo nodo = new Nodo("BLOQUE",parser.cont);
                parser.cont++;
                nodo.addHijo(i);
                nodo.addHijo(s);
                RESULT=nodo;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // BLOQUE ::= WHILE BLOQUE 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo i = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Nodo nodo = new Nodo("BLOQUE",parser.cont);
                parser.cont++;
                nodo.addHijo(i);
                nodo.addHijo(s);
                RESULT=nodo;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // BLOQUE ::= FOR BLOQUE 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo i = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Nodo nodo = new Nodo("BLOQUE",parser.cont);
                parser.cont++;
                nodo.addHijo(i);
                nodo.addHijo(s);
                RESULT=nodo;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // BLOQUE ::= IF BLOQUE 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo i = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Nodo nodo = new Nodo("BLOQUE",parser.cont);
                parser.cont++;
                nodo.addHijo(i);
                nodo.addHijo(s);
                RESULT=nodo;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // SCANF ::= tkn_scanf tkn_parentesisiz error tkn_coma tkn_ampersand tkn_id tkn_parentesisde tkn_puntocoma 
            {
              Nodo RESULT =null;
		parser.errores.add("conststr ausente en la funcion scanf");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SCANF",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // SCANF ::= tkn_scanf error tkn_cadena tkn_coma tkn_ampersand tkn_id tkn_parentesisde tkn_puntocoma 
            {
              Nodo RESULT =null;
		parser.errores.add("parentesis de apertura '(' ausente en la funcion scanf");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SCANF",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // SCANF ::= tkn_scanf tkn_parentesisiz tkn_cadena tkn_coma tkn_ampersand tkn_id error tkn_puntocoma 
            {
              Nodo RESULT =null;
		parser.errores.add("parentesis de cierre ')' ausente en la funcion scanf");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SCANF",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // SCANF ::= tkn_scanf tkn_parentesisiz tkn_cadena tkn_coma tkn_ampersand error tkn_parentesisde tkn_puntocoma 
            {
              Nodo RESULT =null;
		parser.errores.add("identificador ausente en la funcion scanf");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SCANF",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // SCANF ::= tkn_scanf tkn_parentesisiz tkn_cadena tkn_coma error tkn_id tkn_parentesisde tkn_puntocoma 
            {
              Nodo RESULT =null;
		parser.errores.add("Puntero a identificador '&' ausente en la funcion scanf");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SCANF",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // SCANF ::= tkn_scanf tkn_parentesisiz tkn_cadena tkn_coma tkn_ampersand tkn_id tkn_parentesisde tkn_puntocoma 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		  parser.gramas.add("Funcion SCANF reconocida");
            Nodo nodo = new Nodo("SCANF",parser.cont);
            parser.cont++;
            nodo.addHijo(new Nodo(id.toString(),parser.cont));
            parser.cont++;
            RESULT=nodo;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SCANF",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // PRINTF ::= tkn_printf tkn_parentesisiz error tkn_coma tkn_id tkn_parentesisde tkn_puntocoma 
            {
              Nodo RESULT =null;
		parser.errores.add("conststr ausente en la funcion printf");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRINTF",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // PRINTF ::= tkn_printf error tkn_cadena tkn_coma tkn_id tkn_parentesisde tkn_puntocoma 
            {
              Nodo RESULT =null;
		parser.errores.add("se esperaba el simbolo '(' en la funcion printf");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRINTF",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // PRINTF ::= tkn_printf tkn_parentesisiz tkn_cadena tkn_coma tkn_id tkn_parentesisde error 
            {
              Nodo RESULT =null;
		parser.errores.add("se esperaba el simbolo ';' en la funcion printf");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRINTF",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // PRINTF ::= tkn_printf tkn_parentesisiz tkn_cadena tkn_coma tkn_id error tkn_puntocoma 
            {
              Nodo RESULT =null;
		parser.errores.add("parentesis de cierre ')' ausente en la funcion printf");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRINTF",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // PRINTF ::= tkn_printf tkn_parentesisiz tkn_cadena tkn_coma error tkn_parentesisde tkn_puntocoma 
            {
              Nodo RESULT =null;
		parser.errores.add("identificador ausente en la funcion printf");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRINTF",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // PRINTF ::= tkn_printf tkn_parentesisiz tkn_cadena error tkn_id tkn_parentesisde tkn_puntocoma 
            {
              Nodo RESULT =null;
		parser.errores.add("coma ',' ausente en la funcion printf");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRINTF",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // PRINTF ::= tkn_printf tkn_parentesisiz tkn_cadena tkn_parentesisde tkn_puntocoma 
            {
              Nodo RESULT =null;
		parser.gramas.add("Funcion PRINTF reconocida");
                Nodo nodo = new Nodo("PRINT F",parser.cont);
                parser.cont++;
                RESULT=nodo;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRINTF",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // PRINTF ::= tkn_printf tkn_parentesisiz tkn_cadena tkn_coma tkn_id tkn_parentesisde tkn_puntocoma 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		parser.gramas.add("Funcion PRINTF reconocida");
                Nodo nodo = new Nodo("PRINT F",parser.cont);
                parser.cont++;
                nodo.addHijo(new Nodo(id.toString(),parser.cont));
                parser.cont++;
                RESULT=nodo;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRINTF",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // WHILE ::= tkn_while error CONDICION tkn_parentesisde tkn_llaveiz BLOQUE tkn_llaveder 
            {
              Nodo RESULT =null;
		parser.errores.add("Se esperaba un '(' en bloque while\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("WHILE",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // WHILE ::= tkn_while tkn_parentesisiz CONDICION error tkn_llaveiz BLOQUE tkn_llaveder 
            {
              Nodo RESULT =null;
		parser.errores.add("Se esperaba un ')' en bloque while\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("WHILE",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // WHILE ::= tkn_while tkn_parentesisiz CONDICION tkn_parentesisde error BLOQUE tkn_llaveder 
            {
              Nodo RESULT =null;
		parser.errores.add("Se esperaba un '{' en bloque while\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("WHILE",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // WHILE ::= tkn_while tkn_parentesisiz CONDICION tkn_parentesisde tkn_llaveiz BLOQUE tkn_llaveder 
            {
              Nodo RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int jleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int jright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo j = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		parser.gramas.add("Funcion WHILE reconocida");
            Nodo nodo = new Nodo("WHILE",parser.cont);
            parser.cont++;
            nodo.addHijo(c);
            nodo.addHijo(j);
            RESULT=nodo;
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("WHILE",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // FOR ::= tkn_for tkn_parentesisiz ASIGNACION EXPR tkn_puntocoma CONDICION tkn_puntocoma tkn_id error tkn_parentesisde tkn_llaveiz BLOQUE tkn_llaveder 
            {
              Nodo RESULT =null;
		parser.errores.add("Iteracion asuente en ciclo for\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FOR",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // FOR ::= tkn_for tkn_parentesisiz error EXPR tkn_puntocoma CONDICION tkn_puntocoma tkn_id ITERADOR tkn_parentesisde tkn_llaveiz BLOQUE tkn_llaveder 
            {
              Nodo RESULT =null;
		parser.errores.add("Asignacion o declaracion incorrecta en bloque for\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FOR",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // FOR ::= tkn_for tkn_parentesisiz ASIGNACION EXPR tkn_puntocoma CONDICION tkn_puntocoma tkn_id ITERADOR error tkn_llaveiz BLOQUE tkn_llaveder 
            {
              Nodo RESULT =null;
		parser.errores.add("Se esperaba un parentesis de cierre ')' for\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FOR",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // FOR ::= tkn_for error ASIGNACION EXPR tkn_puntocoma CONDICION tkn_puntocoma tkn_id ITERADOR tkn_parentesisde tkn_llaveiz BLOQUE tkn_llaveder 
            {
              Nodo RESULT =null;
		parser.errores.add("Se esperaba un parentesis de apertura '(' for\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FOR",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // FOR ::= tkn_for tkn_parentesisiz ASIGNACION EXPR tkn_puntocoma CONDICION tkn_puntocoma tkn_id ITERADOR tkn_parentesisde tkn_llaveiz BLOQUE tkn_llaveder 
            {
              Nodo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int jleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int jright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo j = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		parser.gramas.add("Funcion FOR reconocida");
                Nodo nodo = new Nodo("FOR",parser.cont);
                parser.cont++;
                nodo.addHijo(e);
                nodo.addHijo(c);
                nodo.addHijo(j);
                RESULT=nodo;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FOR",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // ELSE ::= 
            {
              Nodo RESULT =null;
		
            Nodo node = new Nodo("VACIO",parser.cont);
            parser.cont++;
            RESULT = node;
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ELSE",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // ELSE ::= tkn_else error BLOQUE tkn_llaveder 
            {
              Nodo RESULT =null;
		parser.errores.add("Se esperaba el simbolo '{' en else\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ELSE",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // ELSE ::= tkn_else IF 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo i = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		parser.gramas.add("Else if reconocido");
            Nodo nodo = new Nodo("ELSE IF",parser.cont);
            parser.cont++;
            nodo.addHijo(i);
            RESULT=nodo;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ELSE",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // ELSE ::= tkn_else tkn_llaveiz BLOQUE tkn_llaveder 
            {
              Nodo RESULT =null;
		int jleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int jright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo j = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		parser.gramas.add("Else reconocido");
            Nodo nodo = new Nodo("ELSE",parser.cont);
            parser.cont++;
            nodo.addHijo(j);
            RESULT=nodo;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ELSE",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // IF ::= tkn_if tkn_parentesisiz CONDICION error tkn_llaveiz BLOQUE tkn_llaveder ELSE 
            {
              Nodo RESULT =null;
		parser.errores.add("Se esperaba el simbolo ')' en bloque if\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IF",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // IF ::= tkn_if error CONDICION tkn_parentesisde tkn_llaveiz BLOQUE tkn_llaveder ELSE 
            {
              Nodo RESULT =null;
		parser.errores.add("Se esperaba el simbolo '(' en bloque if\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IF",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // IF ::= tkn_if tkn_parentesisiz CONDICION tkn_parentesisde error BLOQUE tkn_llaveder ELSE 
            {
              Nodo RESULT =null;
		parser.errores.add("Llave de apertura '{' ausente en bloque if\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IF",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // IF ::= tkn_if tkn_parentesisiz CONDICION tkn_parentesisde tkn_llaveiz BLOQUE tkn_llaveder ELSE 
            {
              Nodo RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int jleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int jright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo j = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		parser.gramas.add("Funcion if reconocida");
            Nodo nodo = new Nodo("IF",parser.cont);
            parser.cont++;
            nodo.addHijo(c);
            nodo.addHijo(j);
            nodo.addHijo(e);
            RESULT=nodo;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IF",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // TERNARIO ::= tkn_parentesisiz CONDICION tkn_parentesisde tkn_ternario tkn_cadena tkn_dospuntos tkn_cadena 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TERNARIO",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // PARAMS ::= 
            {
              Nodo RESULT =null;
		
            Nodo node = new Nodo("VACIO",parser.cont);
            parser.cont++;
            RESULT = node;
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMS",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // PARAMS ::= TIPO 
            {
              Nodo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo t = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		parser.gramas.add("Params reconocido");
            Nodo nodo = new Nodo("PARAMS",parser.cont);
            parser.cont++;
            nodo.addHijo(t);                
            RESULT=nodo;
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMS",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // PARAMS ::= DECLR 
            {
              Nodo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo t = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		parser.gramas.add("Params reconocido");
            Nodo nodo = new Nodo("PARAMS",parser.cont);
            parser.cont++;
            nodo.addHijo(t);                
            RESULT=nodo;
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMS",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // PARAMS ::= DECLR tkn_coma PARAMS 
            {
              Nodo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo t = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo p = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		parser.gramas.add("Params reconocido");
            Nodo nodo = new Nodo("PARAMS",parser.cont);
            parser.cont++;
            nodo.addHijo(t);               
            nodo.addHijo(p);
            RESULT=nodo;
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMS",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // PARAMS ::= TIPO tkn_coma PARAMS 
            {
              Nodo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo t = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo p = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		parser.gramas.add("Params reconocido");
            Nodo nodo = new Nodo("PARAMS",parser.cont);
            parser.cont++;
            nodo.addHijo(t)     ;           
            nodo.addHijo(p);
            RESULT=nodo;
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMS",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // ASIGN ::= error tkn_puntocoma 
            {
              Nodo RESULT =null;
		parser.errores.add("Declaracion de variable incorrecta \n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGN",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ASIGN ::= DECLASIGN tkn_puntocoma 
            {
              Nodo RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo d = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            Nodo nodo = new Nodo("ASIGNACIONES",parser.cont);
            parser.cont++;
            nodo.addHijo(d);
            RESULT=nodo;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGN",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // DECLASIGN ::= tkn_id tkn_parentesisiz ARGS error 
            {
              Nodo RESULT =null;
		parser.errores.add("Se esperaba un ')' en llamado de la funcion \n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLASIGN",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // DECLASIGN ::= tkn_id tkn_parentesisiz ARGS tkn_parentesisde 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                Nodo nodo= new Nodo("LLAMADO",parser.cont);
                parser.cont++;
                nodo.addHijo(a);
                RESULT=nodo;              
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLASIGN",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // DECLASIGN ::= tkn_id tkn_oprel tkn_id tkn_parentesisiz error tkn_parentesisde 
            {
              Nodo RESULT =null;
		parser.errores.add("Argumentos en llamado de función erroneos \n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLASIGN",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // DECLASIGN ::= DECLR tkn_oprel tkn_id tkn_parentesisiz error tkn_parentesisde 
            {
              Nodo RESULT =null;
		parser.errores.add("Argumentos en llamado de función erroneos \n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLASIGN",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // DECLASIGN ::= tkn_id tkn_oprel tkn_id tkn_parentesisiz ARGS tkn_parentesisde 
            {
              Nodo RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object id1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                Nodo nodo = new Nodo("LLAMADO",parser.cont);
                parser.cont++;
                nodo.addHijo(new Nodo(id1.toString(),parser.cont));
                parser.cont++;
                nodo.addHijo(new Nodo(id.toString(),parser.cont));
                parser.cont++;
                nodo.addHijo(a);
                RESULT=nodo;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLASIGN",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // DECLASIGN ::= DECLR tkn_oprel tkn_id tkn_parentesisiz ARGS tkn_parentesisde 
            {
              Nodo RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Nodo d = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                Nodo nodo= new Nodo("LLAMADO",parser.cont);
                parser.cont++;
                nodo.addHijo(d);
                nodo.addHijo(new Nodo(id.toString(),parser.cont));
                parser.cont++; 
                nodo.addHijo(a);
                RESULT=nodo;              
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLASIGN",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // DECLASIGN ::= DECLR 
            {
              Nodo RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo d = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Nodo nodo = new Nodo("DECLARACION",parser.cont);
                parser.cont++;
                nodo.addHijo(d);
                RESULT=nodo;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLASIGN",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // DECLASIGN ::= tkn_id error EXPR 
            {
              Nodo RESULT =null;
		parser.errores.add("Se esperaba operador relacional en declaración \n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLASIGN",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // DECLASIGN ::= tkn_id tkn_oprel EXPR 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Nodo nodo = new Nodo("ASIGNACION",parser.cont);
                parser.cont++;
                nodo.addHijo(new Nodo(id.toString(),parser.cont));
                parser.cont++;
                nodo.addHijo(e);
                RESULT=nodo;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLASIGN",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // DECLASIGN ::= tkn_id tkn_oprel EXPR tkn_coma DECLASIGN 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Nodo nodo = new Nodo("ASIGNACION",parser.cont);
                parser.cont++;
                nodo.addHijo(new Nodo(id.toString(),parser.cont));
                parser.cont++;
                nodo.addHijo(e);
                nodo.addHijo(s);
                RESULT=nodo;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLASIGN",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // DECLASIGN ::= tkn_id error DECLASIGN 
            {
              Nodo RESULT =null;
		parser.errores.add("Se esperaba el simbolo ',' en declaración o en argumentos en llamado de la función \n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLASIGN",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // DECLASIGN ::= tkn_id tkn_coma DECLASIGN 
            {
              Nodo RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo d = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Nodo nodo = new Nodo("DECLARACION",parser.cont);
                parser.cont++;
                nodo.addHijo(d);
                RESULT=nodo;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLASIGN",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // DECLASIGN ::= DECLR tkn_coma DECLASIGN 
            {
              Nodo RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo d = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Nodo nodo = new Nodo("DECLARACION",parser.cont);
                parser.cont++;
                nodo.addHijo(d);
                nodo.addHijo(e);
                RESULT=nodo;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLASIGN",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // DECLASIGN ::= DECLR tkn_oprel EXPR 
            {
              Nodo RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo d = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Nodo nodo = new Nodo("ASIGNACION",parser.cont);
                parser.cont++;
                nodo.addHijo(d);
                nodo.addHijo(new Nodo(id.toString(),parser.cont));
                parser.cont++;
                nodo.addHijo(e);
                RESULT=nodo;
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLASIGN",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // DECLASIGN ::= DECLR tkn_oprel EXPR tkn_coma DECLASIGN 
            {
              Nodo RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Nodo d = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Nodo nodo = new Nodo("ASIGNACION",parser.cont);
                parser.cont++;
                nodo.addHijo(d);
                nodo.addHijo(new Nodo(id.toString(),parser.cont));
                parser.cont++;
                nodo.addHijo(e);
                nodo.addHijo(a);
                RESULT=nodo;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLASIGN",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // ASIGNACION ::= TIPO error tkn_oprel 
            {
              Nodo RESULT =null;
		parser.errores.add("Se esperaba un identificador en bloque for\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // ASIGNACION ::= tkn_id tkn_oprel 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // ASIGNACION ::= TIPO tkn_id tkn_oprel 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // DECLR ::= error tkn_id 
            {
              Nodo RESULT =null;
		parser.errores.add("Tipo de dato incorrecto\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLR",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // DECLR ::= TIPO tkn_id 
            {
              Nodo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo t = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int kleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int kright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object k = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            Nodo nodo = new Nodo("DECL",parser.cont);
                parser.cont++;
                nodo.addHijo(t);
                nodo.addHijo(new Nodo(k.toString(),parser.cont));
                parser.cont++;
                RESULT=nodo;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLR",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // PROTOFUN ::= DECLR tkn_parentesisiz PARAMS tkn_parentesisde 
            {
              Nodo RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Nodo d = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo p = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                Nodo nodo = new Nodo("PROTOFUN",parser.cont);
                parser.cont++;
                nodo.addHijo(d);
                nodo.addHijo(p);
                RESULT=nodo;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROTOFUN",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // FUNCION ::= PROTOFUN tkn_llaveiz BLOQUE tkn_return EXPR tkn_puntocoma tkn_llaveder 
            {
              Nodo RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Nodo p = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int jleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int jright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Nodo j = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		parser.gramas.add("Una Funcion Reconocida satisfactoriamente");
                Nodo nodo = new Nodo("FUNCION",parser.cont);
                parser.cont++;
                nodo.addHijo(p);
                nodo.addHijo(j);
                nodo.addHijo(e);
                RESULT=nodo;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCION",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // PROTOTIPO ::= PROTOFUN tkn_puntocoma 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo i = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                Nodo nodo = new Nodo("PROTOTIPO",parser.cont);
                parser.cont++;
                nodo.addHijo(i);
                RESULT=nodo;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROTOTIPO",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // FUNCIONES ::= 
            {
              Nodo RESULT =null;
		
                    Nodo node = new Nodo("VACIO",parser.cont);
                    parser.cont++;
                    RESULT = node;
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCIONES",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // FUNCIONES ::= ASIGN FUNCIONES 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo i = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo f = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Nodo nodo = new Nodo("VARGLOBALES",parser.cont);
                parser.cont++;
                nodo.addHijo(i);
                nodo.addHijo(f);
                RESULT=nodo;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCIONES",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // FUNCIONES ::= FUNCION FUNCIONES 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo i = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo f = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Nodo nodo = new Nodo("FUNCION COMPLEJA",parser.cont);
                parser.cont++;
                nodo.addHijo(i);
                nodo.addHijo(f);
                RESULT=nodo;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCIONES",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // FUNCIONES ::= PROTOTIPO FUNCIONES 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo i = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo f = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Nodo nodo = new Nodo("CUERPO",parser.cont);
                parser.cont++;
                nodo.addHijo(i);
                nodo.addHijo(f);
                RESULT=nodo;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCIONES",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= FUNCIONES 
            {
              Nodo RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        Nodo nodo = new Nodo("PROGRAMA",parser.cont);
        parser.cont++;
        nodo.addHijo(b);
        parser.raiz=nodo;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIO",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo start_val = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

