
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Sep 08 22:15:10 CST 2022
//----------------------------------------------------

package Compiladorcito;

import java_cup.runtime.*;
import java.util.ArrayList;
import java.util.*;
import java.io.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Sep 08 22:15:10 CST 2022
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\117\000\002\002\004\000\002\031\015\000\002\050" +
    "\004\000\002\022\010\000\002\043\003\000\002\043\003" +
    "\000\002\043\003\000\002\043\003\000\002\006\005\000" +
    "\002\017\005\000\002\017\006\000\002\017\003\000\002" +
    "\017\002\000\002\033\004\000\002\033\002\000\002\002" +
    "\004\000\002\002\003\000\002\026\003\000\002\026\002" +
    "\000\002\032\003\000\002\032\002\000\002\042\003\000" +
    "\002\042\002\000\002\035\006\000\002\035\005\000\002" +
    "\035\003\000\002\035\004\000\002\027\006\000\002\027" +
    "\004\000\002\025\015\000\002\041\005\000\002\041\003" +
    "\000\002\037\011\000\002\030\010\000\002\030\003\000" +
    "\002\004\012\000\002\012\006\000\002\012\004\000\002" +
    "\012\002\000\002\005\020\000\002\003\011\000\002\007" +
    "\004\000\002\007\004\000\002\007\004\000\002\007\004" +
    "\000\002\007\004\000\002\007\004\000\002\007\004\000" +
    "\002\007\004\000\002\007\004\000\002\007\004\000\002" +
    "\007\002\000\002\010\005\000\002\010\005\000\002\010" +
    "\007\000\002\010\007\000\002\010\005\000\002\010\003" +
    "\000\002\013\005\000\002\016\003\000\002\016\003\000" +
    "\002\016\003\000\002\016\003\000\002\016\003\000\002" +
    "\045\006\000\002\046\005\000\002\046\005\000\002\046" +
    "\005\000\002\046\005\000\002\046\003\000\002\020\011" +
    "\000\002\020\007\000\002\034\003\000\002\034\003\000" +
    "\002\034\003\000\002\051\003\000\002\051\003\000\002" +
    "\051\005\000\002\023\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\276\000\014\012\014\013\011\014\004\036\015\037" +
    "\013\001\002\000\016\022\uffc2\040\uffc2\041\uffc2\043\uffc2" +
    "\044\uffc2\054\uffc2\001\002\000\004\002\ufff1\001\002\000" +
    "\014\012\uffdf\013\uffdf\014\uffdf\036\uffdf\037\uffdf\001\002" +
    "\000\004\002\300\001\002\000\014\012\014\013\011\014" +
    "\004\036\015\037\013\001\002\000\016\022\uffc4\040\uffc4" +
    "\041\uffc4\043\uffc4\044\uffc4\054\uffc4\001\002\000\012\040" +
    "\263\041\ufff5\043\052\054\022\001\002\000\016\022\uffc6" +
    "\040\uffc6\041\uffc6\043\uffc6\044\uffc6\054\uffc6\001\002\000" +
    "\016\022\uffc5\040\uffc5\041\uffc5\043\uffc5\044\uffc5\054\uffc5" +
    "\001\002\000\014\011\016\040\uffc3\041\uffc3\043\uffc3\054" +
    "\uffc3\001\002\000\004\021\017\001\002\000\004\022\020" +
    "\001\002\000\004\023\021\001\002\000\036\012\014\013" +
    "\011\014\004\016\044\017\047\021\040\027\035\030\uffce" +
    "\031\025\036\041\037\013\040\046\043\052\054\022\001" +
    "\002\000\030\004\uffb7\005\uffb7\007\uffb7\010\uffb7\022\uffb7" +
    "\025\uffb7\026\uffb7\035\uffb7\041\uffb7\042\uffb7\044\uffb7\001" +
    "\002\000\040\012\014\013\011\014\004\016\044\017\047" +
    "\021\040\024\uffce\027\035\030\uffce\031\025\036\041\037" +
    "\013\040\046\043\052\054\022\001\002\000\014\022\uffc8" +
    "\025\257\026\256\041\uffc8\042\uffc8\001\002\000\004\021" +
    "\246\001\002\000\040\012\014\013\011\014\004\016\044" +
    "\017\047\021\040\024\uffce\027\035\030\uffce\031\025\036" +
    "\041\037\013\040\046\043\052\054\022\001\002\000\040" +
    "\012\014\013\011\014\004\016\044\017\047\021\040\024" +
    "\uffce\027\035\030\uffce\031\025\036\041\037\013\040\046" +
    "\043\052\054\022\001\002\000\040\012\014\013\011\014" +
    "\004\016\044\017\047\021\040\024\uffce\027\035\030\uffce" +
    "\031\025\036\041\037\013\040\046\043\052\054\022\001" +
    "\002\000\024\004\uffbc\005\uffbc\007\uffbc\010\uffbc\022\uffbc" +
    "\025\uffbc\026\uffbc\041\uffbc\042\uffbc\001\002\000\040\012" +
    "\014\013\011\014\004\016\044\017\047\021\040\024\uffce" +
    "\027\035\030\uffce\031\025\036\041\037\013\040\046\043" +
    "\052\054\022\001\002\000\004\030\213\001\002\000\040" +
    "\012\014\013\011\014\004\016\044\017\047\021\040\024" +
    "\uffce\027\035\030\uffce\031\025\036\041\037\013\040\046" +
    "\043\052\054\022\001\002\000\004\021\174\001\002\000" +
    "\012\004\131\005\127\007\126\010\135\001\002\000\012" +
    "\040\147\041\ufff5\043\052\054\022\001\002\000\012\021" +
    "\124\040\056\043\052\054\022\001\002\000\016\022\uffc3" +
    "\040\uffc3\041\uffc3\043\uffc3\044\uffc3\054\uffc3\001\002\000" +
    "\040\012\014\013\011\014\004\016\044\017\047\021\040" +
    "\024\uffce\027\035\030\uffce\031\025\036\041\037\013\040" +
    "\046\043\052\054\022\001\002\000\040\012\014\013\011" +
    "\014\004\016\044\017\047\021\040\024\uffce\027\035\030" +
    "\uffce\031\025\036\041\037\013\040\046\043\052\054\022" +
    "\001\002\000\004\021\104\001\002\000\040\012\014\013" +
    "\011\014\004\016\044\017\047\021\040\024\uffce\027\035" +
    "\030\uffce\031\025\036\041\037\013\040\046\043\052\054" +
    "\022\001\002\000\016\004\076\005\uffb9\007\uffb9\010\uffb9" +
    "\033\075\034\074\001\002\000\004\021\066\001\002\000" +
    "\040\012\014\013\011\014\004\016\044\017\047\021\040" +
    "\024\uffce\027\035\030\uffce\031\025\036\041\037\013\040" +
    "\046\043\052\054\022\001\002\000\004\042\053\001\002" +
    "\000\030\004\uffb8\005\uffb8\007\uffb8\010\uffb8\022\uffb8\025" +
    "\uffb8\026\uffb8\035\uffb8\041\uffb8\042\uffb8\044\uffb8\001\002" +
    "\000\016\021\040\031\025\040\056\043\052\053\054\054" +
    "\022\001\002\000\006\035\ufffd\041\ufffd\001\002\000\006" +
    "\035\ufffc\041\ufffc\001\002\000\030\004\uffb9\005\uffb9\007" +
    "\uffb9\010\uffb9\022\uffb9\025\uffb9\026\uffb9\035\uffb9\041\uffb9" +
    "\042\uffb9\044\uffb9\001\002\000\006\035\ufffb\041\ufffb\001" +
    "\002\000\016\004\uffbc\005\uffbc\007\uffbc\010\uffbc\035\ufffa" +
    "\041\ufffa\001\002\000\004\035\062\001\002\000\016\021" +
    "\040\031\025\040\056\043\052\053\054\054\022\001\002" +
    "\000\004\041\064\001\002\000\044\012\ufffe\013\ufffe\014" +
    "\ufffe\016\ufffe\017\ufffe\021\ufffe\024\ufffe\027\ufffe\030\ufffe" +
    "\031\ufffe\035\ufffe\036\ufffe\037\ufffe\040\ufffe\041\ufffe\043" +
    "\ufffe\054\ufffe\001\002\000\006\024\uffd7\030\uffd7\001\002" +
    "\000\012\021\040\040\056\043\052\054\022\001\002\000" +
    "\004\022\070\001\002\000\004\023\071\001\002\000\036" +
    "\012\014\013\011\014\004\016\044\017\047\021\040\024" +
    "\uffce\027\035\031\025\036\041\037\013\040\046\043\052" +
    "\054\022\001\002\000\004\024\073\001\002\000\040\012" +
    "\uffd9\013\uffd9\014\uffd9\016\uffd9\017\uffd9\021\uffd9\024\uffd9" +
    "\027\uffd9\030\uffd9\031\uffd9\036\uffd9\037\uffd9\040\uffd9\043" +
    "\uffd9\054\uffd9\001\002\000\006\022\uffb5\041\uffb5\001\002" +
    "\000\006\022\uffb6\041\uffb6\001\002\000\004\010\101\001" +
    "\002\000\004\041\100\001\002\000\040\012\uffb3\013\uffb3" +
    "\014\uffb3\016\uffb3\017\uffb3\021\uffb3\024\uffb3\027\uffb3\030" +
    "\uffb3\031\uffb3\036\uffb3\037\uffb3\040\uffb3\043\uffb3\054\uffb3" +
    "\001\002\000\010\040\056\043\052\054\022\001\002\000" +
    "\006\022\uffb4\041\uffb4\001\002\000\006\024\uffcf\030\uffcf" +
    "\001\002\000\012\021\040\040\056\043\052\054\022\001" +
    "\002\000\004\022\106\001\002\000\004\023\107\001\002" +
    "\000\036\012\014\013\011\014\004\016\044\017\047\021" +
    "\040\024\uffce\027\035\031\025\036\041\037\013\040\046" +
    "\043\052\054\022\001\002\000\004\024\111\001\002\000" +
    "\042\012\uffdb\013\uffdb\014\uffdb\016\uffdb\017\uffdb\020\113" +
    "\021\uffdb\024\uffdb\027\uffdb\030\uffdb\031\uffdb\036\uffdb\037" +
    "\uffdb\040\uffdb\043\uffdb\054\uffdb\001\002\000\040\012\uffde" +
    "\013\uffde\014\uffde\016\uffde\017\uffde\021\uffde\024\uffde\027" +
    "\uffde\030\uffde\031\uffde\036\uffde\037\uffde\040\uffde\043\uffde" +
    "\054\uffde\001\002\000\006\016\044\023\115\001\002\000" +
    "\040\012\uffdc\013\uffdc\014\uffdc\016\uffdc\017\uffdc\021\uffdc" +
    "\024\uffdc\027\uffdc\030\uffdc\031\uffdc\036\uffdc\037\uffdc\040" +
    "\uffdc\043\uffdc\054\uffdc\001\002\000\036\012\014\013\011" +
    "\014\004\016\044\017\047\021\040\024\uffce\027\035\031" +
    "\025\036\041\037\013\040\046\043\052\054\022\001\002" +
    "\000\004\024\117\001\002\000\040\012\uffdd\013\uffdd\014" +
    "\uffdd\016\uffdd\017\uffdd\021\uffdd\024\uffdd\027\uffdd\030\uffdd" +
    "\031\uffdd\036\uffdd\037\uffdd\040\uffdd\043\uffdd\054\uffdd\001" +
    "\002\000\006\024\uffd1\030\uffd1\001\002\000\006\024\uffd2" +
    "\030\uffd2\001\002\000\004\022\137\001\002\000\014\004" +
    "\131\005\127\007\126\010\135\022\130\001\002\000\012" +
    "\021\124\040\056\043\052\054\022\001\002\000\012\004" +
    "\131\005\127\007\126\022\130\001\002\000\012\021\124" +
    "\040\056\043\052\054\022\001\002\000\012\021\124\040" +
    "\056\043\052\054\022\001\002\000\024\004\uffbd\005\uffbd" +
    "\007\uffbd\010\uffbd\022\uffbd\025\uffbd\026\uffbd\041\uffbd\042" +
    "\uffbd\001\002\000\012\021\124\040\056\043\052\054\022" +
    "\001\002\000\024\004\uffc0\005\127\007\126\010\uffc0\022" +
    "\uffc0\025\uffc0\026\uffc0\041\uffc0\042\uffc0\001\002\000\024" +
    "\004\uffbf\005\uffbf\007\uffbf\010\uffbf\022\uffbf\025\uffbf\026" +
    "\uffbf\041\uffbf\042\uffbf\001\002\000\024\004\uffbe\005\uffbe" +
    "\007\uffbe\010\uffbe\022\uffbe\025\uffbe\026\uffbe\041\uffbe\042" +
    "\uffbe\001\002\000\012\021\124\040\056\043\052\054\022" +
    "\001\002\000\022\004\131\005\127\007\126\022\uffc7\025" +
    "\uffc7\026\uffc7\041\uffc7\042\uffc7\001\002\000\014\022\uffc9" +
    "\025\141\026\140\041\uffc9\042\uffc9\001\002\000\012\021" +
    "\040\040\056\043\052\054\022\001\002\000\012\021\040" +
    "\040\056\043\052\054\022\001\002\000\010\022\uffcb\041" +
    "\uffcb\042\uffcb\001\002\000\010\022\uffca\041\uffca\042\uffca" +
    "\001\002\000\012\021\124\040\162\043\052\054\022\001" +
    "\002\000\004\041\157\001\002\000\006\041\ufff6\044\151" +
    "\001\002\000\010\010\150\041\uffb9\044\uffb9\001\002\000" +
    "\012\021\uffff\040\uffff\043\uffff\054\uffff\001\002\000\012" +
    "\040\147\041\ufff5\043\052\054\022\001\002\000\010\040" +
    "\056\043\052\054\022\001\002\000\004\041\ufff8\001\002" +
    "\000\004\044\155\001\002\000\012\040\147\041\ufff5\043" +
    "\052\054\022\001\002\000\004\041\ufff7\001\002\000\040" +
    "\012\ufff9\013\ufff9\014\ufff9\016\ufff9\017\ufff9\021\ufff9\024" +
    "\ufff9\027\ufff9\030\ufff9\031\ufff9\036\ufff9\037\ufff9\040\ufff9" +
    "\043\ufff9\054\ufff9\001\002\000\012\004\131\005\127\007" +
    "\126\041\173\001\002\000\014\004\uffbc\005\uffbc\007\uffbc" +
    "\041\uffbc\044\155\001\002\000\016\004\uffb9\005\uffb9\007" +
    "\uffb9\021\163\041\uffb9\044\uffb9\001\002\000\006\022\uffeb" +
    "\040\165\001\002\000\004\022\uffec\001\002\000\006\022" +
    "\uffe2\044\171\001\002\000\004\022\167\001\002\000\004" +
    "\041\170\001\002\000\040\012\uffe1\013\uffe1\014\uffe1\016" +
    "\uffe1\017\uffe1\021\uffe1\024\uffe1\027\uffe1\030\uffe1\031\uffe1" +
    "\036\uffe1\037\uffe1\040\uffe1\043\uffe1\054\uffe1\001\002\000" +
    "\004\040\165\001\002\000\004\022\uffe3\001\002\000\040" +
    "\012\uffc1\013\uffc1\014\uffc1\016\uffc1\017\uffc1\021\uffc1\024" +
    "\uffc1\027\uffc1\030\uffc1\031\uffc1\036\uffc1\037\uffc1\040\uffc1" +
    "\043\uffc1\054\uffc1\001\002\000\004\036\175\001\002\000" +
    "\004\040\177\001\002\000\010\040\056\043\052\054\022" +
    "\001\002\000\004\010\150\001\002\000\004\041\201\001" +
    "\002\000\012\021\040\040\056\043\052\054\022\001\002" +
    "\000\004\041\203\001\002\000\004\040\204\001\002\000" +
    "\010\004\076\033\075\034\074\001\002\000\004\022\206" +
    "\001\002\000\004\023\207\001\002\000\036\012\014\013" +
    "\011\014\004\016\044\017\047\021\040\024\uffce\027\035" +
    "\031\025\036\041\037\013\040\046\043\052\054\022\001" +
    "\002\000\004\024\211\001\002\000\040\012\uffda\013\uffda" +
    "\014\uffda\016\uffda\017\uffda\021\uffda\024\uffda\027\uffda\030" +
    "\uffda\031\uffda\036\uffda\037\uffda\040\uffda\043\uffda\054\uffda" +
    "\001\002\000\006\024\uffd4\030\uffd4\001\002\000\004\043" +
    "\214\001\002\000\004\041\215\001\002\000\004\024\216" +
    "\001\002\000\016\002\ufff3\012\014\013\011\014\004\036" +
    "\041\037\013\001\002\000\016\002\ufff3\012\014\013\011" +
    "\014\004\036\041\037\013\001\002\000\004\002\000\001" +
    "\002\000\004\040\222\001\002\000\004\021\223\001\002" +
    "\000\016\012\014\013\011\014\004\022\uffef\036\041\037" +
    "\013\001\002\000\004\022\ufff0\001\002\000\004\022\232" +
    "\001\002\000\004\040\227\001\002\000\006\022\uffe5\044" +
    "\230\001\002\000\014\012\014\013\011\014\004\036\041" +
    "\037\013\001\002\000\004\022\uffe6\001\002\000\004\023" +
    "\233\001\002\000\036\012\014\013\011\014\004\016\044" +
    "\017\047\021\040\027\035\030\uffce\031\025\036\041\037" +
    "\013\040\046\043\052\054\022\001\002\000\004\030\235" +
    "\001\002\000\010\040\056\043\052\054\022\001\002\000" +
    "\004\041\237\001\002\000\004\024\240\001\002\000\016" +
    "\002\uffe4\012\uffe4\013\uffe4\014\uffe4\036\uffe4\037\uffe4\001" +
    "\002\000\004\002\ufff4\001\002\000\006\024\uffd6\030\uffd6" +
    "\001\002\000\006\024\uffd5\030\uffd5\001\002\000\006\024" +
    "\uffd3\030\uffd3\001\002\000\006\024\uffd8\030\uffd8\001\002" +
    "\000\004\053\247\001\002\000\006\022\251\044\250\001" +
    "\002\000\004\040\253\001\002\000\004\041\252\001\002" +
    "\000\044\012\uffba\013\uffba\014\uffba\016\uffba\017\uffba\021" +
    "\uffba\024\uffba\027\uffba\030\uffba\031\uffba\035\uffba\036\uffba" +
    "\037\uffba\040\uffba\041\uffba\043\uffba\054\uffba\001\002\000" +
    "\004\022\254\001\002\000\004\041\255\001\002\000\044" +
    "\012\uffbb\013\uffbb\014\uffbb\016\uffbb\017\uffbb\021\uffbb\024" +
    "\uffbb\027\uffbb\030\uffbb\031\uffbb\035\uffbb\036\uffbb\037\uffbb" +
    "\040\uffbb\041\uffbb\043\uffbb\054\uffbb\001\002\000\012\021" +
    "\040\040\056\043\052\054\022\001\002\000\012\021\040" +
    "\040\056\043\052\054\022\001\002\000\010\022\uffcd\041" +
    "\uffcd\042\uffcd\001\002\000\010\022\uffcc\041\uffcc\042\uffcc" +
    "\001\002\000\006\024\uffd0\030\uffd0\001\002\000\012\010" +
    "\150\021\264\041\uffb9\044\uffb9\001\002\000\016\012\014" +
    "\013\011\014\004\022\uffed\036\041\037\013\001\002\000" +
    "\004\022\275\001\002\000\004\022\uffee\001\002\000\010" +
    "\022\uffe8\040\271\044\270\001\002\000\014\012\014\013" +
    "\011\014\004\036\041\037\013\001\002\000\006\022\uffe7" +
    "\044\272\001\002\000\014\012\014\013\011\014\004\036" +
    "\041\037\013\001\002\000\004\022\uffea\001\002\000\004" +
    "\022\uffe9\001\002\000\004\041\276\001\002\000\014\012" +
    "\uffe0\013\uffe0\014\uffe0\036\uffe0\037\uffe0\001\002\000\004" +
    "\002\ufff2\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\276\000\014\002\006\006\005\016\011\030\007\031" +
    "\004\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\002\276\006\005\016" +
    "\011\030\007\031\004\001\001\000\002\001\001\000\010" +
    "\017\144\034\145\050\151\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\042\003\025\004\031\005" +
    "\047\006\027\007\032\010\050\013\023\016\036\020\033" +
    "\022\044\023\022\024\026\034\030\037\042\045\041\046" +
    "\035\001\001\000\002\001\001\000\042\003\025\004\031" +
    "\005\047\006\027\007\261\010\050\013\023\016\036\020" +
    "\033\022\044\023\022\024\026\034\030\037\042\045\041" +
    "\046\035\001\001\000\002\001\001\000\002\001\001\000" +
    "\042\003\025\004\031\005\047\006\027\007\244\010\050" +
    "\013\023\016\036\020\033\022\044\023\022\024\026\034" +
    "\030\037\042\045\041\046\035\001\001\000\042\003\025" +
    "\004\031\005\047\006\027\007\243\010\050\013\023\016" +
    "\036\020\033\022\044\023\022\024\026\034\030\037\042" +
    "\045\041\046\035\001\001\000\042\003\025\004\031\005" +
    "\047\006\027\007\242\010\050\013\023\016\036\020\033" +
    "\022\044\023\022\024\026\034\030\037\042\045\041\046" +
    "\035\001\001\000\002\001\001\000\042\003\025\004\031" +
    "\005\047\006\027\007\241\010\050\013\023\016\036\020" +
    "\033\022\044\023\022\024\026\034\030\037\042\045\041" +
    "\046\035\001\001\000\002\001\001\000\042\003\025\004" +
    "\031\005\047\006\027\007\211\010\050\013\023\016\036" +
    "\020\033\022\044\023\022\024\026\034\030\037\042\045" +
    "\041\046\035\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\017\144\034\145\050\143\001\001\000\010\013" +
    "\121\034\030\046\122\001\001\000\002\001\001\000\042" +
    "\003\025\004\031\005\047\006\027\007\120\010\050\013" +
    "\023\016\036\020\033\022\044\023\022\024\026\034\030" +
    "\037\042\045\041\046\035\001\001\000\042\003\025\004" +
    "\031\005\047\006\027\007\117\010\050\013\023\016\036" +
    "\020\033\022\044\023\022\024\026\034\030\037\042\045" +
    "\041\046\035\001\001\000\002\001\001\000\042\003\025" +
    "\004\031\005\047\006\027\007\102\010\050\013\023\016" +
    "\036\020\033\022\044\023\022\024\026\034\030\037\042" +
    "\045\041\046\035\001\001\000\004\051\076\001\001\000" +
    "\002\001\001\000\042\003\025\004\031\005\047\006\027" +
    "\007\064\010\050\013\023\016\036\020\033\022\044\023" +
    "\022\024\026\034\030\037\042\045\041\046\035\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\010\050\013" +
    "\023\020\054\022\056\034\057\043\060\046\035\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\010\050\013\023\020\054\022\056\034\057\043\062\046" +
    "\035\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\010\066\013\023\034\030\046\035\001" +
    "\001\000\002\001\001\000\002\001\001\000\042\003\025" +
    "\004\031\005\047\006\027\007\071\010\050\013\023\016" +
    "\036\020\033\022\044\023\022\024\026\034\030\037\042" +
    "\045\041\046\035\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\034\101\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\010\104" +
    "\013\023\034\030\046\035\001\001\000\002\001\001\000" +
    "\002\001\001\000\042\003\025\004\031\005\047\006\027" +
    "\007\107\010\050\013\023\016\036\020\033\022\044\023" +
    "\022\024\026\034\030\037\042\045\041\046\035\001\001" +
    "\000\002\001\001\000\004\012\111\001\001\000\002\001" +
    "\001\000\004\004\113\001\001\000\002\001\001\000\042" +
    "\003\025\004\031\005\047\006\027\007\115\010\050\013" +
    "\023\016\036\020\033\022\044\023\022\024\026\034\030" +
    "\037\042\045\041\046\035\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\034\030\046\124\001" +
    "\001\000\002\001\001\000\006\034\030\046\133\001\001" +
    "\000\006\034\030\046\132\001\001\000\002\001\001\000" +
    "\006\034\030\046\131\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\034\030\046\135\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\010\142" +
    "\013\023\034\030\046\035\001\001\000\012\010\141\013" +
    "\023\034\030\046\035\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\034\160\046\157\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\017\152\034\145\050\151\001\001\000\004\034" +
    "\153\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\017\155\034\145\050\151\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\041\163\042\165\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\041\171\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\050\175" +
    "\001\001\000\004\034\177\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\010\201\013\023\034\030\046\035" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\051" +
    "\204\001\001\000\002\001\001\000\002\001\001\000\042" +
    "\003\025\004\031\005\047\006\027\007\207\010\050\013" +
    "\023\016\036\020\033\022\044\023\022\024\026\034\030" +
    "\037\042\045\041\046\035\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\016\220\025\216\033" +
    "\217\001\001\000\010\016\220\025\216\033\240\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\016\225\026\224\027\223\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\016\225\027\230\001\001\000\002\001\001\000\002" +
    "\001\001\000\042\003\025\004\031\005\047\006\027\007" +
    "\233\010\050\013\023\016\036\020\033\022\044\023\022" +
    "\024\026\034\030\037\042\045\041\046\035\001\001\000" +
    "\002\001\001\000\004\034\235\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\010\260\013" +
    "\023\034\030\046\035\001\001\000\012\010\257\013\023" +
    "\034\030\046\035\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\016\266" +
    "\032\264\035\265\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\016\266\035\273\001\001" +
    "\000\002\001\001\000\006\016\266\035\272\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



     ArrayList gramas = new ArrayList();
    public int cont = 0;
    public int maximo(){
    int a=5;
    return a;
}
    ArrayList errores=new ArrayList();
    public Symbol s;
    @Override
    public void syntax_error (Symbol s){
        if(s.left==-1){
        }else{
                errores.add("Syntax error en la línea: " + (s.left) + " , columna: " +(s.right)+ " con el símbolo = "+(s.value));
    }
}
    @Override
    public void unrecovered_syntax_error(Symbol s){
    if(s.left==-1){
    }else{
        errores.add("Error desconocido, por favor revise la linea: " + (s.left ) + " y columna:  " + (s.right )+ "Con simbolo: "+s.value);
    }    
    }
    public Symbol getS(){
        return this.s;
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // CONTADOR ::= tkn_id ITERADOR tkn_puntocoma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTADOR",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // ITERADOR ::= tkn_opadicion tkn_oprel RETURN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ITERADOR",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // ITERADOR ::= tkn_decrement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ITERADOR",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // ITERADOR ::= tkn_increment 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ITERADOR",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // RETURN ::= tkn_caracter 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("RETURN",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // RETURN ::= tkn_num 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("RETURN",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // RETURN ::= tkn_id 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("RETURN",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // PRINTF ::= tkn_printf tkn_parentesisiz tkn_cadena tkn_parentesisde tkn_puntocoma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRINTF",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // PRINTF ::= tkn_printf tkn_parentesisiz tkn_cadena tkn_coma tkn_id tkn_parentesisde tkn_puntocoma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRINTF",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // EXPR ::= RETURN 
            {
              Object RESULT =null;
		System.out.println("DENTRO DE expr");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPR",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // EXPR ::= tkn_parentesisiz EXPR tkn_parentesisde 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPR",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // EXPR ::= EXPR tkn_opmod EXPR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPR",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // EXPR ::= EXPR tkn_opmulti EXPR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPR",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // EXPR ::= EXPR tkn_opadicion EXPR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPR",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // EXPRFIN ::= TIPO ASIGN EXPR tkn_puntocoma 
            {
              Object RESULT =null;
		System.out.println("DENTRO DE exprfins");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRFIN",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // TIPO ::= tkn_void 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // TIPO ::= tkn_int 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // TIPO ::= tkn_charp 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // TIPO ::= tkn_intp 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // TIPO ::= tkn_char 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // CONDICIONP ::= EXPR tkn_oprel EXPR 
            {
              Object RESULT =null;
		System.out.println("DENTRO DE condicionp");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICIONP",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // CONDICION ::= CONDICIONP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICION",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // CONDICION ::= tkn_parentesisiz CONDICIONP tkn_parentesisde 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICION",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // CONDICION ::= tkn_parentesisiz CONDICIONP tkn_parentesisde tkn_or CONDICION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICION",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // CONDICION ::= tkn_parentesisiz CONDICIONP tkn_parentesisde tkn_and CONDICION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICION",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // CONDICION ::= CONDICIONP tkn_or CONDICION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICION",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // CONDICION ::= CONDICIONP tkn_and CONDICION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICION",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // BLOQUE ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // BLOQUE ::= TERNARIO BLOQUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // BLOQUE ::= CONTADOR BLOQUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // BLOQUE ::= LLAMADO BLOQUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // BLOQUE ::= EXPRFIN BLOQUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // BLOQUE ::= SCANF BLOQUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // BLOQUE ::= PRINTF BLOQUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // BLOQUE ::= DECLARACION BLOQUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // BLOQUE ::= IF BLOQUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // BLOQUE ::= FOR BLOQUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // BLOQUE ::= WHILE BLOQUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // WHILE ::= tkn_while tkn_parentesisiz CONDICION tkn_parentesisde tkn_llaveiz BLOQUE tkn_llaveder 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("WHILE",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // FOR ::= tkn_for tkn_parentesisiz tkn_int ASIGN RETURN tkn_puntocoma CONDICION tkn_puntocoma tkn_id ITERADOR tkn_parentesisde tkn_llaveiz BLOQUE tkn_llaveder 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FOR",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // ELSE ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ELSE",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // ELSE ::= tkn_else IF 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ELSE",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // ELSE ::= tkn_else tkn_llaveiz BLOQUE tkn_llaveder 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ELSE",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // IF ::= tkn_if tkn_parentesisiz CONDICION tkn_parentesisde tkn_llaveiz BLOQUE tkn_llaveder ELSE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IF",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // PROTOTIPO ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROTOTIPO",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // PROTOTIPO ::= TIPO tkn_id tkn_parentesisiz PROTOPARAMS tkn_parentesisde tkn_puntocoma 
            {
              Object RESULT =null;
		System.out.println("DENTRO DE UN PROTOTIPO");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROTOTIPO",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // LLAMADO ::= TIPO ASIGN tkn_id tkn_parentesisiz ARGS tkn_parentesisde tkn_puntocoma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LLAMADO",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ARGSPARAMS ::= tkn_id 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARGSPARAMS",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // ARGSPARAMS ::= tkn_id tkn_coma ARGSPARAMS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARGSPARAMS",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // FUNCION ::= TIPO tkn_id tkn_parentesisiz FUNCIONPARAMS tkn_parentesisde tkn_llaveiz BLOQUE tkn_return RETURN tkn_puntocoma tkn_llaveder 
            {
              Object RESULT =null;
		System.out.println("DENTRO DE UNA FUNCION");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCION",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // DECLAPARAM ::= TIPO tkn_id 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLAPARAM",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // DECLAPARAM ::= TIPO tkn_id tkn_coma DECLAPARAM 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLAPARAM",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // PARAMS ::= TIPO tkn_id 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMS",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // PARAMS ::= TIPO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMS",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // PARAMS ::= TIPO tkn_coma PARAMS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMS",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // PARAMS ::= TIPO tkn_id tkn_coma PARAMS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMS",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // ARGS ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARGS",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // ARGS ::= ARGSPARAMS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARGS",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // PROTOPARAMS ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROTOPARAMS",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // PROTOPARAMS ::= PARAMS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROTOPARAMS",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // FUNCIONPARAMS ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCIONPARAMS",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // FUNCIONPARAMS ::= DECLAPARAM 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCIONPARAMS",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // INICIO ::= MAIN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // INICIO ::= PROTOTIPO INICIO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // FUNCIONES ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCIONES",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // FUNCIONES ::= FUNCION FUNCIONES 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCIONES",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // IDINT ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IDINT",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // IDINT ::= RETURN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IDINT",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // IDINT ::= ASIGN RETURN tkn_coma IDINT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IDINT",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // IDINT ::= RETURN tkn_coma IDINT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IDINT",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // DECLARACION ::= TIPO IDINT tkn_puntocoma 
            {
              Object RESULT =null;
		System.out.println("DENTRO DE UNA DECLARACION");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // EXPRTERNARIO ::= RETURN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRTERNARIO",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // EXPRTERNARIO ::= TERNARIO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRTERNARIO",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // EXPRTERNARIO ::= PRINTF 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRTERNARIO",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // EXPRTERNARIO ::= tkn_cadena 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRTERNARIO",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // TERNARIO ::= CONDICION tkn_ternario EXPRTERNARIO tkn_dospuntos EXPRTERNARIO tkn_puntocoma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TERNARIO",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // ASIGN ::= tkn_id tkn_oprel 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGN",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // MAIN ::= tkn_int tkn_main tkn_parentesisiz tkn_parentesisde tkn_llaveiz BLOQUE tkn_return tkn_num tkn_puntocoma tkn_llaveder FUNCIONES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("MAIN",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

