
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Sep 15 11:52:54 CST 2022
//----------------------------------------------------

package Compiladorcito;

import java_cup.runtime.*;
import java.util.ArrayList;
import java.util.*;
import java.io.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Sep 15 11:52:54 CST 2022
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\110\000\002\002\004\000\002\036\003\000\002\044" +
    "\004\000\002\044\004\000\002\044\004\000\002\020\004" +
    "\000\002\015\011\000\002\015\014\000\002\050\006\000" +
    "\002\047\004\000\002\034\005\000\002\034\004\000\002" +
    "\035\007\000\002\035\005\000\002\035\005\000\002\035" +
    "\005\000\002\035\007\000\002\035\005\000\002\035\003" +
    "\000\002\035\010\000\002\035\010\000\002\032\004\000" +
    "\002\023\005\000\002\023\005\000\002\023\003\000\002" +
    "\023\003\000\002\023\002\000\002\003\012\000\002\006" +
    "\006\000\002\006\004\000\002\006\002\000\002\004\017" +
    "\000\002\002\011\000\002\042\011\000\002\042\007\000" +
    "\002\014\012\000\002\040\004\000\002\040\004\000\002" +
    "\040\004\000\002\040\004\000\002\040\004\000\002\040" +
    "\004\000\002\040\004\000\002\040\002\000\002\033\003" +
    "\000\002\033\003\000\002\033\005\000\002\033\005\000" +
    "\002\005\005\000\002\005\005\000\002\005\007\000\002" +
    "\005\007\000\002\005\005\000\002\005\003\000\002\007" +
    "\005\000\002\010\003\000\002\010\003\000\002\010\003" +
    "\000\002\010\003\000\002\010\003\000\002\031\005\000" +
    "\002\031\005\000\002\031\005\000\002\031\005\000\002" +
    "\031\003\000\002\031\003\000\002\031\003\000\002\026" +
    "\003\000\002\026\002\000\002\025\005\000\002\025\003" +
    "\000\002\013\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\265\000\016\012\021\013\013\014\004\035\022\036" +
    "\017\037\007\001\002\000\010\021\uffc6\037\uffc6\043\uffc6" +
    "\001\002\000\004\002\000\001\002\000\004\040\267\001" +
    "\002\000\006\010\126\043\121\001\002\000\004\002\266" +
    "\001\002\000\016\012\021\013\013\014\004\035\022\036" +
    "\017\037\007\001\002\000\016\012\021\013\013\014\004" +
    "\035\022\036\017\037\007\001\002\000\010\021\uffc8\037" +
    "\uffc8\043\uffc8\001\002\000\006\022\256\040\255\001\002" +
    "\000\012\010\207\020\244\040\uffef\043\206\001\002\000" +
    "\004\037\243\001\002\000\010\021\uffca\037\uffca\043\uffca" +
    "\001\002\000\016\012\021\013\013\014\004\035\022\036" +
    "\017\037\007\001\002\000\010\021\uffc9\037\uffc9\043\uffc9" +
    "\001\002\000\006\011\023\037\uffc7\001\002\000\004\020" +
    "\024\001\002\000\004\021\025\001\002\000\004\022\026" +
    "\001\002\000\032\012\021\013\013\014\004\015\042\016" +
    "\044\026\040\027\uffd6\030\030\031\046\035\041\036\017" +
    "\037\043\001\002\000\034\012\021\013\013\014\004\015" +
    "\042\016\044\023\uffd6\026\040\027\uffd6\030\030\031\046" +
    "\035\041\036\017\037\043\001\002\000\004\020\231\001" +
    "\002\000\034\012\021\013\013\014\004\015\042\016\044" +
    "\023\uffd6\026\040\027\uffd6\030\030\031\046\035\041\036" +
    "\017\037\043\001\002\000\034\012\021\013\013\014\004" +
    "\015\042\016\044\023\uffd6\026\040\027\uffd6\030\030\031" +
    "\046\035\041\036\017\037\043\001\002\000\004\027\223" +
    "\001\002\000\034\012\021\013\013\014\004\015\042\016" +
    "\044\023\uffd6\026\040\027\uffd6\030\030\031\046\035\041" +
    "\036\017\037\043\001\002\000\034\012\021\013\013\014" +
    "\004\015\042\016\044\023\uffd6\026\040\027\uffd6\030\030" +
    "\031\046\035\041\036\017\037\043\001\002\000\034\012" +
    "\021\013\013\014\004\015\042\016\044\023\uffd6\026\040" +
    "\027\uffd6\030\030\031\046\035\041\036\017\037\043\001" +
    "\002\000\010\010\207\040\uffef\043\206\001\002\000\004" +
    "\020\165\001\002\000\010\021\uffc7\037\uffc7\043\uffc7\001" +
    "\002\000\004\020\151\001\002\000\016\004\125\005\123" +
    "\010\126\032\124\033\122\043\121\001\002\000\004\020" +
    "\057\001\002\000\034\012\021\013\013\014\004\015\042" +
    "\016\044\023\uffd6\026\040\027\uffd6\030\030\031\046\035" +
    "\041\036\017\037\043\001\002\000\004\020\047\001\002" +
    "\000\004\045\050\001\002\000\004\043\051\001\002\000" +
    "\004\044\052\001\002\000\004\037\053\001\002\000\004" +
    "\021\054\001\002\000\004\040\055\001\002\000\034\012" +
    "\uffde\013\uffde\014\uffde\015\uffde\016\uffde\023\uffde\026\uffde" +
    "\027\uffde\030\uffde\031\uffde\035\uffde\036\uffde\037\uffde\001" +
    "\002\000\006\023\uffdc\027\uffdc\001\002\000\012\020\065" +
    "\037\064\042\066\046\061\001\002\000\012\021\uffcc\024" +
    "\116\025\115\040\uffcc\001\002\000\024\004\uffbf\005\uffbf" +
    "\007\uffbf\010\uffbf\021\uffbf\024\uffbf\025\uffbf\040\uffbf\043" +
    "\uffbf\001\002\000\004\021\111\001\002\000\012\004\076" +
    "\005\074\007\073\010\102\001\002\000\024\004\uffc1\005" +
    "\uffc1\007\uffc1\010\uffc1\021\uffc1\024\uffc1\025\uffc1\040\uffc1" +
    "\043\uffc1\001\002\000\012\020\071\037\064\042\066\046" +
    "\061\001\002\000\024\004\uffc0\005\uffc0\007\uffc0\010\uffc0" +
    "\021\uffc0\024\uffc0\025\uffc0\040\uffc0\043\uffc0\001\002\000" +
    "\004\021\104\001\002\000\014\004\076\005\074\007\073" +
    "\010\102\021\075\001\002\000\012\020\071\037\064\042" +
    "\066\046\061\001\002\000\012\004\076\005\074\007\073" +
    "\021\075\001\002\000\012\020\071\037\064\042\066\046" +
    "\061\001\002\000\012\020\071\037\064\042\066\046\061" +
    "\001\002\000\024\004\uffc2\005\uffc2\007\uffc2\010\uffc2\021" +
    "\uffc2\024\uffc2\025\uffc2\040\uffc2\043\uffc2\001\002\000\012" +
    "\020\071\037\064\042\066\046\061\001\002\000\024\004" +
    "\uffc5\005\074\007\073\010\uffc5\021\uffc5\024\uffc5\025\uffc5" +
    "\040\uffc5\043\uffc5\001\002\000\024\004\uffc4\005\uffc4\007" +
    "\uffc4\010\uffc4\021\uffc4\024\uffc4\025\uffc4\040\uffc4\043\uffc4" +
    "\001\002\000\024\004\uffc3\005\uffc3\007\uffc3\010\uffc3\021" +
    "\uffc3\024\uffc3\025\uffc3\040\uffc3\043\uffc3\001\002\000\012" +
    "\020\071\037\064\042\066\046\061\001\002\000\020\004" +
    "\076\005\074\007\073\021\uffcb\024\uffcb\025\uffcb\040\uffcb" +
    "\001\002\000\012\021\uffcd\024\106\025\105\040\uffcd\001" +
    "\002\000\012\020\065\037\064\042\066\046\061\001\002" +
    "\000\012\020\065\037\064\042\066\046\061\001\002\000" +
    "\006\021\uffcf\040\uffcf\001\002\000\006\021\uffce\040\uffce" +
    "\001\002\000\004\022\112\001\002\000\032\012\021\013" +
    "\013\014\004\015\042\016\044\023\uffd6\026\040\030\030" +
    "\031\046\035\041\036\017\037\043\001\002\000\004\023" +
    "\114\001\002\000\034\012\uffe1\013\uffe1\014\uffe1\015\uffe1" +
    "\016\uffe1\023\uffe1\026\uffe1\027\uffe1\030\uffe1\031\uffe1\035" +
    "\uffe1\036\uffe1\037\uffe1\001\002\000\012\020\065\037\064" +
    "\042\066\046\061\001\002\000\012\020\065\037\064\042" +
    "\066\046\061\001\002\000\006\021\uffd1\040\uffd1\001\002" +
    "\000\006\021\uffd0\040\uffd0\001\002\000\016\012\021\013" +
    "\013\014\004\035\041\036\017\037\007\001\002\000\006" +
    "\021\uffd4\040\uffd4\001\002\000\004\010\146\001\002\000" +
    "\006\021\uffd5\040\uffd5\001\002\000\004\010\144\001\002" +
    "\000\012\020\071\037\132\042\066\046\061\001\002\000" +
    "\004\040\130\001\002\000\034\012\uffba\013\uffba\014\uffba" +
    "\015\uffba\016\uffba\023\uffba\026\uffba\027\uffba\030\uffba\031" +
    "\uffba\035\uffba\036\uffba\037\uffba\001\002\000\014\004\076" +
    "\005\074\007\073\040\ufff0\043\142\001\002\000\016\004" +
    "\uffc1\005\uffc1\007\uffc1\020\133\040\uffc1\043\uffc1\001\002" +
    "\000\006\021\uffbd\037\135\001\002\000\004\021\uffbe\001" +
    "\002\000\006\021\uffbb\043\140\001\002\000\004\021\137" +
    "\001\002\000\004\040\uffed\001\002\000\004\037\135\001" +
    "\002\000\004\021\uffbc\001\002\000\016\012\021\013\013" +
    "\014\004\035\041\036\017\037\007\001\002\000\004\040" +
    "\ufff1\001\002\000\012\020\071\037\064\042\066\046\061" +
    "\001\002\000\014\004\076\005\074\007\073\021\uffd3\040" +
    "\uffd3\001\002\000\012\020\071\037\064\042\066\046\061" +
    "\001\002\000\014\004\076\005\074\007\073\021\uffd2\040" +
    "\uffd2\001\002\000\004\040\ufff2\001\002\000\012\020\065" +
    "\037\064\042\066\046\061\001\002\000\004\021\153\001" +
    "\002\000\004\022\154\001\002\000\032\012\021\013\013" +
    "\014\004\015\042\016\044\023\uffd6\026\040\030\030\031" +
    "\046\035\041\036\017\037\043\001\002\000\004\023\156" +
    "\001\002\000\036\012\uffe3\013\uffe3\014\uffe3\015\uffe3\016" +
    "\uffe3\017\160\023\uffe3\026\uffe3\027\uffe3\030\uffe3\031\uffe3" +
    "\035\uffe3\036\uffe3\037\uffe3\001\002\000\034\012\uffe6\013" +
    "\uffe6\014\uffe6\015\uffe6\016\uffe6\023\uffe6\026\uffe6\027\uffe6" +
    "\030\uffe6\031\uffe6\035\uffe6\036\uffe6\037\uffe6\001\002\000" +
    "\006\015\042\022\162\001\002\000\034\012\uffe4\013\uffe4" +
    "\014\uffe4\015\uffe4\016\uffe4\023\uffe4\026\uffe4\027\uffe4\030" +
    "\uffe4\031\uffe4\035\uffe4\036\uffe4\037\uffe4\001\002\000\032" +
    "\012\021\013\013\014\004\015\042\016\044\023\uffd6\026" +
    "\040\030\030\031\046\035\041\036\017\037\043\001\002" +
    "\000\004\023\164\001\002\000\034\012\uffe5\013\uffe5\014" +
    "\uffe5\015\uffe5\016\uffe5\023\uffe5\026\uffe5\027\uffe5\030\uffe5" +
    "\031\uffe5\035\uffe5\036\uffe5\037\uffe5\001\002\000\016\012" +
    "\021\013\013\014\004\035\041\036\017\037\167\001\002" +
    "\000\012\020\071\037\064\042\066\046\061\001\002\000" +
    "\004\010\173\001\002\000\004\037\171\001\002\000\004" +
    "\010\172\001\002\000\012\020\ufff7\037\ufff7\042\ufff7\046" +
    "\ufff7\001\002\000\012\020\ufff6\037\ufff6\042\ufff6\046\ufff6" +
    "\001\002\000\012\004\076\005\074\007\073\040\175\001" +
    "\002\000\012\020\065\037\064\042\066\046\061\001\002" +
    "\000\004\040\177\001\002\000\004\037\200\001\002\000" +
    "\012\004\125\005\123\032\124\033\122\001\002\000\004" +
    "\021\202\001\002\000\004\022\203\001\002\000\032\012" +
    "\021\013\013\014\004\015\042\016\044\023\uffd6\026\040" +
    "\030\030\031\046\035\041\036\017\037\043\001\002\000" +
    "\004\023\205\001\002\000\034\012\uffe2\013\uffe2\014\uffe2" +
    "\015\uffe2\016\uffe2\023\uffe2\026\uffe2\027\uffe2\030\uffe2\031" +
    "\uffe2\035\uffe2\036\uffe2\037\uffe2\001\002\000\016\012\021" +
    "\013\013\014\004\035\041\036\017\037\007\001\002\000" +
    "\012\020\071\037\211\042\066\046\061\001\002\000\014" +
    "\004\076\005\074\007\073\040\ufff4\043\215\001\002\000" +
    "\016\004\uffc1\005\uffc1\007\uffc1\020\212\040\uffc1\043\uffc1" +
    "\001\002\000\006\021\uffbd\037\135\001\002\000\004\021" +
    "\214\001\002\000\004\040\uffee\001\002\000\016\012\021" +
    "\013\013\014\004\035\041\036\017\037\007\001\002\000" +
    "\004\040\ufff5\001\002\000\004\040\ufff3\001\002\000\006" +
    "\023\uffd8\027\uffd8\001\002\000\006\023\uffda\027\uffda\001" +
    "\002\000\006\023\uffdd\027\uffdd\001\002\000\012\020\071" +
    "\037\064\042\066\046\061\001\002\000\012\004\076\005" +
    "\074\007\073\040\225\001\002\000\004\023\226\001\002" +
    "\000\016\012\ufffa\013\ufffa\014\ufffa\035\ufffa\036\ufffa\037" +
    "\ufffa\001\002\000\006\023\uffd9\027\uffd9\001\002\000\006" +
    "\023\uffdb\027\uffdb\001\002\000\004\045\232\001\002\000" +
    "\006\021\234\043\233\001\002\000\004\037\236\001\002" +
    "\000\004\040\235\001\002\000\034\012\uffdf\013\uffdf\014" +
    "\uffdf\015\uffdf\016\uffdf\023\uffdf\026\uffdf\027\uffdf\030\uffdf" +
    "\031\uffdf\035\uffdf\036\uffdf\037\uffdf\001\002\000\004\021" +
    "\237\001\002\000\004\040\240\001\002\000\034\012\uffe0" +
    "\013\uffe0\014\uffe0\015\uffe0\016\uffe0\023\uffe0\026\uffe0\027" +
    "\uffe0\030\uffe0\031\uffe0\035\uffe0\036\uffe0\037\uffe0\001\002" +
    "\000\006\023\uffd7\027\uffd7\001\002\000\004\002\ufffe\001" +
    "\002\000\014\010\ufff8\020\ufff8\021\ufff8\040\ufff8\043\ufff8" +
    "\001\002\000\016\012\021\013\013\014\004\021\uffe7\035" +
    "\041\036\017\001\002\000\006\021\uffe9\043\253\001\002" +
    "\000\004\021\252\001\002\000\010\021\uffe8\037\243\043" +
    "\250\001\002\000\016\012\021\013\013\014\004\021\uffe7" +
    "\035\041\036\017\001\002\000\004\021\uffeb\001\002\000" +
    "\006\022\ufff9\040\ufff9\001\002\000\016\012\021\013\013" +
    "\014\004\021\uffe7\035\041\036\017\001\002\000\004\021" +
    "\uffea\001\002\000\016\012\ufffc\013\ufffc\014\ufffc\035\ufffc" +
    "\036\ufffc\037\ufffc\001\002\000\032\012\021\013\013\014" +
    "\004\015\042\016\044\026\040\027\uffd6\030\030\031\046" +
    "\035\041\036\017\037\043\001\002\000\004\027\260\001" +
    "\002\000\012\020\071\037\064\042\066\046\061\001\002" +
    "\000\012\004\076\005\074\007\073\040\262\001\002\000" +
    "\004\023\263\001\002\000\016\012\ufffb\013\ufffb\014\ufffb" +
    "\035\ufffb\036\ufffb\037\ufffb\001\002\000\004\002\ufffd\001" +
    "\002\000\004\002\uffff\001\002\000\004\002\001\001\002" +
    "\000\034\012\uffec\013\uffec\014\uffec\015\uffec\016\uffec\023" +
    "\uffec\026\uffec\027\uffec\030\uffec\031\uffec\035\uffec\036\uffec" +
    "\037\uffec\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\265\000\024\010\015\015\017\020\010\032\011\035" +
    "\005\036\007\044\004\047\014\050\013\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\010\015\015\017\020\010" +
    "\032\011\035\005\044\264\047\014\050\013\001\001\000" +
    "\022\010\015\015\017\020\010\032\011\035\005\044\263" +
    "\047\014\050\013\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\010\015\015\017\020\010\032\011\035\005\044" +
    "\241\047\014\050\013\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\030\002\030\003\033\004\044\010\015\013\026" +
    "\014\031\032\034\035\005\040\032\042\035\047\036\001" +
    "\001\000\030\002\030\003\033\004\044\010\015\013\026" +
    "\014\031\032\034\035\005\040\240\042\035\047\036\001" +
    "\001\000\002\001\001\000\030\002\030\003\033\004\044" +
    "\010\015\013\026\014\031\032\034\035\005\040\227\042" +
    "\035\047\036\001\001\000\030\002\030\003\033\004\044" +
    "\010\015\013\026\014\031\032\034\035\005\040\226\042" +
    "\035\047\036\001\001\000\002\001\001\000\030\002\030" +
    "\003\033\004\044\010\015\013\026\014\031\032\034\035" +
    "\005\040\221\042\035\047\036\001\001\000\030\002\030" +
    "\003\033\004\044\010\015\013\026\014\031\032\034\035" +
    "\005\040\220\042\035\047\036\001\001\000\030\002\030" +
    "\003\033\004\044\010\015\013\026\014\031\032\034\035" +
    "\005\040\217\042\035\047\036\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\033\126\001\001\000\002\001\001\000\030\002\030" +
    "\003\033\004\044\010\015\013\026\014\031\032\034\035" +
    "\005\040\055\042\035\047\036\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\005\061\007\057\031" +
    "\062\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\007" +
    "\066\031\067\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\031\071\001\001\000\002\001" +
    "\001\000\004\031\100\001\001\000\004\031\077\001\001" +
    "\000\002\001\001\000\004\031\076\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\031\102" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\005" +
    "\107\007\057\031\062\001\001\000\010\005\106\007\057" +
    "\031\062\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\030\002\030\003\033\004\044\010\015" +
    "\013\026\014\031\032\034\035\005\040\112\042\035\047" +
    "\036\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\005\117\007\057\031\062\001\001\000\010\005\116\007" +
    "\057\031\062\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\010\015\035\147\047\036\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\031\130\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\025\133" +
    "\026\135\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\025\140\001\001" +
    "\000\002\001\001\000\010\010\015\035\142\047\036\001" +
    "\001\000\002\001\001\000\004\031\144\001\001\000\002" +
    "\001\001\000\004\031\146\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\005\151\007\057\031\062\001\001" +
    "\000\002\001\001\000\002\001\001\000\030\002\030\003" +
    "\033\004\044\010\015\013\026\014\031\032\034\035\005" +
    "\040\154\042\035\047\036\001\001\000\002\001\001\000" +
    "\004\006\156\001\001\000\002\001\001\000\004\003\160" +
    "\001\001\000\002\001\001\000\030\002\030\003\033\004" +
    "\044\010\015\013\026\014\031\032\034\035\005\040\162" +
    "\042\035\047\036\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\010\167\034\165\001\001\000\004\031\173" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\005\175\007\057\031\062\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\033\200\001\001\000\002" +
    "\001\001\000\002\001\001\000\030\002\030\003\033\004" +
    "\044\010\015\013\026\014\031\032\034\035\005\040\203" +
    "\042\035\047\036\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\010\015\035\216\047\036\001\001\000\004" +
    "\031\207\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\025\133\026\212\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\010\015\035\215\047\036\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\031\223\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\010\246\023\245\047\244\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\010\246\023\250" +
    "\047\244\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\010\246\023\253\047\244\001\001\000\002\001\001" +
    "\000\002\001\001\000\030\002\030\003\033\004\044\010" +
    "\015\013\026\014\031\032\034\035\005\040\256\042\035" +
    "\047\036\001\001\000\002\001\001\000\004\031\260\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    ArrayList gramas = new ArrayList();
    public Nodo raiz;
    public int cont = 0;
    public int maximo(){
    int a=5;
    return a;
}
    ArrayList errores=new ArrayList();
    public Symbol s;
    @Override
    public void syntax_error (Symbol s){
        if(s.left==-1){
        }else{
                errores.add("Syntax error en la línea: " + (s.left) + " , columna: " +(s.right)+ " con el símbolo = "+(s.value));
    }
}
    @Override
    public void unrecovered_syntax_error(Symbol s){
    if(s.left==-1){
    }else{
        errores.add("Error desconocido, por favor revise la linea: " + (s.left ) + " y columna:  " + (s.right )+ "Con simbolo: "+s.value);
    }    
    }
    public Symbol getS(){
        return this.s;
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // CONTADOR ::= tkn_id ITERADOR tkn_puntocoma 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTADOR",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // ARGSPARAMS ::= tkn_id 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARGSPARAMS",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // ARGSPARAMS ::= tkn_id tkn_coma ARGSPARAMS 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARGSPARAMS",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // ARGS ::= 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARGS",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // ARGS ::= ARGSPARAMS 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARGS",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // EXPR ::= tkn_caracter 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPR",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // EXPR ::= tkn_num 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPR",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // EXPR ::= tkn_id 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPR",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // EXPR ::= tkn_parentesisiz EXPR tkn_parentesisde 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPR",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // EXPR ::= EXPR tkn_opmod EXPR 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPR",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // EXPR ::= EXPR tkn_opmulti EXPR 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPR",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // EXPR ::= EXPR tkn_opadicion EXPR 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPR",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // TIPO ::= tkn_void 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // TIPO ::= tkn_int 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // TIPO ::= tkn_charp 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // TIPO ::= tkn_intp 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // TIPO ::= tkn_char 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // CONDICIONP ::= EXPR tkn_oprel EXPR 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICIONP",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // CONDICION ::= CONDICIONP 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // CONDICION ::= tkn_parentesisiz CONDICIONP tkn_parentesisde 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // CONDICION ::= tkn_parentesisiz CONDICIONP tkn_parentesisde tkn_or CONDICION 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // CONDICION ::= tkn_parentesisiz CONDICIONP tkn_parentesisde tkn_and CONDICION 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // CONDICION ::= CONDICIONP tkn_or CONDICION 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // CONDICION ::= CONDICIONP tkn_and CONDICION 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // ITERADOR ::= tkn_opmulti tkn_oprel EXPR 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ITERADOR",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // ITERADOR ::= tkn_opadicion tkn_oprel EXPR 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ITERADOR",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // ITERADOR ::= tkn_decrement 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ITERADOR",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // ITERADOR ::= tkn_increment 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ITERADOR",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // BLOQUE ::= 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // BLOQUE ::= CONTADOR BLOQUE 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // BLOQUE ::= PRINTF BLOQUE 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // BLOQUE ::= SCANF BLOQUE 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // BLOQUE ::= ASIGN BLOQUE 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // BLOQUE ::= WHILE BLOQUE 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // BLOQUE ::= FOR BLOQUE 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // BLOQUE ::= IF BLOQUE 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // SCANF ::= tkn_scanf tkn_parentesisiz tkn_cadena tkn_coma tkn_ampersand tkn_id tkn_parentesisde tkn_puntocoma 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SCANF",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // PRINTF ::= tkn_printf tkn_parentesisiz tkn_cadena tkn_parentesisde tkn_puntocoma 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRINTF",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // PRINTF ::= tkn_printf tkn_parentesisiz tkn_cadena tkn_coma tkn_id tkn_parentesisde tkn_puntocoma 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRINTF",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // WHILE ::= tkn_while tkn_parentesisiz CONDICION tkn_parentesisde tkn_llaveiz BLOQUE tkn_llaveder 
            {
              Nodo RESULT =null;
		int jleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int jright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo j = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("WHILE",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // FOR ::= tkn_for tkn_parentesisiz ASIGNACION EXPR tkn_puntocoma CONDICION tkn_puntocoma tkn_id ITERADOR tkn_parentesisde tkn_llaveiz BLOQUE tkn_llaveder 
            {
              Nodo RESULT =null;
		int jleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int jright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo j = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FOR",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // ELSE ::= 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ELSE",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ELSE ::= tkn_else IF 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ELSE",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ELSE ::= tkn_else tkn_llaveiz BLOQUE tkn_llaveder 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ELSE",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // IF ::= tkn_if tkn_parentesisiz CONDICION tkn_parentesisde tkn_llaveiz BLOQUE tkn_llaveder ELSE 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IF",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // PARAMS ::= 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMS",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // PARAMS ::= TIPO 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMS",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // PARAMS ::= DECLR 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMS",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // PARAMS ::= DECLR tkn_coma PARAMS 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMS",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // PARAMS ::= TIPO tkn_coma PARAMS 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMS",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // ASIGN ::= DECLASIGN tkn_puntocoma 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGN",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // DECLASIGN ::= tkn_id tkn_oprel tkn_id tkn_parentesisiz ARGS tkn_parentesisde 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLASIGN",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // DECLASIGN ::= DECLR tkn_oprel tkn_id tkn_parentesisiz ARGS tkn_parentesisde 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLASIGN",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // DECLASIGN ::= DECLR 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLASIGN",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // DECLASIGN ::= tkn_id tkn_oprel EXPR 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLASIGN",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // DECLASIGN ::= tkn_id tkn_oprel EXPR tkn_coma DECLASIGN 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLASIGN",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // DECLASIGN ::= tkn_id tkn_coma DECLASIGN 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLASIGN",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // DECLASIGN ::= DECLR tkn_coma DECLASIGN 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLASIGN",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // DECLASIGN ::= DECLR tkn_oprel EXPR 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLASIGN",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // DECLASIGN ::= DECLR tkn_oprel EXPR tkn_coma DECLASIGN 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLASIGN",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // ASIGNACION ::= tkn_id tkn_oprel 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // ASIGNACION ::= TIPO tkn_id tkn_oprel 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // DECLR ::= TIPO tkn_id 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLR",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // PROTOFUN ::= DECLR tkn_parentesisiz PARAMS tkn_parentesisde 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROTOFUN",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // FUNCION ::= tkn_int tkn_main tkn_parentesisiz tkn_parentesisde tkn_llaveiz BLOQUE tkn_return EXPR tkn_puntocoma tkn_llaveder 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCION",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // FUNCION ::= PROTOFUN tkn_llaveiz BLOQUE tkn_return EXPR tkn_puntocoma tkn_llaveder 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCION",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // PROTOTIPO ::= PROTOFUN tkn_puntocoma 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROTOTIPO",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // PROGRAM ::= ASIGN PROGRAM 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROGRAM",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // PROGRAM ::= FUNCION PROGRAM 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROGRAM",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // PROGRAM ::= PROTOTIPO PROGRAM 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROGRAM",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= PROGRAM 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIO",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo start_val = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

