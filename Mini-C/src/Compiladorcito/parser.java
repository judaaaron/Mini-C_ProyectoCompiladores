
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Sep 01 21:10:17 CST 2022
//----------------------------------------------------

package Compiladorcito;

import java_cup.runtime.*;
import java.util.ArrayList;
import java.util.*;
import java.io.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Sep 01 21:10:17 CST 2022
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\136\000\002\002\004\000\002\031\015\000\002\031" +
    "\015\000\002\031\015\000\002\031\015\000\002\006\005" +
    "\000\002\017\005\000\002\017\003\000\002\017\007\000" +
    "\002\017\005\000\002\017\007\000\002\017\005\000\002" +
    "\017\003\000\002\033\004\000\002\033\002\000\002\002" +
    "\004\000\002\002\003\000\002\026\003\000\002\026\002" +
    "\000\002\032\003\000\002\032\002\000\002\042\003\000" +
    "\002\042\002\000\002\035\006\000\002\035\005\000\002" +
    "\035\003\000\002\035\004\000\002\027\006\000\002\027" +
    "\004\000\002\025\015\000\002\025\015\000\002\041\005" +
    "\000\002\041\003\000\002\037\012\000\002\037\007\000" +
    "\002\030\010\000\002\030\003\000\002\004\012\000\002" +
    "\004\012\000\002\004\012\000\002\012\006\000\002\012" +
    "\004\000\002\012\002\000\002\005\021\000\002\005\020" +
    "\000\002\005\021\000\002\005\021\000\002\005\021\000" +
    "\002\005\021\000\002\005\021\000\002\005\021\000\002" +
    "\005\021\000\002\005\021\000\002\003\011\000\002\003" +
    "\011\000\002\007\004\000\002\007\004\000\002\007\004" +
    "\000\002\007\004\000\002\007\004\000\002\007\004\000" +
    "\002\007\004\000\002\007\004\000\002\007\004\000\002" +
    "\007\002\000\002\010\005\000\002\010\005\000\002\010" +
    "\007\000\002\010\007\000\002\010\005\000\002\010\003" +
    "\000\002\013\005\000\002\014\003\000\002\014\003\000" +
    "\002\014\003\000\002\015\003\000\002\015\003\000\002" +
    "\016\003\000\002\016\003\000\002\016\003\000\002\016" +
    "\003\000\002\016\003\000\002\020\011\000\002\020\007" +
    "\000\002\022\010\000\002\023\005\000\002\023\005\000" +
    "\002\024\012\000\002\034\003\000\002\034\003\000\002" +
    "\034\003\000\002\034\003\000\002\043\003\000\002\043" +
    "\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u014a\000\014\003\013\012\014\013\010\035\015\036" +
    "\011\001\002\000\004\002\ufff1\001\002\000\014\003\uffdd" +
    "\012\uffdd\013\uffdd\035\uffdd\036\uffdd\001\002\000\004\002" +
    "\u014c\001\002\000\014\003\013\012\014\013\010\035\015" +
    "\036\011\001\002\000\012\003\uffb2\021\uffb2\037\uffb2\043" +
    "\uffb2\001\002\000\012\003\uffb4\021\uffb4\037\uffb4\043\uffb4" +
    "\001\002\000\006\003\203\037\u013f\001\002\000\010\003" +
    "\uffb0\010\u0135\037\uffb0\001\002\000\012\003\uffb3\021\uffb3" +
    "\037\uffb3\043\uffb3\001\002\000\010\003\uffb1\010\016\037" +
    "\uffb1\001\002\000\004\020\017\001\002\000\004\021\020" +
    "\001\002\000\006\003\021\022\022\001\002\000\036\003" +
    "\040\012\014\013\010\015\043\016\045\020\036\026\034" +
    "\027\uffc1\030\025\031\046\035\037\036\011\037\044\042" +
    "\052\001\002\000\036\003\040\012\014\013\010\015\043" +
    "\016\045\020\036\026\034\027\uffc1\030\025\031\046\035" +
    "\037\036\011\037\044\042\052\001\002\000\016\003\uffbb" +
    "\021\uffbb\024\u012c\025\u012b\040\uffbb\041\uffbb\001\002\000" +
    "\044\003\040\012\014\013\010\015\043\016\045\020\036" +
    "\023\uffc1\026\034\027\uffc1\030\025\031\046\034\uffc1\035" +
    "\037\036\011\037\044\040\uffc1\042\052\001\002\000\004" +
    "\020\u0122\001\002\000\044\003\040\012\014\013\010\015" +
    "\043\016\045\020\036\023\uffc1\026\034\027\uffc1\030\025" +
    "\031\046\034\uffc1\035\037\036\011\037\044\040\uffc1\042" +
    "\052\001\002\000\044\003\040\012\014\013\010\015\043" +
    "\016\045\020\036\023\uffc1\026\034\027\uffc1\030\025\031" +
    "\046\034\uffc1\035\037\036\011\037\044\040\uffc1\042\052" +
    "\001\002\000\044\003\040\012\014\013\010\015\043\016" +
    "\045\020\036\023\uffc1\026\034\027\uffc1\030\025\031\046" +
    "\034\uffc1\035\037\036\011\037\044\040\uffc1\042\052\001" +
    "\002\000\044\003\040\012\014\013\010\015\043\016\045" +
    "\020\036\023\uffc1\026\034\027\uffc1\030\025\031\046\034" +
    "\uffc1\035\037\036\011\037\044\040\uffc1\042\052\001\002" +
    "\000\004\027\366\001\002\000\044\003\040\012\014\013" +
    "\010\015\043\016\045\020\036\023\uffc1\026\034\027\uffc1" +
    "\030\025\031\046\034\uffc1\035\037\036\011\037\044\040" +
    "\uffc1\042\052\001\002\000\006\003\226\020\227\001\002" +
    "\000\006\003\203\037\204\001\002\000\006\037\065\042" +
    "\052\001\002\000\012\003\uffb1\021\uffb1\037\uffb1\043\uffb1" +
    "\001\002\000\010\003\uffb0\020\154\037\uffb0\001\002\000" +
    "\044\003\040\012\014\013\010\015\043\016\045\020\036" +
    "\023\uffc1\026\034\027\uffc1\030\025\031\046\034\uffc1\035" +
    "\037\036\011\037\044\040\uffc1\042\052\001\002\000\044" +
    "\003\040\012\014\013\010\015\043\016\045\020\036\023" +
    "\uffc1\026\034\027\uffc1\030\025\031\046\034\uffc1\035\037" +
    "\036\011\037\044\040\uffc1\042\052\001\002\000\004\020" +
    "\124\001\002\000\016\003\uffb5\007\uffb5\011\uffb5\020\112" +
    "\032\111\033\110\001\002\000\004\020\076\001\002\000" +
    "\004\020\067\001\002\000\044\003\040\012\014\013\010" +
    "\015\043\016\045\020\036\023\uffc1\026\034\027\uffc1\030" +
    "\025\031\046\034\uffc1\035\037\036\011\037\044\040\uffc1" +
    "\042\052\001\002\000\010\003\062\007\063\011\061\001" +
    "\002\000\004\041\053\001\002\000\022\003\uffb6\007\uffb6" +
    "\011\uffb6\021\uffb6\024\uffb6\025\uffb6\040\uffb6\041\uffb6\001" +
    "\002\000\036\003\040\012\014\013\010\015\043\016\045" +
    "\020\036\026\034\030\025\031\046\034\uffc1\035\037\036" +
    "\011\037\044\042\052\001\002\000\004\034\055\001\002" +
    "\000\036\003\040\012\014\013\010\015\043\016\045\020" +
    "\036\026\034\030\025\031\046\035\037\036\011\037\044" +
    "\040\uffc1\042\052\001\002\000\004\040\057\001\002\000" +
    "\044\003\uffad\012\uffad\013\uffad\015\uffad\016\uffad\020\uffad" +
    "\023\uffad\026\uffad\027\uffad\030\uffad\031\uffad\034\uffad\035" +
    "\uffad\036\uffad\037\uffad\040\uffad\042\uffad\001\002\000\006" +
    "\037\065\042\052\001\002\000\006\037\uffb8\042\uffb8\001" +
    "\002\000\006\037\uffb7\042\uffb7\001\002\000\006\037\uffb9" +
    "\042\uffb9\001\002\000\016\003\uffba\021\uffba\024\uffba\025" +
    "\uffba\040\uffba\041\uffba\001\002\000\022\003\uffb5\007\uffb5" +
    "\011\uffb5\021\uffb5\024\uffb5\025\uffb5\040\uffb5\041\uffb5\001" +
    "\002\000\012\023\uffc9\027\uffc9\034\uffc9\040\uffc9\001\002" +
    "\000\004\052\070\001\002\000\004\043\071\001\002\000" +
    "\004\051\072\001\002\000\004\037\073\001\002\000\004" +
    "\021\074\001\002\000\004\040\075\001\002\000\044\003" +
    "\uffaa\012\uffaa\013\uffaa\015\uffaa\016\uffaa\020\uffaa\023\uffaa" +
    "\026\uffaa\027\uffaa\030\uffaa\031\uffaa\034\uffaa\035\uffaa\036" +
    "\uffaa\037\uffaa\040\uffaa\042\uffaa\001\002\000\010\020\036" +
    "\037\065\042\052\001\002\000\006\003\100\021\101\001" +
    "\002\000\004\022\105\001\002\000\004\022\102\001\002" +
    "\000\036\003\040\012\014\013\010\015\043\016\045\020" +
    "\036\023\uffc1\026\034\030\025\031\046\035\037\036\011" +
    "\037\044\042\052\001\002\000\004\023\104\001\002\000" +
    "\044\003\uffcc\012\uffcc\013\uffcc\015\uffcc\016\uffcc\020\uffcc" +
    "\023\uffcc\026\uffcc\027\uffcc\030\uffcc\031\uffcc\034\uffcc\035" +
    "\uffcc\036\uffcc\037\uffcc\040\uffcc\042\uffcc\001\002\000\036" +
    "\003\040\012\014\013\010\015\043\016\045\020\036\023" +
    "\uffc1\026\034\030\025\031\046\035\037\036\011\037\044" +
    "\042\052\001\002\000\004\023\107\001\002\000\044\003" +
    "\uffcb\012\uffcb\013\uffcb\015\uffcb\016\uffcb\020\uffcb\023\uffcb" +
    "\026\uffcb\027\uffcb\030\uffcb\031\uffcb\034\uffcb\035\uffcb\036" +
    "\uffcb\037\uffcb\040\uffcb\042\uffcb\001\002\000\004\040\123" +
    "\001\002\000\004\040\122\001\002\000\006\021\uffeb\037" +
    "\114\001\002\000\004\021\uffec\001\002\000\006\021\uffe1" +
    "\043\120\001\002\000\004\021\116\001\002\000\004\040" +
    "\117\001\002\000\044\003\uffdf\012\uffdf\013\uffdf\015\uffdf" +
    "\016\uffdf\020\uffdf\023\uffdf\026\uffdf\027\uffdf\030\uffdf\031" +
    "\uffdf\034\uffdf\035\uffdf\036\uffdf\037\uffdf\040\uffdf\042\uffdf" +
    "\001\002\000\004\037\114\001\002\000\004\021\uffe2\001" +
    "\002\000\044\003\uffac\012\uffac\013\uffac\015\uffac\016\uffac" +
    "\020\uffac\023\uffac\026\uffac\027\uffac\030\uffac\031\uffac\034" +
    "\uffac\035\uffac\036\uffac\037\uffac\040\uffac\042\uffac\001\002" +
    "\000\044\003\uffab\012\uffab\013\uffab\015\uffab\016\uffab\020" +
    "\uffab\023\uffab\026\uffab\027\uffab\030\uffab\031\uffab\034\uffab" +
    "\035\uffab\036\uffab\037\uffab\040\uffab\042\uffab\001\002\000" +
    "\012\003\126\020\036\037\065\042\052\001\002\000\004" +
    "\021\141\001\002\000\004\021\127\001\002\000\004\022" +
    "\130\001\002\000\036\003\040\012\014\013\010\015\043" +
    "\016\045\020\036\023\uffc1\026\034\030\025\031\046\035" +
    "\037\036\011\037\044\042\052\001\002\000\004\023\132" +
    "\001\002\000\046\003\uffd7\012\uffd7\013\uffd7\015\uffd7\016" +
    "\uffd7\017\134\020\uffd7\023\uffd7\026\uffd7\027\uffd7\030\uffd7" +
    "\031\uffd7\034\uffd7\035\uffd7\036\uffd7\037\uffd7\040\uffd7\042" +
    "\uffd7\001\002\000\044\003\uffdb\012\uffdb\013\uffdb\015\uffdb" +
    "\016\uffdb\020\uffdb\023\uffdb\026\uffdb\027\uffdb\030\uffdb\031" +
    "\uffdb\034\uffdb\035\uffdb\036\uffdb\037\uffdb\040\uffdb\042\uffdb" +
    "\001\002\000\006\015\043\022\136\001\002\000\044\003" +
    "\uffd8\012\uffd8\013\uffd8\015\uffd8\016\uffd8\020\uffd8\023\uffd8" +
    "\026\uffd8\027\uffd8\030\uffd8\031\uffd8\034\uffd8\035\uffd8\036" +
    "\uffd8\037\uffd8\040\uffd8\042\uffd8\001\002\000\036\003\040" +
    "\012\014\013\010\015\043\016\045\020\036\023\uffc1\026" +
    "\034\030\025\031\046\035\037\036\011\037\044\042\052" +
    "\001\002\000\004\023\140\001\002\000\044\003\uffd9\012" +
    "\uffd9\013\uffd9\015\uffd9\016\uffd9\020\uffd9\023\uffd9\026\uffd9" +
    "\027\uffd9\030\uffd9\031\uffd9\034\uffd9\035\uffd9\036\uffd9\037" +
    "\uffd9\040\uffd9\042\uffd9\001\002\000\006\003\142\022\143" +
    "\001\002\000\036\003\040\012\014\013\010\015\043\016" +
    "\045\020\036\023\uffc1\026\034\030\025\031\046\035\037" +
    "\036\011\037\044\042\052\001\002\000\036\003\040\012" +
    "\014\013\010\015\043\016\045\020\036\023\uffc1\026\034" +
    "\030\025\031\046\035\037\036\011\037\044\042\052\001" +
    "\002\000\004\023\145\001\002\000\046\003\uffd7\012\uffd7" +
    "\013\uffd7\015\uffd7\016\uffd7\017\134\020\uffd7\023\uffd7\026" +
    "\uffd7\027\uffd7\030\uffd7\031\uffd7\034\uffd7\035\uffd7\036\uffd7" +
    "\037\uffd7\040\uffd7\042\uffd7\001\002\000\044\003\uffdc\012" +
    "\uffdc\013\uffdc\015\uffdc\016\uffdc\020\uffdc\023\uffdc\026\uffdc" +
    "\027\uffdc\030\uffdc\031\uffdc\034\uffdc\035\uffdc\036\uffdc\037" +
    "\uffdc\040\uffdc\042\uffdc\001\002\000\004\023\150\001\002" +
    "\000\046\003\uffd7\012\uffd7\013\uffd7\015\uffd7\016\uffd7\017" +
    "\134\020\uffd7\023\uffd7\026\uffd7\027\uffd7\030\uffd7\031\uffd7" +
    "\034\uffd7\035\uffd7\036\uffd7\037\uffd7\040\uffd7\042\uffd7\001" +
    "\002\000\044\003\uffda\012\uffda\013\uffda\015\uffda\016\uffda" +
    "\020\uffda\023\uffda\026\uffda\027\uffda\030\uffda\031\uffda\034" +
    "\uffda\035\uffda\036\uffda\037\uffda\040\uffda\042\uffda\001\002" +
    "\000\012\023\uffc5\027\uffc5\034\uffc5\040\uffc5\001\002\000" +
    "\012\023\uffc2\027\uffc2\034\uffc2\040\uffc2\001\002\000\004" +
    "\035\155\001\002\000\004\037\156\001\002\000\004\011" +
    "\157\001\002\000\004\042\160\001\002\000\004\040\161" +
    "\001\002\000\010\020\036\037\065\042\052\001\002\000" +
    "\004\040\163\001\002\000\004\037\164\001\002\000\006" +
    "\032\166\033\165\001\002\000\004\021\uffa4\001\002\000" +
    "\004\021\uffa5\001\002\000\004\021\170\001\002\000\004" +
    "\022\171\001\002\000\036\003\040\012\014\013\010\015" +
    "\043\016\045\020\036\023\uffc1\026\034\030\025\031\046" +
    "\035\037\036\011\037\044\042\052\001\002\000\004\023" +
    "\173\001\002\000\044\003\uffd0\012\uffd0\013\uffd0\015\uffd0" +
    "\016\uffd0\020\uffd0\023\uffd0\026\uffd0\027\uffd0\030\uffd0\031" +
    "\uffd0\034\uffd0\035\uffd0\036\uffd0\037\uffd0\040\uffd0\042\uffd0" +
    "\001\002\000\004\021\175\001\002\000\016\003\uffbc\021" +
    "\uffbc\024\177\025\176\040\uffbc\041\uffbc\001\002\000\010" +
    "\020\036\037\065\042\052\001\002\000\010\020\036\037" +
    "\065\042\052\001\002\000\012\003\uffbe\021\uffbe\040\uffbe" +
    "\041\uffbe\001\002\000\012\003\uffbd\021\uffbd\040\uffbd\041" +
    "\uffbd\001\002\000\004\040\225\001\002\000\004\040\ufff5" +
    "\001\002\000\010\011\206\040\ufffa\043\205\001\002\000" +
    "\006\003\203\037\214\001\002\000\010\037\210\042\211" +
    "\053\207\001\002\000\006\040\ufff6\043\222\001\002\000" +
    "\004\020\216\001\002\000\006\040\ufff8\043\212\001\002" +
    "\000\006\003\203\037\214\001\002\000\004\040\ufff9\001" +
    "\002\000\010\011\215\040\ufffa\043\205\001\002\000\006" +
    "\042\211\053\207\001\002\000\006\021\uffeb\037\114\001" +
    "\002\000\004\021\220\001\002\000\004\040\221\001\002" +
    "\000\044\003\uffe0\012\uffe0\013\uffe0\015\uffe0\016\uffe0\020" +
    "\uffe0\023\uffe0\026\uffe0\027\uffe0\030\uffe0\031\uffe0\034\uffe0" +
    "\035\uffe0\036\uffe0\037\uffe0\040\uffe0\042\uffe0\001\002\000" +
    "\006\003\203\037\214\001\002\000\004\040\ufff7\001\002" +
    "\000\004\040\ufffb\001\002\000\044\003\ufffc\012\ufffc\013" +
    "\ufffc\015\ufffc\016\ufffc\020\ufffc\023\ufffc\026\ufffc\027\ufffc" +
    "\030\ufffc\031\ufffc\034\ufffc\035\ufffc\036\ufffc\037\ufffc\040" +
    "\ufffc\042\ufffc\001\002\000\004\035\350\001\002\000\006" +
    "\035\231\037\230\001\002\000\004\011\335\001\002\000" +
    "\006\003\232\037\233\001\002\000\004\011\322\001\002" +
    "\000\006\003\235\011\234\001\002\000\006\003\250\042" +
    "\251\001\002\000\004\042\236\001\002\000\004\040\237" +
    "\001\002\000\010\020\036\037\065\042\052\001\002\000" +
    "\004\040\241\001\002\000\004\037\242\001\002\000\006" +
    "\032\166\033\165\001\002\000\004\021\244\001\002\000" +
    "\004\022\245\001\002\000\036\003\040\012\014\013\010" +
    "\015\043\016\045\020\036\023\uffc1\026\034\030\025\031" +
    "\046\035\037\036\011\037\044\042\052\001\002\000\004" +
    "\023\247\001\002\000\044\003\uffd4\012\uffd4\013\uffd4\015" +
    "\uffd4\016\uffd4\020\uffd4\023\uffd4\026\uffd4\027\uffd4\030\uffd4" +
    "\031\uffd4\034\uffd4\035\uffd4\036\uffd4\037\uffd4\040\uffd4\042" +
    "\uffd4\001\002\000\004\040\311\001\002\000\006\003\252" +
    "\040\253\001\002\000\010\020\036\037\065\042\052\001" +
    "\002\000\012\003\255\020\036\037\065\042\052\001\002" +
    "\000\004\040\265\001\002\000\004\040\256\001\002\000" +
    "\004\037\257\001\002\000\006\032\166\033\165\001\002" +
    "\000\004\021\261\001\002\000\004\022\262\001\002\000" +
    "\036\003\040\012\014\013\010\015\043\016\045\020\036" +
    "\023\uffc1\026\034\030\025\031\046\035\037\036\011\037" +
    "\044\042\052\001\002\000\004\023\264\001\002\000\044" +
    "\003\uffcf\012\uffcf\013\uffcf\015\uffcf\016\uffcf\020\uffcf\023" +
    "\uffcf\026\uffcf\027\uffcf\030\uffcf\031\uffcf\034\uffcf\035\uffcf" +
    "\036\uffcf\037\uffcf\040\uffcf\042\uffcf\001\002\000\004\037" +
    "\266\001\002\000\010\003\267\032\166\033\165\001\002" +
    "\000\004\021\275\001\002\000\004\021\271\001\002\000" +
    "\004\022\272\001\002\000\036\003\040\012\014\013\010" +
    "\015\043\016\045\020\036\023\uffc1\026\034\030\025\031" +
    "\046\035\037\036\011\037\044\042\052\001\002\000\004" +
    "\023\274\001\002\000\044\003\uffd6\012\uffd6\013\uffd6\015" +
    "\uffd6\016\uffd6\020\uffd6\023\uffd6\026\uffd6\027\uffd6\030\uffd6" +
    "\031\uffd6\034\uffd6\035\uffd6\036\uffd6\037\uffd6\040\uffd6\042" +
    "\uffd6\001\002\000\004\022\276\001\002\000\036\003\040" +
    "\012\014\013\010\015\043\016\045\020\036\023\uffc1\026" +
    "\034\030\025\031\046\035\037\036\011\037\044\042\052" +
    "\001\002\000\004\023\300\001\002\000\044\003\uffd1\012" +
    "\uffd1\013\uffd1\015\uffd1\016\uffd1\020\uffd1\023\uffd1\026\uffd1" +
    "\027\uffd1\030\uffd1\031\uffd1\034\uffd1\035\uffd1\036\uffd1\037" +
    "\uffd1\040\uffd1\042\uffd1\001\002\000\004\040\302\001\002" +
    "\000\004\037\303\001\002\000\006\032\166\033\165\001" +
    "\002\000\004\021\305\001\002\000\004\022\306\001\002" +
    "\000\036\003\040\012\014\013\010\015\043\016\045\020" +
    "\036\023\uffc1\026\034\030\025\031\046\035\037\036\011" +
    "\037\044\042\052\001\002\000\004\023\310\001\002\000" +
    "\044\003\uffd2\012\uffd2\013\uffd2\015\uffd2\016\uffd2\020\uffd2" +
    "\023\uffd2\026\uffd2\027\uffd2\030\uffd2\031\uffd2\034\uffd2\035" +
    "\uffd2\036\uffd2\037\uffd2\040\uffd2\042\uffd2\001\002\000\010" +
    "\020\036\037\065\042\052\001\002\000\004\040\313\001" +
    "\002\000\004\037\314\001\002\000\006\032\166\033\165" +
    "\001\002\000\004\021\316\001\002\000\004\022\317\001" +
    "\002\000\036\003\040\012\014\013\010\015\043\016\045" +
    "\020\036\023\uffc1\026\034\030\025\031\046\035\037\036" +
    "\011\037\044\042\052\001\002\000\004\023\321\001\002" +
    "\000\044\003\uffd3\012\uffd3\013\uffd3\015\uffd3\016\uffd3\020" +
    "\uffd3\023\uffd3\026\uffd3\027\uffd3\030\uffd3\031\uffd3\034\uffd3" +
    "\035\uffd3\036\uffd3\037\uffd3\040\uffd3\042\uffd3\001\002\000" +
    "\004\042\323\001\002\000\004\040\324\001\002\000\010" +
    "\020\036\037\065\042\052\001\002\000\004\040\326\001" +
    "\002\000\004\037\327\001\002\000\006\032\166\033\165" +
    "\001\002\000\004\021\331\001\002\000\004\022\332\001" +
    "\002\000\036\003\040\012\014\013\010\015\043\016\045" +
    "\020\036\023\uffc1\026\034\030\025\031\046\035\037\036" +
    "\011\037\044\042\052\001\002\000\004\023\334\001\002" +
    "\000\044\003\uffcd\012\uffcd\013\uffcd\015\uffcd\016\uffcd\020" +
    "\uffcd\023\uffcd\026\uffcd\027\uffcd\030\uffcd\031\uffcd\034\uffcd" +
    "\035\uffcd\036\uffcd\037\uffcd\040\uffcd\042\uffcd\001\002\000" +
    "\004\042\336\001\002\000\004\040\337\001\002\000\010" +
    "\020\036\037\065\042\052\001\002\000\004\040\341\001" +
    "\002\000\004\037\342\001\002\000\006\032\166\033\165" +
    "\001\002\000\004\021\344\001\002\000\004\022\345\001" +
    "\002\000\036\003\040\012\014\013\010\015\043\016\045" +
    "\020\036\023\uffc1\026\034\030\025\031\046\035\037\036" +
    "\011\037\044\042\052\001\002\000\004\023\347\001\002" +
    "\000\044\003\uffd5\012\uffd5\013\uffd5\015\uffd5\016\uffd5\020" +
    "\uffd5\023\uffd5\026\uffd5\027\uffd5\030\uffd5\031\uffd5\034\uffd5" +
    "\035\uffd5\036\uffd5\037\uffd5\040\uffd5\042\uffd5\001\002\000" +
    "\004\037\351\001\002\000\004\011\352\001\002\000\004" +
    "\042\353\001\002\000\004\040\354\001\002\000\010\020" +
    "\036\037\065\042\052\001\002\000\004\040\356\001\002" +
    "\000\004\037\357\001\002\000\006\032\166\033\165\001" +
    "\002\000\004\021\361\001\002\000\004\022\362\001\002" +
    "\000\036\003\040\012\014\013\010\015\043\016\045\020" +
    "\036\023\uffc1\026\034\030\025\031\046\035\037\036\011" +
    "\037\044\042\052\001\002\000\004\023\364\001\002\000" +
    "\044\003\uffce\012\uffce\013\uffce\015\uffce\016\uffce\020\uffce" +
    "\023\uffce\026\uffce\027\uffce\030\uffce\031\uffce\034\uffce\035" +
    "\uffce\036\uffce\037\uffce\040\uffce\042\uffce\001\002\000\012" +
    "\023\uffc6\027\uffc6\034\uffc6\040\uffc6\001\002\000\004\042" +
    "\367\001\002\000\004\040\370\001\002\000\006\003\371" +
    "\023\372\001\002\000\016\002\ufff3\003\373\012\014\013" +
    "\010\035\037\036\011\001\002\000\016\002\ufff3\003\373" +
    "\012\014\013\010\035\037\036\011\001\002\000\012\003" +
    "\uffb0\021\uffb0\037\uffb0\043\uffb0\001\002\000\016\002\ufff3" +
    "\003\373\012\014\013\010\035\037\036\011\001\002\000" +
    "\004\002\000\001\002\000\006\003\377\037\u0100\001\002" +
    "\000\004\020\u0113\001\002\000\004\020\u0101\001\002\000" +
    "\016\003\373\012\014\013\010\021\uffef\035\037\036\011" +
    "\001\002\000\004\021\ufff0\001\002\000\004\021\u0108\001" +
    "\002\000\004\037\u0105\001\002\000\006\021\uffe5\043\u0106" +
    "\001\002\000\014\003\373\012\014\013\010\035\037\036" +
    "\011\001\002\000\004\021\uffe6\001\002\000\004\022\u0109" +
    "\001\002\000\036\003\040\012\014\013\010\015\043\016" +
    "\045\020\036\026\034\027\uffc1\030\025\031\046\035\037" +
    "\036\011\037\044\042\052\001\002\000\004\027\u010b\001" +
    "\002\000\012\003\u010d\037\u010f\042\u0110\053\u010c\001\002" +
    "\000\004\040\uffa7\001\002\000\004\040\uffa6\001\002\000" +
    "\004\040\u0111\001\002\000\004\040\uffa9\001\002\000\004" +
    "\040\uffa8\001\002\000\004\023\u0112\001\002\000\016\002" +
    "\uffe4\003\uffe4\012\uffe4\013\uffe4\035\uffe4\036\uffe4\001\002" +
    "\000\016\003\373\012\014\013\010\021\uffef\035\037\036" +
    "\011\001\002\000\004\021\u0115\001\002\000\004\022\u0116" +
    "\001\002\000\036\003\040\012\014\013\010\015\043\016" +
    "\045\020\036\026\034\027\uffc1\030\025\031\046\035\037" +
    "\036\011\037\044\042\052\001\002\000\004\027\u0118\001" +
    "\002\000\012\003\u010d\037\u010f\042\u0110\053\u010c\001\002" +
    "\000\004\040\u011a\001\002\000\004\023\u011b\001\002\000" +
    "\016\002\uffe3\003\uffe3\012\uffe3\013\uffe3\035\uffe3\036\uffe3" +
    "\001\002\000\004\002\ufff4\001\002\000\004\002\ufffd\001" +
    "\002\000\012\023\uffc8\027\uffc8\034\uffc8\040\uffc8\001\002" +
    "\000\012\023\uffc7\027\uffc7\034\uffc7\040\uffc7\001\002\000" +
    "\012\023\uffc3\027\uffc3\034\uffc3\040\uffc3\001\002\000\012" +
    "\023\uffca\027\uffca\034\uffca\040\uffca\001\002\000\004\052" +
    "\u0123\001\002\000\006\021\u0125\043\u0124\001\002\000\004" +
    "\037\u0127\001\002\000\004\040\u0126\001\002\000\044\003" +
    "\uffae\012\uffae\013\uffae\015\uffae\016\uffae\020\uffae\023\uffae" +
    "\026\uffae\027\uffae\030\uffae\031\uffae\034\uffae\035\uffae\036" +
    "\uffae\037\uffae\040\uffae\042\uffae\001\002\000\004\021\u0128" +
    "\001\002\000\004\040\u0129\001\002\000\044\003\uffaf\012" +
    "\uffaf\013\uffaf\015\uffaf\016\uffaf\020\uffaf\023\uffaf\026\uffaf" +
    "\027\uffaf\030\uffaf\031\uffaf\034\uffaf\035\uffaf\036\uffaf\037" +
    "\uffaf\040\uffaf\042\uffaf\001\002\000\012\023\uffc4\027\uffc4" +
    "\034\uffc4\040\uffc4\001\002\000\010\020\036\037\065\042" +
    "\052\001\002\000\010\020\036\037\065\042\052\001\002" +
    "\000\012\003\uffc0\021\uffc0\040\uffc0\041\uffc0\001\002\000" +
    "\012\003\uffbf\021\uffbf\040\uffbf\041\uffbf\001\002\000\004" +
    "\027\u0130\001\002\000\004\042\u0131\001\002\000\004\040" +
    "\u0132\001\002\000\004\023\u0133\001\002\000\016\002\ufff3" +
    "\003\373\012\014\013\010\035\037\036\011\001\002\000" +
    "\004\002\ufffe\001\002\000\004\020\u0136\001\002\000\004" +
    "\021\u0137\001\002\000\004\022\u0138\001\002\000\036\003" +
    "\040\012\014\013\010\015\043\016\045\020\036\026\034" +
    "\027\uffc1\030\025\031\046\035\037\036\011\037\044\042" +
    "\052\001\002\000\004\027\u013a\001\002\000\004\042\u013b" +
    "\001\002\000\004\040\u013c\001\002\000\004\023\u013d\001" +
    "\002\000\016\002\ufff3\003\373\012\014\013\010\035\037" +
    "\036\011\001\002\000\004\002\uffff\001\002\000\012\011" +
    "\215\020\u0140\040\ufffa\043\205\001\002\000\016\003\373" +
    "\012\014\013\010\021\uffed\035\037\036\011\001\002\000" +
    "\004\021\u0149\001\002\000\004\021\uffee\001\002\000\010" +
    "\021\uffe8\037\u0145\043\u0144\001\002\000\014\003\373\012" +
    "\014\013\010\035\037\036\011\001\002\000\006\021\uffe7" +
    "\043\u0146\001\002\000\014\003\373\012\014\013\010\035" +
    "\037\036\011\001\002\000\004\021\uffea\001\002\000\004" +
    "\021\uffe9\001\002\000\004\040\u014a\001\002\000\014\003" +
    "\uffde\012\uffde\013\uffde\035\uffde\036\uffde\001\002\000\004" +
    "\002\ufff2\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u014a\000\014\002\005\006\004\016\011\030\006\031" +
    "\003\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\002\u014a\006\004\016\011\030\006\031" +
    "\003\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\017\201\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\036\003\025\004\030\005\046\006\027\007" +
    "\u012e\010\050\013\022\015\047\016\034\020\032\022\041" +
    "\023\023\024\026\037\040\001\001\000\036\003\025\004" +
    "\030\005\046\006\027\007\031\010\050\013\022\015\047" +
    "\016\034\020\032\022\041\023\023\024\026\037\040\001" +
    "\001\000\002\001\001\000\036\003\025\004\030\005\046" +
    "\006\027\007\u0129\010\050\013\022\015\047\016\034\020" +
    "\032\022\041\023\023\024\026\037\040\001\001\000\002" +
    "\001\001\000\036\003\025\004\030\005\046\006\027\007" +
    "\u0120\010\050\013\022\015\047\016\034\020\032\022\041" +
    "\023\023\024\026\037\040\001\001\000\036\003\025\004" +
    "\030\005\046\006\027\007\u011f\010\050\013\022\015\047" +
    "\016\034\020\032\022\041\023\023\024\026\037\040\001" +
    "\001\000\036\003\025\004\030\005\046\006\027\007\u011e" +
    "\010\050\013\022\015\047\016\034\020\032\022\041\023" +
    "\023\024\026\037\040\001\001\000\036\003\025\004\030" +
    "\005\046\006\027\007\u011d\010\050\013\022\015\047\016" +
    "\034\020\032\022\041\023\023\024\026\037\040\001\001" +
    "\000\002\001\001\000\036\003\025\004\030\005\046\006" +
    "\027\007\364\010\050\013\022\015\047\016\034\020\032" +
    "\022\041\023\023\024\026\037\040\001\001\000\002\001" +
    "\001\000\004\017\201\001\001\000\006\013\173\015\047" +
    "\001\001\000\002\001\001\000\002\001\001\000\036\003" +
    "\025\004\030\005\046\006\027\007\152\010\050\013\022" +
    "\015\047\016\034\020\032\022\041\023\023\024\026\037" +
    "\040\001\001\000\036\003\025\004\030\005\046\006\027" +
    "\007\151\010\050\013\022\015\047\016\034\020\032\022" +
    "\041\023\023\024\026\037\040\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\036\003\025\004\030\005\046\006\027\007\065\010\050" +
    "\013\022\015\047\016\034\020\032\022\041\023\023\024" +
    "\026\037\040\001\001\000\004\014\057\001\001\000\002" +
    "\001\001\000\002\001\001\000\036\003\025\004\030\005" +
    "\046\006\027\007\053\010\050\013\022\015\047\016\034" +
    "\020\032\022\041\023\023\024\026\037\040\001\001\000" +
    "\002\001\001\000\036\003\025\004\030\005\046\006\027" +
    "\007\055\010\050\013\022\015\047\016\034\020\032\022" +
    "\041\023\023\024\026\037\040\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\015\063\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\010" +
    "\076\013\022\015\047\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\036\003\025\004\030\005" +
    "\046\006\027\007\102\010\050\013\022\015\047\016\034" +
    "\020\032\022\041\023\023\024\026\037\040\001\001\000" +
    "\002\001\001\000\002\001\001\000\036\003\025\004\030" +
    "\005\046\006\027\007\105\010\050\013\022\015\047\016" +
    "\034\020\032\022\041\023\023\024\026\037\040\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\041\112\042\114\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\041\120\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\010" +
    "\124\013\022\015\047\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\036\003\025\004\030\005" +
    "\046\006\027\007\130\010\050\013\022\015\047\016\034" +
    "\020\032\022\041\023\023\024\026\037\040\001\001\000" +
    "\002\001\001\000\004\012\132\001\001\000\002\001\001" +
    "\000\004\004\134\001\001\000\002\001\001\000\036\003" +
    "\025\004\030\005\046\006\027\007\136\010\050\013\022" +
    "\015\047\016\034\020\032\022\041\023\023\024\026\037" +
    "\040\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\036\003\025\004\030\005\046\006\027\007" +
    "\146\010\050\013\022\015\047\016\034\020\032\022\041" +
    "\023\023\024\026\037\040\001\001\000\036\003\025\004" +
    "\030\005\046\006\027\007\143\010\050\013\022\015\047" +
    "\016\034\020\032\022\041\023\023\024\026\037\040\001" +
    "\001\000\002\001\001\000\004\012\145\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\012\150\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\010\161\013\022\015\047" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\043" +
    "\166\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\036\003\025\004\030\005" +
    "\046\006\027\007\171\010\050\013\022\015\047\016\034" +
    "\020\032\022\041\023\023\024\026\037\040\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\010\200\013\022\015\047\001\001\000" +
    "\010\010\177\013\022\015\047\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\017\223\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\017\212\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\041\112\042\216\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\017\222\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\010\237\013\022\015\047\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\043\242\001\001\000\002" +
    "\001\001\000\002\001\001\000\036\003\025\004\030\005" +
    "\046\006\027\007\245\010\050\013\022\015\047\016\034" +
    "\020\032\022\041\023\023\024\026\037\040\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\010\300\013\022\015\047\001\001\000" +
    "\010\010\253\013\022\015\047\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\043\257\001" +
    "\001\000\002\001\001\000\002\001\001\000\036\003\025" +
    "\004\030\005\046\006\027\007\262\010\050\013\022\015" +
    "\047\016\034\020\032\022\041\023\023\024\026\037\040" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\043\267\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\036\003\025\004\030\005" +
    "\046\006\027\007\272\010\050\013\022\015\047\016\034" +
    "\020\032\022\041\023\023\024\026\037\040\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\036" +
    "\003\025\004\030\005\046\006\027\007\276\010\050\013" +
    "\022\015\047\016\034\020\032\022\041\023\023\024\026" +
    "\037\040\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\043\303\001\001" +
    "\000\002\001\001\000\002\001\001\000\036\003\025\004" +
    "\030\005\046\006\027\007\306\010\050\013\022\015\047" +
    "\016\034\020\032\022\041\023\023\024\026\037\040\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\010\311" +
    "\013\022\015\047\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\043\314\001\001\000\002\001\001\000\002" +
    "\001\001\000\036\003\025\004\030\005\046\006\027\007" +
    "\317\010\050\013\022\015\047\016\034\020\032\022\041" +
    "\023\023\024\026\037\040\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\010\324\013\022\015\047\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\043\327\001\001\000\002\001\001" +
    "\000\002\001\001\000\036\003\025\004\030\005\046\006" +
    "\027\007\332\010\050\013\022\015\047\016\034\020\032" +
    "\022\041\023\023\024\026\037\040\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\010\337\013\022\015\047\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\043\342\001\001\000\002" +
    "\001\001\000\002\001\001\000\036\003\025\004\030\005" +
    "\046\006\027\007\345\010\050\013\022\015\047\016\034" +
    "\020\032\022\041\023\023\024\026\037\040\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\010" +
    "\354\013\022\015\047\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\043\357\001\001\000\002\001\001\000" +
    "\002\001\001\000\036\003\025\004\030\005\046\006\027" +
    "\007\362\010\050\013\022\015\047\016\034\020\032\022" +
    "\041\023\023\024\026\037\040\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\016\375\025\373" +
    "\033\u011c\001\001\000\010\016\375\025\373\033\374\001" +
    "\001\000\002\001\001\000\010\016\375\025\373\033\u011b" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\016\u0103\026\u0102\027\u0101" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\016\u0103\027\u0106\001\001" +
    "\000\002\001\001\000\002\001\001\000\036\003\025\004" +
    "\030\005\046\006\027\007\u0109\010\050\013\022\015\047" +
    "\016\034\020\032\022\041\023\023\024\026\037\040\001" +
    "\001\000\002\001\001\000\004\034\u010d\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\016\u0103\026\u0113\027\u0101\001\001\000\002\001" +
    "\001\000\002\001\001\000\036\003\025\004\030\005\046" +
    "\006\027\007\u0116\010\050\013\022\015\047\016\034\020" +
    "\032\022\041\023\023\024\026\037\040\001\001\000\002" +
    "\001\001\000\004\034\u0118\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\010\u012d\013\022\015\047\001\001\000" +
    "\010\010\u012c\013\022\015\047\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\016\375\025\373" +
    "\033\u0133\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\036\003\025\004\030" +
    "\005\046\006\027\007\u0138\010\050\013\022\015\047\016" +
    "\034\020\032\022\041\023\023\024\026\037\040\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\016\375\025\373\033\u013d\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\016\u0142\032" +
    "\u0140\035\u0141\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\016\u0142\035\u0147\001\001\000" +
    "\002\001\001\000\006\016\u0142\035\u0146\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



     ArrayList gramas = new ArrayList();
    public int cont = 0;
    public int maximo(){
    int a=5;
    return a;
}
    ArrayList errores=new ArrayList();
    public Symbol s;
    @Override
    public void syntax_error (Symbol s){
        if(s.left==-1){
        }else{
                errores.add("Syntax error en la línea: " + (s.left) + " , columna: " +(s.right)+ " con el símbolo = "+(s.value));
    }
}
    @Override
    public void unrecovered_syntax_error(Symbol s){
    if(s.left==-1){
    }else{
        errores.add("Error desconocido, por favor revise la linea: " + (s.left ) + " y columna:  " + (s.right )+ "Con simbolo: "+s.value);
    }    
    }
    public Symbol getS(){
        return this.s;
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // ITERADOR ::= tkn_decrement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ITERADOR",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // ITERADOR ::= tkn_increment 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ITERADOR",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // RETURN ::= error 
            {
              Object RESULT =null;
		parser.errores.add("\tipo de dato de retorno incorrecto");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RETURN",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // RETURN ::= tkn_caracter 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("RETURN",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // RETURN ::= tkn_num 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("RETURN",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // RETURN ::= tkn_id 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("RETURN",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // SCANF ::= tkn_scanf tkn_parentesisiz tkn_cadena tkn_coma tkn_ampersand tkn_id tkn_parentesisde tkn_puntocoma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SCANF",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // CONTADOR ::= tkn_id tkn_decrement tkn_puntocoma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTADOR",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // CONTADOR ::= tkn_id tkn_increment tkn_puntocoma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTADOR",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // TERNARIO ::= CONDICION tkn_ternario BLOQUE tkn_dospuntos BLOQUE tkn_puntocoma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TERNARIO",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // PRINTF ::= tkn_printf tkn_parentesisiz tkn_cadena tkn_parentesisde tkn_puntocoma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRINTF",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // PRINTF ::= tkn_printf tkn_parentesisiz tkn_cadena tkn_coma tkn_id tkn_parentesisde tkn_puntocoma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRINTF",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // TIPO ::= error 
            {
              Object RESULT =null;
		parser.errores.add("\ntipo de dato incorrecto, debe de ser 'int, char, int* o char*");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // TIPO ::= tkn_int 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // TIPO ::= tkn_charp 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // TIPO ::= tkn_intp 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // TIPO ::= tkn_char 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // VALOR ::= tkn_id 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // VALOR ::= tkn_num 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // OPCONDICION ::= error 
            {
              Object RESULT =null;
		parser.errores.add("\noperador relacional incorrecto");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPCONDICION",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // OPCONDICION ::= tkn_igual 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPCONDICION",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // OPCONDICION ::= tkn_oprel 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPCONDICION",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // CONDICIONP ::= VALOR OPCONDICION VALOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICIONP",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // CONDICION ::= CONDICIONP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICION",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // CONDICION ::= tkn_parentesisiz CONDICIONP tkn_parentesisde 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICION",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // CONDICION ::= tkn_parentesisiz CONDICIONP tkn_parentesisde tkn_or CONDICION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICION",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // CONDICION ::= tkn_parentesisiz CONDICIONP tkn_parentesisde tkn_and CONDICION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICION",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // CONDICION ::= CONDICIONP tkn_or CONDICION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICION",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // CONDICION ::= CONDICIONP tkn_and CONDICION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICION",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // BLOQUE ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // BLOQUE ::= LLAMADO BLOQUE 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // BLOQUE ::= SCANF BLOQUE 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // BLOQUE ::= CONTADOR BLOQUE 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // BLOQUE ::= TERNARIO BLOQUE 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // BLOQUE ::= PRINTF BLOQUE 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // BLOQUE ::= DECLARACION BLOQUE 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // BLOQUE ::= IF BLOQUE 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // BLOQUE ::= FOR BLOQUE 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // BLOQUE ::= WHILE BLOQUE 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // WHILE ::= tkn_while tkn_parentesisiz CONDICION error tkn_llaveiz BLOQUE tkn_llaveder 
            {
              Object RESULT =null;
		parser.errores.add("\nbloque while sin parentesis de cierra ')'");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("WHILE",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // WHILE ::= tkn_while tkn_parentesisiz CONDICION tkn_parentesisde tkn_llaveiz BLOQUE tkn_llaveder 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("WHILE",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // FOR ::= tkn_for tkn_parentesisiz tkn_int error tkn_igual tkn_num tkn_puntocoma CONDICION tkn_puntocoma tkn_id ITERADOR tkn_parentesisde tkn_llaveiz BLOQUE tkn_llaveder 
            {
              Object RESULT =null;
		parser.errores.add("\nidentificador ausente en bloque for");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FOR",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-14)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // FOR ::= tkn_for error tkn_int tkn_id tkn_igual tkn_num tkn_puntocoma CONDICION tkn_puntocoma tkn_id ITERADOR tkn_parentesisde tkn_llaveiz BLOQUE tkn_llaveder 
            {
              Object RESULT =null;
		parser.errores.add("\nparentesis de apertura ausente en bloque for '('");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FOR",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-14)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // FOR ::= tkn_for tkn_parentesisiz tkn_int tkn_id tkn_igual tkn_num tkn_puntocoma error tkn_puntocoma tkn_id ITERADOR tkn_parentesisde tkn_llaveiz BLOQUE tkn_llaveder 
            {
              Object RESULT =null;
		parser.errores.add("\nbloque for sin condicion");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FOR",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-14)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // FOR ::= error tkn_parentesisiz tkn_int tkn_id tkn_igual tkn_num tkn_puntocoma CONDICION tkn_puntocoma tkn_id ITERADOR tkn_parentesisde tkn_llaveiz BLOQUE tkn_llaveder 
            {
              Object RESULT =null;
		parser.errores.add("\nbloque for sin palabra reservada: 'for'");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FOR",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-14)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // FOR ::= tkn_for tkn_parentesisiz tkn_int tkn_id tkn_igual tkn_num tkn_puntocoma CONDICION tkn_puntocoma tkn_id error tkn_parentesisde tkn_llaveiz BLOQUE tkn_llaveder 
            {
              Object RESULT =null;
		parser.errores.add("\ncontrol de iteracion no ha sido incrementado o decrementado, se espera un '++ o --'");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FOR",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-14)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // FOR ::= tkn_for tkn_parentesisiz tkn_int tkn_id tkn_igual tkn_num error CONDICION tkn_puntocoma tkn_id ITERADOR tkn_parentesisde tkn_llaveiz BLOQUE tkn_llaveder 
            {
              Object RESULT =null;
		parser.errores.add("\nsimbolo punto y coma ausente ';'");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FOR",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-14)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // FOR ::= tkn_for tkn_parentesisiz tkn_int tkn_id tkn_igual error tkn_puntocoma CONDICION tkn_puntocoma tkn_id ITERADOR tkn_parentesisde tkn_llaveiz BLOQUE tkn_llaveder 
            {
              Object RESULT =null;
		parser.errores.add("\nvariable inicializada incorrectamente, se espera un tipo de dato'int'");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FOR",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-14)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // FOR ::= tkn_for tkn_parentesisiz tkn_int tkn_id error tkn_num tkn_puntocoma CONDICION tkn_puntocoma tkn_id ITERADOR tkn_parentesisde tkn_llaveiz BLOQUE tkn_llaveder 
            {
              Object RESULT =null;
		parser.errores.add("\nno se esta asignando valor correctamente, se espera simbolo de asignación '='");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FOR",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-14)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // FOR ::= tkn_for tkn_parentesisiz tkn_id tkn_igual tkn_num tkn_puntocoma CONDICION tkn_puntocoma tkn_id ITERADOR tkn_parentesisde tkn_llaveiz BLOQUE tkn_llaveder 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FOR",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // FOR ::= tkn_for tkn_parentesisiz tkn_int tkn_id tkn_igual tkn_num tkn_puntocoma CONDICION tkn_puntocoma tkn_id ITERADOR tkn_parentesisde tkn_llaveiz BLOQUE tkn_llaveder 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FOR",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-14)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // ELSE ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ELSE",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // ELSE ::= tkn_else IF 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ELSE",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // ELSE ::= tkn_else tkn_llaveiz BLOQUE tkn_llaveder 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ELSE",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // IF ::= tkn_if tkn_parentesisiz CONDICION tkn_parentesisde error BLOQUE tkn_llaveder ELSE 
            {
              Object RESULT =null;
		parser.errores.add("\n bloque if sin llave de apertura '{'");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IF",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // IF ::= tkn_if tkn_parentesisiz error tkn_parentesisde tkn_llaveiz BLOQUE tkn_llaveder ELSE 
            {
              Object RESULT =null;
		parser.errores.add("\nbloque if sin condición");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IF",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // IF ::= tkn_if tkn_parentesisiz CONDICION tkn_parentesisde tkn_llaveiz BLOQUE tkn_llaveder ELSE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IF",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // PROTOTIPO ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROTOTIPO",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // PROTOTIPO ::= TIPO tkn_id tkn_parentesisiz PROTOPARAMS tkn_parentesisde tkn_puntocoma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROTOTIPO",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // LLAMADO ::= tkn_id tkn_parentesisiz ARGS tkn_parentesisde tkn_puntocoma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LLAMADO",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // LLAMADO ::= TIPO tkn_id tkn_igual tkn_id tkn_parentesisiz ARGS tkn_parentesisde tkn_puntocoma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LLAMADO",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // ARGSPARAMS ::= tkn_id 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARGSPARAMS",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ARGSPARAMS ::= tkn_id tkn_coma ARGSPARAMS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARGSPARAMS",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // FUNCION ::= TIPO error tkn_parentesisiz FUNCIONPARAMS tkn_parentesisde tkn_llaveiz BLOQUE tkn_return RETURN tkn_puntocoma tkn_llaveder 
            {
              Object RESULT =null;
		parser.errores.add("Identificador incorrecto para la función");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCION",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // FUNCION ::= TIPO tkn_id tkn_parentesisiz FUNCIONPARAMS tkn_parentesisde tkn_llaveiz BLOQUE tkn_return RETURN tkn_puntocoma tkn_llaveder 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCION",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // DECLAPARAM ::= TIPO tkn_id 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLAPARAM",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // DECLAPARAM ::= TIPO tkn_id tkn_coma DECLAPARAM 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLAPARAM",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // PARAMS ::= TIPO tkn_id 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMS",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // PARAMS ::= TIPO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMS",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // PARAMS ::= TIPO tkn_coma PARAMS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMS",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // PARAMS ::= TIPO tkn_id tkn_coma PARAMS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMS",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // ARGS ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARGS",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // ARGS ::= ARGSPARAMS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARGS",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // PROTOPARAMS ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROTOPARAMS",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // PROTOPARAMS ::= PARAMS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROTOPARAMS",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // FUNCIONPARAMS ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCIONPARAMS",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // FUNCIONPARAMS ::= DECLAPARAM 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCIONPARAMS",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // INICIO ::= MAIN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // INICIO ::= PROTOTIPO INICIO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // FUNCIONES ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCIONES",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // FUNCIONES ::= FUNCION FUNCIONES 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCIONES",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // IDINT ::= error 
            {
              Object RESULT =null;
		parser.errores.add("Identificador mas declarado");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IDINT",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // IDINT ::= tkn_id tkn_igual tkn_caracter 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IDINT",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // IDINT ::= tkn_id tkn_igual tkn_caracter tkn_coma IDINT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IDINT",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // IDINT ::= tkn_id tkn_igual tkn_num 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IDINT",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // IDINT ::= tkn_id tkn_igual tkn_num tkn_coma IDINT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IDINT",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // IDINT ::= tkn_id 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IDINT",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // IDINT ::= tkn_id tkn_coma IDINT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IDINT",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // DECLARACION ::= TIPO IDINT tkn_puntocoma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // MAIN ::= tkn_int tkn_main tkn_parentesisiz tkn_parentesisde tkn_llaveiz BLOQUE tkn_return tkn_num tkn_puntocoma error FUNCIONES 
            {
              Object RESULT =null;
		parser.errores.add("\n llave de cierre ausente '}' en el main");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MAIN",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // MAIN ::= tkn_int tkn_main tkn_parentesisiz tkn_parentesisde error BLOQUE tkn_return tkn_num tkn_puntocoma tkn_llaveder FUNCIONES 
            {
              Object RESULT =null;
		parser.errores.add("\n llave de apertura ausente '{' en el main");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MAIN",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // MAIN ::= error tkn_main tkn_parentesisiz tkn_parentesisde tkn_llaveiz BLOQUE tkn_return tkn_num tkn_puntocoma tkn_llaveder FUNCIONES 
            {
              Object RESULT =null;
		parser.errores.add("\ntipo de dato int ausente en la función main");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MAIN",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // MAIN ::= tkn_int tkn_main tkn_parentesisiz tkn_parentesisde tkn_llaveiz BLOQUE tkn_return tkn_num tkn_puntocoma tkn_llaveder FUNCIONES 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("MAIN",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

