
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun Sep 18 21:47:42 CST 2022
//----------------------------------------------------

package Compiladorcito;

import java_cup.runtime.*;
import java.util.ArrayList;
import java.util.*;
import java.io.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun Sep 18 21:47:42 CST 2022
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\165\000\002\002\004\000\002\025\003\000\002\030" +
    "\004\000\002\030\004\000\002\030\004\000\002\030\002" +
    "\000\002\014\004\000\002\013\011\000\002\013\015\000" +
    "\002\013\006\000\002\013\011\000\002\013\011\000\002" +
    "\013\011\000\002\032\006\000\002\032\006\000\002\031" +
    "\004\000\002\031\004\000\002\023\005\000\002\023\004" +
    "\000\002\023\005\000\002\024\007\000\002\024\005\000" +
    "\002\024\005\000\002\024\005\000\002\024\005\000\002" +
    "\024\003\000\002\024\005\000\002\024\007\000\002\024" +
    "\005\000\002\024\003\000\002\024\010\000\002\024\010" +
    "\000\002\024\010\000\002\024\010\000\002\024\006\000" +
    "\002\024\006\000\002\021\004\000\002\015\005\000\002" +
    "\015\005\000\002\015\003\000\002\015\003\000\002\015" +
    "\002\000\002\015\005\000\002\015\005\000\002\034\011" +
    "\000\002\003\012\000\002\003\012\000\002\003\012\000" +
    "\002\003\012\000\002\006\006\000\002\006\004\000\002" +
    "\006\006\000\002\006\002\000\002\004\017\000\002\004" +
    "\017\000\002\004\017\000\002\004\017\000\002\004\017" +
    "\000\002\002\011\000\002\002\011\000\002\002\011\000" +
    "\002\002\011\000\002\027\011\000\002\027\007\000\002" +
    "\027\011\000\002\027\011\000\002\027\011\000\002\027" +
    "\011\000\002\027\011\000\002\027\011\000\002\012\012" +
    "\000\002\012\012\000\002\012\012\000\002\012\012\000" +
    "\002\012\012\000\002\012\012\000\002\026\004\000\002" +
    "\026\004\000\002\026\004\000\002\026\004\000\002\026" +
    "\004\000\002\026\004\000\002\026\004\000\002\026\002" +
    "\000\002\022\003\000\002\022\003\000\002\022\005\000" +
    "\002\022\005\000\002\005\005\000\002\005\005\000\002" +
    "\005\007\000\002\005\007\000\002\005\005\000\002\005" +
    "\003\000\002\005\003\000\002\005\005\000\002\007\005" +
    "\000\002\010\003\000\002\010\003\000\002\010\003\000" +
    "\002\010\003\000\002\033\004\000\002\033\004\000\002" +
    "\020\005\000\002\020\005\000\002\020\005\000\002\020" +
    "\005\000\002\020\003\000\002\020\003\000\002\020\003" +
    "\000\002\020\003\000\002\017\003\000\002\017\002\000" +
    "\002\016\005\000\002\016\003\000\002\011\005\000\002" +
    "\011\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u014a\000\016\002\ufffc\003\015\012\004\033\022\034" +
    "\016\035\007\001\002\000\012\003\uff9d\017\uff9d\035\uff9d" +
    "\041\uff9d\001\002\000\004\036\u014c\001\002\000\004\002" +
    "\000\001\002\000\014\003\u014b\010\206\016\207\036\uffe8" +
    "\041\210\001\002\000\004\002\u014a\001\002\000\016\002" +
    "\ufffc\003\015\012\004\033\022\034\016\035\007\001\002" +
    "\000\016\002\ufffc\003\015\012\004\033\022\034\016\035" +
    "\007\001\002\000\010\003\u0137\020\u0139\036\u0138\001\002" +
    "\000\014\003\u0130\010\366\016\u0131\036\uffe4\041\364\001" +
    "\002\000\004\035\u012f\001\002\000\014\003\uffa0\005\u012e" +
    "\017\uffa0\035\uffa0\041\uffa0\001\002\000\004\035\034\001" +
    "\002\000\016\002\ufffc\003\015\012\004\033\022\034\016" +
    "\035\007\001\002\000\012\003\uff9f\017\uff9f\035\uff9f\041" +
    "\uff9f\001\002\000\010\005\023\011\024\035\uff9e\001\002" +
    "\000\012\003\uff9c\017\uff9c\035\uff9c\041\uff9c\001\002\000" +
    "\004\016\025\001\002\000\014\003\015\012\004\017\uffd8" +
    "\033\027\034\016\001\002\000\010\003\u012a\017\uffda\041" +
    "\u0129\001\002\000\014\003\uff9e\005\023\017\uff9e\035\uff9e" +
    "\041\uff9e\001\002\000\004\017\037\001\002\000\012\003" +
    "\033\017\uffd9\035\034\041\032\001\002\000\014\003\015" +
    "\012\004\017\uffd8\033\027\034\016\001\002\000\014\003" +
    "\015\012\004\017\uffd8\033\027\034\016\001\002\000\016" +
    "\003\ufff2\010\ufff2\016\ufff2\017\ufff2\036\ufff2\041\ufff2\001" +
    "\002\000\004\017\uffd7\001\002\000\004\017\uffdc\001\002" +
    "\000\004\020\040\001\002\000\030\003\015\012\004\013" +
    "\053\014\055\024\052\025\uffae\026\042\027\056\033\027" +
    "\034\016\035\054\001\002\000\032\003\015\012\004\013" +
    "\053\014\055\021\uffae\024\052\025\uffae\026\042\027\056" +
    "\033\027\034\016\035\054\001\002\000\006\003\u010b\016" +
    "\u010c\001\002\000\032\003\015\012\004\013\053\014\055" +
    "\021\uffae\024\052\025\uffae\026\042\027\056\033\027\034" +
    "\016\035\054\001\002\000\032\003\015\012\004\013\053" +
    "\014\055\021\uffae\024\052\025\uffae\026\042\027\056\033" +
    "\027\034\016\035\054\001\002\000\032\003\015\012\004" +
    "\013\053\014\055\021\uffae\024\052\025\uffae\026\042\027" +
    "\056\033\027\034\016\035\054\001\002\000\004\025\u0104" +
    "\001\002\000\032\003\015\012\004\013\053\014\055\021" +
    "\uffae\024\052\025\uffae\026\042\027\056\033\027\034\016" +
    "\035\054\001\002\000\032\003\015\012\004\013\053\014" +
    "\055\021\uffae\024\052\025\uffae\026\042\027\056\033\027" +
    "\034\016\035\054\001\002\000\012\003\365\010\366\036" +
    "\uffe4\041\364\001\002\000\006\003\301\016\302\001\002" +
    "\000\006\003\242\016\243\001\002\000\024\003\205\004" +
    "\211\005\203\010\206\016\207\030\202\031\204\036\uffe8" +
    "\041\210\001\002\000\006\003\116\016\117\001\002\000" +
    "\006\003\061\016\062\001\002\000\032\003\015\012\004" +
    "\013\053\014\055\021\uffae\024\052\025\uffae\026\042\027" +
    "\056\033\027\034\016\035\054\001\002\000\006\021\uffb4" +
    "\025\uffb4\001\002\000\004\043\110\001\002\000\006\003" +
    "\063\043\064\001\002\000\004\041\103\001\002\000\004" +
    "\041\065\001\002\000\006\003\066\042\067\001\002\000" +
    "\004\035\100\001\002\000\006\003\070\035\071\001\002" +
    "\000\004\017\076\001\002\000\006\003\072\017\073\001" +
    "\002\000\004\036\075\001\002\000\004\036\074\001\002" +
    "\000\032\003\uffbb\012\uffbb\013\uffbb\014\uffbb\021\uffbb\024" +
    "\uffbb\025\uffbb\026\uffbb\027\uffbb\033\uffbb\034\uffbb\035\uffbb" +
    "\001\002\000\032\003\uffb8\012\uffb8\013\uffb8\014\uffb8\021" +
    "\uffb8\024\uffb8\025\uffb8\026\uffb8\027\uffb8\033\uffb8\034\uffb8" +
    "\035\uffb8\001\002\000\004\036\077\001\002\000\032\003" +
    "\uffb9\012\uffb9\013\uffb9\014\uffb9\021\uffb9\024\uffb9\025\uffb9" +
    "\026\uffb9\027\uffb9\033\uffb9\034\uffb9\035\uffb9\001\002\000" +
    "\004\017\101\001\002\000\004\036\102\001\002\000\032" +
    "\003\uffba\012\uffba\013\uffba\014\uffba\021\uffba\024\uffba\025" +
    "\uffba\026\uffba\027\uffba\033\uffba\034\uffba\035\uffba\001\002" +
    "\000\004\042\104\001\002\000\004\035\105\001\002\000" +
    "\004\017\106\001\002\000\004\036\107\001\002\000\032" +
    "\003\uffb6\012\uffb6\013\uffb6\014\uffb6\021\uffb6\024\uffb6\025" +
    "\uffb6\026\uffb6\027\uffb6\033\uffb6\034\uffb6\035\uffb6\001\002" +
    "\000\004\041\111\001\002\000\004\042\112\001\002\000" +
    "\004\035\113\001\002\000\004\017\114\001\002\000\004" +
    "\036\115\001\002\000\032\003\uffb7\012\uffb7\013\uffb7\014" +
    "\uffb7\021\uffb7\024\uffb7\025\uffb7\026\uffb7\027\uffb7\033\uffb7" +
    "\034\uffb7\035\uffb7\001\002\000\014\003\124\016\126\035" +
    "\125\040\127\044\121\001\002\000\014\003\124\016\126" +
    "\035\125\040\127\044\121\001\002\000\014\003\uffa4\017" +
    "\uffa4\022\171\023\170\036\uffa4\001\002\000\026\003\uff94" +
    "\004\uff94\005\uff94\007\uff94\010\uff94\017\uff94\022\uff94\023" +
    "\uff94\036\uff94\041\uff94\001\002\000\006\003\155\017\156" +
    "\001\002\000\012\004\140\005\136\007\135\010\144\001" +
    "\002\000\022\003\uffa3\004\uff93\005\uff93\007\uff93\010\uff93" +
    "\017\uffa3\022\153\036\uffa3\001\002\000\026\003\uff96\004" +
    "\uff96\005\uff96\007\uff96\010\uff96\017\uff96\022\uff96\023\uff96" +
    "\036\uff96\041\uff96\001\002\000\014\003\132\016\133\035" +
    "\125\040\127\044\121\001\002\000\026\003\uff95\004\uff95" +
    "\005\uff95\007\uff95\010\uff95\017\uff95\022\uff95\023\uff95\036" +
    "\uff95\041\uff95\001\002\000\004\017\146\001\002\000\014" +
    "\004\140\005\136\007\135\010\144\017\137\001\002\000" +
    "\026\003\uff93\004\uff93\005\uff93\007\uff93\010\uff93\017\uff93" +
    "\022\uff93\023\uff93\036\uff93\041\uff93\001\002\000\014\003" +
    "\132\016\133\035\125\040\127\044\121\001\002\000\012" +
    "\004\140\005\136\007\135\017\137\001\002\000\014\003" +
    "\132\016\133\035\125\040\127\044\121\001\002\000\014" +
    "\003\132\016\133\035\125\040\127\044\121\001\002\000" +
    "\026\003\uff97\004\uff97\005\uff97\007\uff97\010\uff97\017\uff97" +
    "\022\uff97\023\uff97\036\uff97\041\uff97\001\002\000\014\003" +
    "\132\016\133\035\125\040\127\044\121\001\002\000\026" +
    "\003\uff9a\004\uff9a\005\136\007\135\010\uff9a\017\uff9a\022" +
    "\uff9a\023\uff9a\036\uff9a\041\uff9a\001\002\000\026\003\uff99" +
    "\004\uff99\005\uff99\007\uff99\010\uff99\017\uff99\022\uff99\023" +
    "\uff99\036\uff99\041\uff99\001\002\000\026\003\uff98\004\uff98" +
    "\005\uff98\007\uff98\010\uff98\017\uff98\022\uff98\023\uff98\036" +
    "\uff98\041\uff98\001\002\000\014\003\132\016\133\035\125" +
    "\040\127\044\121\001\002\000\022\003\uffa1\004\140\005" +
    "\136\007\135\017\uffa1\022\uffa1\023\uffa1\036\uffa1\001\002" +
    "\000\014\003\uffa5\017\uffa5\022\150\023\147\036\uffa5\001" +
    "\002\000\014\003\124\016\126\035\125\040\127\044\121" +
    "\001\002\000\014\003\124\016\126\035\125\040\127\044" +
    "\121\001\002\000\010\003\uffa7\017\uffa7\036\uffa7\001\002" +
    "\000\010\003\uffa6\017\uffa6\036\uffa6\001\002\000\014\003" +
    "\124\016\126\035\125\040\127\044\121\001\002\000\010" +
    "\003\uffa2\017\uffa2\036\uffa2\001\002\000\004\020\165\001" +
    "\002\000\006\003\157\020\160\001\002\000\030\003\015" +
    "\012\004\013\053\014\055\021\uffae\024\052\026\042\027" +
    "\056\033\027\034\016\035\054\001\002\000\030\003\015" +
    "\012\004\013\053\014\055\021\uffae\024\052\026\042\027" +
    "\056\033\027\034\016\035\054\001\002\000\004\021\162" +
    "\001\002\000\032\003\uffc7\012\uffc7\013\uffc7\014\uffc7\021" +
    "\uffc7\024\uffc7\025\uffc7\026\uffc7\027\uffc7\033\uffc7\034\uffc7" +
    "\035\uffc7\001\002\000\004\021\164\001\002\000\032\003" +
    "\uffc6\012\uffc6\013\uffc6\014\uffc6\021\uffc6\024\uffc6\025\uffc6" +
    "\026\uffc6\027\uffc6\033\uffc6\034\uffc6\035\uffc6\001\002\000" +
    "\030\003\015\012\004\013\053\014\055\021\uffae\024\052" +
    "\026\042\027\056\033\027\034\016\035\054\001\002\000" +
    "\004\021\167\001\002\000\032\003\uffc5\012\uffc5\013\uffc5" +
    "\014\uffc5\021\uffc5\024\uffc5\025\uffc5\026\uffc5\027\uffc5\033" +
    "\uffc5\034\uffc5\035\uffc5\001\002\000\014\003\124\016\126" +
    "\035\125\040\127\044\121\001\002\000\014\003\124\016" +
    "\126\035\125\040\127\044\121\001\002\000\010\003\uffa9" +
    "\017\uffa9\036\uffa9\001\002\000\010\003\uffa8\017\uffa8\036" +
    "\uffa8\001\002\000\004\017\175\001\002\000\004\020\176" +
    "\001\002\000\030\003\015\012\004\013\053\014\055\021" +
    "\uffae\024\052\026\042\027\056\033\027\034\016\035\054" +
    "\001\002\000\004\021\200\001\002\000\032\003\uffc4\012" +
    "\uffc4\013\uffc4\014\uffc4\021\uffc4\024\uffc4\025\uffc4\026\uffc4" +
    "\027\uffc4\033\uffc4\034\uffc4\035\uffc4\001\002\000\004\036" +
    "\241\001\002\000\010\003\uffad\017\uffad\036\uffad\001\002" +
    "\000\004\010\237\001\002\000\010\003\uffac\017\uffac\036" +
    "\uffac\001\002\000\016\003\015\012\004\033\027\034\016" +
    "\035\007\036\236\001\002\000\014\003\132\016\133\035" +
    "\225\040\127\044\121\001\002\000\010\003\uff91\017\uff91" +
    "\035\216\001\002\000\014\003\015\012\004\033\027\034" +
    "\016\035\007\001\002\000\004\010\212\001\002\000\014" +
    "\003\132\016\133\035\125\040\127\044\121\001\002\000" +
    "\016\003\uffab\004\140\005\136\007\135\017\uffab\036\uffab" +
    "\001\002\000\004\036\uffe9\001\002\000\006\003\uff92\017" +
    "\uff92\001\002\000\010\003\uff8f\017\uff8f\041\222\001\002" +
    "\000\006\003\220\017\221\001\002\000\004\036\uffde\001" +
    "\002\000\004\036\uffdf\001\002\000\004\035\216\001\002" +
    "\000\006\003\uff90\017\uff90\001\002\000\014\004\140\005" +
    "\136\007\135\036\uffe5\041\233\001\002\000\016\004\uff96" +
    "\005\uff96\007\uff96\016\226\036\uff96\041\uff96\001\002\000" +
    "\010\003\227\017\uff91\035\216\001\002\000\004\017\232" +
    "\001\002\000\004\017\231\001\002\000\004\036\uffe2\001" +
    "\002\000\004\036\uffe0\001\002\000\014\003\015\012\004" +
    "\033\027\034\016\035\007\001\002\000\004\036\uffe6\001" +
    "\002\000\004\036\uffe7\001\002\000\032\003\uff8d\012\uff8d" +
    "\013\uff8d\014\uff8d\021\uff8d\024\uff8d\025\uff8d\026\uff8d\027" +
    "\uff8d\033\uff8d\034\uff8d\035\uff8d\001\002\000\014\003\132" +
    "\016\133\035\125\040\127\044\121\001\002\000\016\003" +
    "\uffaa\004\140\005\136\007\135\017\uffaa\036\uffaa\001\002" +
    "\000\032\003\uff8e\012\uff8e\013\uff8e\014\uff8e\021\uff8e\024" +
    "\uff8e\025\uff8e\026\uff8e\027\uff8e\033\uff8e\034\uff8e\035\uff8e" +
    "\001\002\000\014\003\124\016\126\035\125\040\127\044" +
    "\121\001\002\000\014\003\124\016\126\035\125\040\127" +
    "\044\121\001\002\000\006\003\245\017\246\001\002\000" +
    "\004\020\267\001\002\000\006\003\247\020\250\001\002" +
    "\000\030\003\015\012\004\013\053\014\055\021\uffae\024" +
    "\052\026\042\027\056\033\027\034\016\035\054\001\002" +
    "\000\030\003\015\012\004\013\053\014\055\021\uffae\024" +
    "\052\026\042\027\056\033\027\034\016\035\054\001\002" +
    "\000\004\021\252\001\002\000\034\003\uffcd\012\uffcd\013" +
    "\uffcd\014\uffcd\015\254\021\uffcd\024\uffcd\025\uffcd\026\uffcd" +
    "\027\uffcd\033\uffcd\034\uffcd\035\uffcd\001\002\000\032\003" +
    "\uffd4\012\uffd4\013\uffd4\014\uffd4\021\uffd4\024\uffd4\025\uffd4" +
    "\026\uffd4\027\uffd4\033\uffd4\034\uffd4\035\uffd4\001\002\000" +
    "\010\003\255\013\053\020\257\001\002\000\030\003\015" +
    "\012\004\013\053\014\055\021\uffae\024\052\026\042\027" +
    "\056\033\027\034\016\035\054\001\002\000\032\003\uffcf" +
    "\012\uffcf\013\uffcf\014\uffcf\021\uffcf\024\uffcf\025\uffcf\026" +
    "\uffcf\027\uffcf\033\uffcf\034\uffcf\035\uffcf\001\002\000\030" +
    "\003\015\012\004\013\053\014\055\021\uffae\024\052\026" +
    "\042\027\056\033\027\034\016\035\054\001\002\000\004" +
    "\021\261\001\002\000\032\003\uffd0\012\uffd0\013\uffd0\014" +
    "\uffd0\021\uffd0\024\uffd0\025\uffd0\026\uffd0\027\uffd0\033\uffd0" +
    "\034\uffd0\035\uffd0\001\002\000\004\021\263\001\002\000" +
    "\032\003\uffce\012\uffce\013\uffce\014\uffce\021\uffce\024\uffce" +
    "\025\uffce\026\uffce\027\uffce\033\uffce\034\uffce\035\uffce\001" +
    "\002\000\004\021\265\001\002\000\034\003\uffcd\012\uffcd" +
    "\013\uffcd\014\uffcd\015\254\021\uffcd\024\uffcd\025\uffcd\026" +
    "\uffcd\027\uffcd\033\uffcd\034\uffcd\035\uffcd\001\002\000\032" +
    "\003\uffd3\012\uffd3\013\uffd3\014\uffd3\021\uffd3\024\uffd3\025" +
    "\uffd3\026\uffd3\027\uffd3\033\uffd3\034\uffd3\035\uffd3\001\002" +
    "\000\030\003\015\012\004\013\053\014\055\021\uffae\024" +
    "\052\026\042\027\056\033\027\034\016\035\054\001\002" +
    "\000\004\021\271\001\002\000\034\003\uffcd\012\uffcd\013" +
    "\uffcd\014\uffcd\015\254\021\uffcd\024\uffcd\025\uffcd\026\uffcd" +
    "\027\uffcd\033\uffcd\034\uffcd\035\uffcd\001\002\000\032\003" +
    "\uffd1\012\uffd1\013\uffd1\014\uffd1\021\uffd1\024\uffd1\025\uffd1" +
    "\026\uffd1\027\uffd1\033\uffd1\034\uffd1\035\uffd1\001\002\000" +
    "\004\017\274\001\002\000\004\020\275\001\002\000\030" +
    "\003\015\012\004\013\053\014\055\021\uffae\024\052\026" +
    "\042\027\056\033\027\034\016\035\054\001\002\000\004" +
    "\021\277\001\002\000\034\003\uffcd\012\uffcd\013\uffcd\014" +
    "\uffcd\015\254\021\uffcd\024\uffcd\025\uffcd\026\uffcd\027\uffcd" +
    "\033\uffcd\034\uffcd\035\uffcd\001\002\000\032\003\uffd2\012" +
    "\uffd2\013\uffd2\014\uffd2\021\uffd2\024\uffd2\025\uffd2\026\uffd2" +
    "\027\uffd2\033\uffd2\034\uffd2\035\uffd2\001\002\000\012\012" +
    "\004\033\027\034\016\035\305\001\002\000\014\003\304" +
    "\012\004\033\027\034\016\035\305\001\002\000\014\003" +
    "\132\016\133\035\125\040\127\044\121\001\002\000\014" +
    "\003\132\016\133\035\125\040\127\044\121\001\002\000" +
    "\004\010\313\001\002\000\006\003\307\035\310\001\002" +
    "\000\004\010\312\001\002\000\004\010\311\001\002\000" +
    "\014\003\ufff0\016\ufff0\035\ufff0\040\ufff0\044\ufff0\001\002" +
    "\000\014\003\uffee\016\uffee\035\uffee\040\uffee\044\uffee\001" +
    "\002\000\014\003\uffef\016\uffef\035\uffef\040\uffef\044\uffef" +
    "\001\002\000\012\004\140\005\136\007\135\036\315\001" +
    "\002\000\014\003\124\016\126\035\125\040\127\044\121" +
    "\001\002\000\004\036\317\001\002\000\004\035\320\001" +
    "\002\000\012\004\211\005\203\030\202\031\204\001\002" +
    "\000\004\017\322\001\002\000\004\020\323\001\002\000" +
    "\030\003\015\012\004\013\053\014\055\021\uffae\024\052" +
    "\026\042\027\056\033\027\034\016\035\054\001\002\000" +
    "\004\021\325\001\002\000\032\003\uffc9\012\uffc9\013\uffc9" +
    "\014\uffc9\021\uffc9\024\uffc9\025\uffc9\026\uffc9\027\uffc9\033" +
    "\uffc9\034\uffc9\035\uffc9\001\002\000\012\004\140\005\136" +
    "\007\135\036\327\001\002\000\014\003\124\016\126\035" +
    "\125\040\127\044\121\001\002\000\004\036\331\001\002" +
    "\000\004\035\332\001\002\000\014\003\333\004\211\005" +
    "\203\030\202\031\204\001\002\000\004\017\345\001\002" +
    "\000\006\003\335\017\336\001\002\000\004\020\342\001" +
    "\002\000\004\020\337\001\002\000\030\003\015\012\004" +
    "\013\053\014\055\021\uffae\024\052\026\042\027\056\033" +
    "\027\034\016\035\054\001\002\000\004\021\341\001\002" +
    "\000\032\003\uffcc\012\uffcc\013\uffcc\014\uffcc\021\uffcc\024" +
    "\uffcc\025\uffcc\026\uffcc\027\uffcc\033\uffcc\034\uffcc\035\uffcc" +
    "\001\002\000\030\003\015\012\004\013\053\014\055\021" +
    "\uffae\024\052\026\042\027\056\033\027\034\016\035\054" +
    "\001\002\000\004\021\344\001\002\000\032\003\uffca\012" +
    "\uffca\013\uffca\014\uffca\021\uffca\024\uffca\025\uffca\026\uffca" +
    "\027\uffca\033\uffca\034\uffca\035\uffca\001\002\000\004\020" +
    "\346\001\002\000\030\003\015\012\004\013\053\014\055" +
    "\021\uffae\024\052\026\042\027\056\033\027\034\016\035" +
    "\054\001\002\000\004\021\350\001\002\000\032\003\uffc8" +
    "\012\uffc8\013\uffc8\014\uffc8\021\uffc8\024\uffc8\025\uffc8\026" +
    "\uffc8\027\uffc8\033\uffc8\034\uffc8\035\uffc8\001\002\000\014" +
    "\003\132\016\133\035\125\040\127\044\121\001\002\000" +
    "\012\004\140\005\136\007\135\036\353\001\002\000\014" +
    "\003\124\016\126\035\125\040\127\044\121\001\002\000" +
    "\004\036\355\001\002\000\004\035\356\001\002\000\012" +
    "\004\211\005\203\030\202\031\204\001\002\000\004\017" +
    "\360\001\002\000\004\020\361\001\002\000\030\003\015" +
    "\012\004\013\053\014\055\021\uffae\024\052\026\042\027" +
    "\056\033\027\034\016\035\054\001\002\000\004\021\363" +
    "\001\002\000\032\003\uffcb\012\uffcb\013\uffcb\014\uffcb\021" +
    "\uffcb\024\uffcb\025\uffcb\026\uffcb\027\uffcb\033\uffcb\034\uffcb" +
    "\035\uffcb\001\002\000\014\003\015\012\004\033\027\034" +
    "\016\035\007\001\002\000\014\003\132\016\133\035\125" +
    "\040\127\044\121\001\002\000\014\003\132\016\133\035" +
    "\370\040\127\044\121\001\002\000\014\004\140\005\136" +
    "\007\135\036\uffec\041\376\001\002\000\016\004\uff96\005" +
    "\uff96\007\uff96\016\371\036\uff96\041\uff96\001\002\000\010" +
    "\003\372\017\uff91\035\216\001\002\000\004\017\375\001" +
    "\002\000\004\017\374\001\002\000\004\036\uffe3\001\002" +
    "\000\004\036\uffe1\001\002\000\014\003\015\012\004\033" +
    "\027\034\016\035\007\001\002\000\004\036\uffed\001\002" +
    "\000\012\004\140\005\136\007\135\036\uffea\001\002\000" +
    "\004\036\uffeb\001\002\000\006\021\uffb0\025\uffb0\001\002" +
    "\000\006\021\uffb2\025\uffb2\001\002\000\014\003\132\016" +
    "\133\035\125\040\127\044\121\001\002\000\012\004\140" +
    "\005\136\007\135\036\u0106\001\002\000\004\021\u0107\001" +
    "\002\000\016\002\ufff9\003\ufff9\012\ufff9\033\ufff9\034\ufff9" +
    "\035\ufff9\001\002\000\006\021\uffb5\025\uffb5\001\002\000" +
    "\006\021\uffb1\025\uffb1\001\002\000\006\021\uffb3\025\uffb3" +
    "\001\002\000\004\043\u0123\001\002\000\006\003\u010d\043" +
    "\u010e\001\002\000\004\041\u011f\001\002\000\010\003\u0110" +
    "\017\u0111\041\u010f\001\002\000\006\003\u0116\035\u0117\001" +
    "\002\000\004\035\u0113\001\002\000\004\036\u0112\001\002" +
    "\000\032\003\uffc2\012\uffc2\013\uffc2\014\uffc2\021\uffc2\024" +
    "\uffc2\025\uffc2\026\uffc2\027\uffc2\033\uffc2\034\uffc2\035\uffc2" +
    "\001\002\000\004\017\u0114\001\002\000\004\036\u0115\001" +
    "\002\000\032\003\uffc1\012\uffc1\013\uffc1\014\uffc1\021\uffc1" +
    "\024\uffc1\025\uffc1\026\uffc1\027\uffc1\033\uffc1\034\uffc1\035" +
    "\uffc1\001\002\000\004\017\u011d\001\002\000\006\003\u0118" +
    "\017\u0119\001\002\000\004\036\u011c\001\002\000\006\003" +
    "\u011a\036\u011b\001\002\000\032\003\uffbe\012\uffbe\013\uffbe" +
    "\014\uffbe\021\uffbe\024\uffbe\025\uffbe\026\uffbe\027\uffbe\033" +
    "\uffbe\034\uffbe\035\uffbe\001\002\000\032\003\uffc3\012\uffc3" +
    "\013\uffc3\014\uffc3\021\uffc3\024\uffc3\025\uffc3\026\uffc3\027" +
    "\uffc3\033\uffc3\034\uffc3\035\uffc3\001\002\000\032\003\uffbf" +
    "\012\uffbf\013\uffbf\014\uffbf\021\uffbf\024\uffbf\025\uffbf\026" +
    "\uffbf\027\uffbf\033\uffbf\034\uffbf\035\uffbf\001\002\000\004" +
    "\036\u011e\001\002\000\032\003\uffc0\012\uffc0\013\uffc0\014" +
    "\uffc0\021\uffc0\024\uffc0\025\uffc0\026\uffc0\027\uffc0\033\uffc0" +
    "\034\uffc0\035\uffc0\001\002\000\004\035\u0120\001\002\000" +
    "\004\017\u0121\001\002\000\004\036\u0122\001\002\000\032" +
    "\003\uffbc\012\uffbc\013\uffbc\014\uffbc\021\uffbc\024\uffbc\025" +
    "\uffbc\026\uffbc\027\uffbc\033\uffbc\034\uffbc\035\uffbc\001\002" +
    "\000\004\041\u0124\001\002\000\004\035\u0125\001\002\000" +
    "\004\017\u0126\001\002\000\004\036\u0127\001\002\000\032" +
    "\003\uffbd\012\uffbd\013\uffbd\014\uffbd\021\uffbd\024\uffbd\025" +
    "\uffbd\026\uffbd\027\uffbd\033\uffbd\034\uffbd\035\uffbd\001\002" +
    "\000\006\021\uffaf\025\uffaf\001\002\000\014\003\015\012" +
    "\004\017\uffd8\033\027\034\016\001\002\000\014\003\015" +
    "\012\004\017\uffd8\033\027\034\016\001\002\000\004\017" +
    "\uffd6\001\002\000\004\017\uffdb\001\002\000\004\002\ufffe" +
    "\001\002\000\012\003\uff9b\017\uff9b\035\uff9b\041\uff9b\001" +
    "\002\000\016\003\ufff1\010\ufff1\016\ufff1\017\ufff1\036\ufff1" +
    "\041\ufff1\001\002\000\024\003\u0135\012\004\016\133\017" +
    "\uffd8\033\027\034\016\035\125\040\127\044\121\001\002" +
    "\000\014\003\015\012\004\017\uffd8\033\027\034\016\001" +
    "\002\000\004\017\u0133\001\002\000\010\003\ufff4\020\ufff4" +
    "\036\ufff4\001\002\000\004\017\u0136\001\002\000\014\004" +
    "\uff93\005\uff93\007\uff93\035\u012f\036\uff93\001\002\000\010" +
    "\003\ufff3\020\ufff3\036\ufff3\001\002\000\030\003\015\012" +
    "\004\013\053\014\055\024\052\025\uffae\026\042\027\056" +
    "\033\027\034\016\035\054\001\002\000\016\002\ufffb\003" +
    "\ufffb\012\ufffb\033\ufffb\034\ufffb\035\ufffb\001\002\000\032" +
    "\003\015\012\004\013\053\014\055\021\uffae\024\052\025" +
    "\uffae\026\042\027\056\033\027\034\016\035\054\001\002" +
    "\000\006\021\u013c\025\u013b\001\002\000\014\003\132\016" +
    "\133\035\125\040\127\044\121\001\002\000\016\002\ufff8" +
    "\003\ufff8\012\ufff8\033\ufff8\034\ufff8\035\ufff8\001\002\000" +
    "\014\003\u013e\004\140\005\136\007\135\036\u013f\001\002" +
    "\000\004\020\u0142\001\002\000\006\003\u0140\021\u0141\001" +
    "\002\000\016\002\ufff7\003\ufff7\012\ufff7\033\ufff7\034\ufff7" +
    "\035\ufff7\001\002\000\016\002\ufffa\003\ufffa\012\ufffa\033" +
    "\ufffa\034\ufffa\035\ufffa\001\002\000\016\002\ufff6\003\ufff6" +
    "\012\ufff6\033\ufff6\034\ufff6\035\ufff6\001\002\000\004\025" +
    "\u0144\001\002\000\014\003\132\016\133\035\125\040\127" +
    "\044\121\001\002\000\012\004\140\005\136\007\135\036" +
    "\u0146\001\002\000\004\020\u0147\001\002\000\016\002\ufff5" +
    "\003\ufff5\012\ufff5\033\ufff5\034\ufff5\035\ufff5\001\002\000" +
    "\004\002\ufffd\001\002\000\004\002\uffff\001\002\000\004" +
    "\002\001\001\002\000\014\003\015\012\004\033\027\034" +
    "\016\035\007\001\002\000\034\002\uffdd\003\uffdd\012\uffdd" +
    "\013\uffdd\014\uffdd\021\uffdd\024\uffdd\025\uffdd\026\uffdd\027" +
    "\uffdd\033\uffdd\034\uffdd\035\uffdd\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u014a\000\026\010\016\013\017\014\010\021\011\024" +
    "\004\025\007\030\005\031\013\032\012\033\020\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\010\016\013\017" +
    "\014\010\021\011\024\004\030\u0148\031\013\032\012\033" +
    "\020\001\001\000\024\010\016\013\017\014\010\021\011" +
    "\024\004\030\u0147\031\013\032\012\033\020\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\010\016\013\017\014" +
    "\010\021\011\024\004\030\u012c\031\013\032\012\033\020" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\010\030\015\027\031\025" +
    "\033\020\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\010\030\015\035" +
    "\031\025\033\020\001\001\000\012\010\030\015\034\031" +
    "\025\033\020\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\032\002\042\003" +
    "\044\004\056\010\016\011\040\012\043\021\046\024\004" +
    "\026\045\027\047\031\050\033\020\001\001\000\032\002" +
    "\042\003\044\004\056\010\016\011\040\012\043\021\046" +
    "\024\004\026\u0127\027\047\031\050\033\020\001\001\000" +
    "\002\001\001\000\032\002\042\003\044\004\056\010\016" +
    "\011\040\012\043\021\046\024\004\026\u0109\027\047\031" +
    "\050\033\020\001\001\000\032\002\042\003\044\004\056" +
    "\010\016\011\040\012\043\021\046\024\004\026\u0108\027" +
    "\047\031\050\033\020\001\001\000\032\002\042\003\044" +
    "\004\056\010\016\011\040\012\043\021\046\024\004\026" +
    "\u0107\027\047\031\050\033\020\001\001\000\002\001\001" +
    "\000\032\002\042\003\044\004\056\010\016\011\040\012" +
    "\043\021\046\024\004\026\u0102\027\047\031\050\033\020" +
    "\001\001\000\032\002\042\003\044\004\056\010\016\011" +
    "\040\012\043\021\046\024\004\026\u0101\027\047\031\050" +
    "\033\020\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\022\200\001\001\000\002\001\001" +
    "\000\002\001\001\000\032\002\042\003\044\004\056\010" +
    "\016\011\040\012\043\021\046\024\004\026\057\027\047" +
    "\031\050\033\020\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\005\173" +
    "\007\117\020\122\001\001\000\010\005\121\007\117\020" +
    "\122\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\007\127\020\130\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\020\133\001\001\000\002\001\001\000\004\020\142" +
    "\001\001\000\004\020\141\001\001\000\002\001\001\000" +
    "\004\020\140\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\020\144\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\005\151\007\117\020\122" +
    "\001\001\000\010\005\150\007\117\020\122\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\005\153\007\117" +
    "\020\122\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\032\002\042\003\044\004\056\010\016" +
    "\011\040\012\043\021\046\024\004\026\162\027\047\031" +
    "\050\033\020\001\001\000\032\002\042\003\044\004\056" +
    "\010\016\011\040\012\043\021\046\024\004\026\160\027" +
    "\047\031\050\033\020\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\032\002" +
    "\042\003\044\004\056\010\016\011\040\012\043\021\046" +
    "\024\004\026\165\027\047\031\050\033\020\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\005\172\007\117" +
    "\020\122\001\001\000\010\005\171\007\117\020\122\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\032\002\042\003\044\004\056\010" +
    "\016\011\040\012\043\021\046\024\004\026\176\027\047" +
    "\031\050\033\020\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\010\016\024\234\031\050\033" +
    "\020\001\001\000\004\020\223\001\001\000\006\016\214" +
    "\017\216\001\001\000\012\010\016\024\213\031\050\033" +
    "\020\001\001\000\002\001\001\000\004\020\212\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\016\222\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\016\214\017\227" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\010\016\024\233\031\050" +
    "\033\020\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\020\237\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\005\272\007\117\020\122\001" +
    "\001\000\010\005\243\007\117\020\122\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\032\002" +
    "\042\003\044\004\056\010\016\011\040\012\043\021\046" +
    "\024\004\026\263\027\047\031\050\033\020\001\001\000" +
    "\032\002\042\003\044\004\056\010\016\011\040\012\043" +
    "\021\046\024\004\026\250\027\047\031\050\033\020\001" +
    "\001\000\002\001\001\000\004\006\252\001\001\000\002" +
    "\001\001\000\004\003\255\001\001\000\032\002\042\003" +
    "\044\004\056\010\016\011\040\012\043\021\046\024\004" +
    "\026\261\027\047\031\050\033\020\001\001\000\002\001" +
    "\001\000\032\002\042\003\044\004\056\010\016\011\040" +
    "\012\043\021\046\024\004\026\257\027\047\031\050\033" +
    "\020\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\006" +
    "\265\001\001\000\002\001\001\000\032\002\042\003\044" +
    "\004\056\010\016\011\040\012\043\021\046\024\004\026" +
    "\267\027\047\031\050\033\020\001\001\000\002\001\001" +
    "\000\004\006\271\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\032\002\042\003\044\004\056" +
    "\010\016\011\040\012\043\021\046\024\004\026\275\027" +
    "\047\031\050\033\020\001\001\000\002\001\001\000\004" +
    "\006\277\001\001\000\002\001\001\000\010\010\305\023" +
    "\350\033\020\001\001\000\010\010\305\023\302\033\020" +
    "\001\001\000\004\020\325\001\001\000\004\020\313\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\005\315\007\117" +
    "\020\122\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\022\320\001\001\000\002\001\001\000\002\001\001" +
    "\000\032\002\042\003\044\004\056\010\016\011\040\012" +
    "\043\021\046\024\004\026\323\027\047\031\050\033\020" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\005\327\007\117\020\122\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\022\333\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\032\002\042\003\044\004\056\010\016\011" +
    "\040\012\043\021\046\024\004\026\337\027\047\031\050" +
    "\033\020\001\001\000\002\001\001\000\002\001\001\000" +
    "\032\002\042\003\044\004\056\010\016\011\040\012\043" +
    "\021\046\024\004\026\342\027\047\031\050\033\020\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\032\002\042\003\044\004\056\010\016\011\040\012" +
    "\043\021\046\024\004\026\346\027\047\031\050\033\020" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\020" +
    "\351\001\001\000\002\001\001\000\010\005\353\007\117" +
    "\020\122\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\022\356\001\001\000\002\001\001\000\002\001\001" +
    "\000\032\002\042\003\044\004\056\010\016\011\040\012" +
    "\043\021\046\024\004\026\361\027\047\031\050\033\020" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\010" +
    "\016\024\u0100\031\050\033\020\001\001\000\004\020\377" +
    "\001\001\000\004\020\366\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\016\214\017\372\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\010\016\024\376\031\050\033\020\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\020\u0104\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\010\030\015\u012b\031\025\033\020\001\001" +
    "\000\012\010\030\015\u012a\031\025\033\020\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\010\030\015\u0133\020" +
    "\377\031\025\033\020\001\001\000\012\010\030\015\u0131" +
    "\031\025\033\020\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\032\002\042\003\044\004\056\010\016\011\040\012" +
    "\043\021\046\024\004\026\u0142\027\047\031\050\033\020" +
    "\001\001\000\002\001\001\000\032\002\042\003\044\004" +
    "\056\010\016\011\040\012\043\021\046\024\004\026\u0139" +
    "\027\047\031\050\033\020\001\001\000\002\001\001\000" +
    "\004\020\u013c\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\020\u0144\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\010\016\024\234\031\050\033\020\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    ArrayList gramas = new ArrayList();
    public Nodo raiz;
    public int cont = 0;
    ArrayList errores=new ArrayList();
    public Symbol s;
    @Override
    public void syntax_error (Symbol s){
        if(s.left==-1){
        }else{
                errores.add("Syntax error en la línea: " + (s.left) + " , columna: " +(s.right)+ " con el símbolo = "+(s.value));
    }
}
    @Override
    public void unrecovered_syntax_error(Symbol s){
    if(s.left==-1){
    }else{
        errores.add("Error desconocido, por favor revise la linea: " + (s.left ) + " y columna:  " + (s.right )+ "Con simbolo: "+s.value);
    }    
    }
    public Symbol getS(){
        return this.s;
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // CONTADOR ::= tkn_id error tkn_puntocoma 
            {
              Nodo RESULT =null;
		parser.errores.add("Declaracion o expresión incorrecta");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTADOR",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // CONTADOR ::= tkn_id ITERADOR tkn_puntocoma 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTADOR",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // ARGSPARAMS ::= tkn_id 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Nodo nodo= new Nodo("ARGS",parser.cont);
                parser.cont++;
                nodo.addHijo(new Nodo(id.toString(),parser.cont));
                parser.cont++; 
                RESULT=nodo;              
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARGSPARAMS",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // ARGSPARAMS ::= tkn_id tkn_coma ARGSPARAMS 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Nodo nodo= new Nodo("ARGS",parser.cont);
                parser.cont++;
                nodo.addHijo(new Nodo(id.toString(),parser.cont));
                parser.cont++; 
                nodo.addHijo(a);
                RESULT=nodo;              
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARGSPARAMS",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // ARGS ::= 
            {
              Nodo RESULT =null;
		
            Nodo node = new Nodo("VACIO",parser.cont);
            parser.cont++;
            RESULT = node;
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARGS",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // ARGS ::= ARGSPARAMS 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Nodo nodo = new Nodo("ARGSPARAM",parser.cont);
                parser.cont++;
                nodo.addHijo(a);
                RESULT=nodo;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARGS",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // EXPR ::= error 
            {
              Nodo RESULT =null;
		parser.errores.add("Expresión incorrecta");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPR",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // EXPR ::= tkn_caracter 
            {
              Nodo RESULT =null;
		int carleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int carright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object car = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Nodo nodo = new Nodo(car.toString(),parser.cont);
                parser.cont++;
                RESULT=nodo;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPR",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // EXPR ::= tkn_num 
            {
              Nodo RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object num = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Nodo nodo = new Nodo(num.toString(),parser.cont);
                parser.cont++;
                RESULT=nodo;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPR",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // EXPR ::= tkn_id 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Nodo nodo = new Nodo(id.toString(),parser.cont);
                parser.cont++;
                RESULT=nodo;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPR",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // EXPR ::= tkn_parentesisiz EXPR tkn_parentesisde 
            {
              Nodo RESULT =null;
		
                Nodo nodo = new Nodo("EXPR",parser.cont);
                parser.cont++;
                RESULT=nodo;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPR",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // EXPR ::= EXPR tkn_opmod EXPR 
            {
              Nodo RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo o = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Nodo nodo= new Nodo("expr",parser.cont);
                parser.cont++;
                nodo.addHijo(s);
                nodo.addHijo(new Nodo(id.toString(),parser.cont));
                parser.cont++;                
                nodo.addHijo(o);
                RESULT=nodo;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPR",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // EXPR ::= EXPR tkn_opmulti EXPR 
            {
              Nodo RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo o = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Nodo nodo= new Nodo("expr",parser.cont);
                parser.cont++;
                nodo.addHijo(s);
                nodo.addHijo(new Nodo(id.toString(),parser.cont));
                parser.cont++;                
                nodo.addHijo(o);
                RESULT=nodo;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPR",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // EXPR ::= EXPR tkn_opadicion EXPR 
            {
              Nodo RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo o = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Nodo nodo= new Nodo("expr",parser.cont);
                parser.cont++;
                nodo.addHijo(s);
                nodo.addHijo(new Nodo(id.toString(),parser.cont));
                parser.cont++;                
                nodo.addHijo(o);
                RESULT=nodo;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPR",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // TIPOAPUNT ::= tkn_char tkn_opmulti 
            {
              Nodo RESULT =null;
		
            Nodo nodo = new Nodo("char*",parser.cont);
                parser.cont++;
                RESULT=nodo;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOAPUNT",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // TIPOAPUNT ::= tkn_int tkn_opmulti 
            {
              Nodo RESULT =null;
		
            Nodo nodo = new Nodo("int*",parser.cont);
                parser.cont++;
                RESULT=nodo;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOAPUNT",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // TIPO ::= tkn_void 
            {
              Nodo RESULT =null;
		
            Nodo nodo = new Nodo("void",parser.cont);
                parser.cont++;
                RESULT=nodo;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // TIPO ::= tkn_int 
            {
              Nodo RESULT =null;
		
            Nodo nodo = new Nodo("int",parser.cont);
                parser.cont++;
                RESULT=nodo;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // TIPO ::= TIPOAPUNT 
            {
              Nodo RESULT =null;
		int apleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int apright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo ap = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            Nodo nodo = new Nodo("puntero",parser.cont);
                parser.cont++;
                nodo.addHijo(ap);
                RESULT=nodo;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // TIPO ::= tkn_char 
            {
              Nodo RESULT =null;
		
            Nodo nodo = new Nodo("char",parser.cont);
                parser.cont++;
                RESULT=nodo;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // CONDICIONP ::= EXPR tkn_oprel EXPR 
            {
              Nodo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo f = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Nodo nodo= new Nodo("CONDICIONP",parser.cont);
                parser.cont++;
                nodo.addHijo(e);
                nodo.addHijo(new Nodo(id.toString(),parser.cont));
                parser.cont++;                
                nodo.addHijo(f);
                RESULT=nodo;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICIONP",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // CONDICION ::= error tkn_and CONDICION 
            {
              Nodo RESULT =null;
		parser.errores.add("Expresion erronea o ausente en condicion");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // CONDICION ::= error 
            {
              Nodo RESULT =null;
		parser.errores.add("Operador relacional ausente en condicion");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // CONDICION ::= CONDICIONP 
            {
              Nodo RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Nodo nodo= new Nodo("CONDICION",parser.cont);
                parser.cont++;
                nodo.addHijo(c);
                RESULT=nodo;              
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // CONDICION ::= tkn_parentesisiz CONDICIONP tkn_parentesisde 
            {
              Nodo RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                Nodo nodo= new Nodo("CONDICION",parser.cont);
                parser.cont++;
                nodo.addHijo(c);
                RESULT=nodo;              
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // CONDICION ::= tkn_parentesisiz CONDICIONP tkn_parentesisde tkn_or CONDICION 
            {
              Nodo RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo c1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Nodo nodo= new Nodo("CONDICION",parser.cont);
                parser.cont++;
                nodo.addHijo(c);
                nodo.addHijo(new Nodo(id.toString(),parser.cont));
                parser.cont++; 
                nodo.addHijo(c1);
                RESULT=nodo;              
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // CONDICION ::= tkn_parentesisiz CONDICIONP tkn_parentesisde tkn_and CONDICION 
            {
              Nodo RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo c1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Nodo nodo= new Nodo("CONDICION",parser.cont);
                parser.cont++;
                nodo.addHijo(c);
                nodo.addHijo(new Nodo(id.toString(),parser.cont));
                parser.cont++; 
                nodo.addHijo(c1);
                RESULT=nodo;              
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // CONDICION ::= CONDICIONP tkn_or CONDICION 
            {
              Nodo RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo o = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Nodo nodo= new Nodo("CONDICION",parser.cont);
                parser.cont++;
                nodo.addHijo(s);
                nodo.addHijo(new Nodo(id.toString(),parser.cont));
                parser.cont++; 
                nodo.addHijo(o);
                RESULT=nodo;              
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // CONDICION ::= CONDICIONP tkn_and CONDICION 
            {
              Nodo RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo o = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Nodo nodo= new Nodo("CONDICION",parser.cont);
                parser.cont++;
                nodo.addHijo(s);
                nodo.addHijo(new Nodo(id.toString(),parser.cont));
                parser.cont++;                
                nodo.addHijo(o);
                RESULT=nodo;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // ITERADOR ::= tkn_opmulti tkn_oprel EXPR 
            {
              Nodo RESULT =null;
		 
            Nodo nodo = new Nodo("ITERADOR",parser.cont);
            parser.cont++;
            RESULT=nodo;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ITERADOR",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // ITERADOR ::= tkn_opadicion tkn_oprel EXPR 
            {
              Nodo RESULT =null;
		 
            Nodo nodo = new Nodo("ITERADOR",parser.cont);
            parser.cont++;
            RESULT=nodo;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ITERADOR",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // ITERADOR ::= tkn_decrement 
            {
              Nodo RESULT =null;
		 
            Nodo nodo = new Nodo("ITERADOR",parser.cont);
            parser.cont++;
            RESULT=nodo;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ITERADOR",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // ITERADOR ::= tkn_increment 
            {
              Nodo RESULT =null;
		 
            Nodo nodo = new Nodo("ITERADOR",parser.cont);
            parser.cont++;
            RESULT=nodo;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ITERADOR",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // BLOQUE ::= 
            {
              Nodo RESULT =null;
		
                Nodo node = new Nodo("VACIO",parser.cont);
                parser.cont++;
                node.addHijo(new Nodo("VACIO",parser.cont++));
                parser.cont++;
                RESULT = node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // BLOQUE ::= CONTADOR BLOQUE 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo i = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Nodo nodo = new Nodo("BLOQUE",parser.cont);
                parser.cont++;
                nodo.addHijo(i);
                nodo.addHijo(s);
                RESULT=nodo;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // BLOQUE ::= PRINTF BLOQUE 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo i = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Nodo nodo = new Nodo("BLOQUE",parser.cont);
                parser.cont++;
                nodo.addHijo(i);
                nodo.addHijo(s);
                RESULT=nodo;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // BLOQUE ::= SCANF BLOQUE 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo i = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Nodo nodo = new Nodo("BLOQUE",parser.cont);
                parser.cont++;
                nodo.addHijo(i);
                nodo.addHijo(s);
                RESULT=nodo;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // BLOQUE ::= ASIGN BLOQUE 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo i = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Nodo nodo = new Nodo("BLOQUE",parser.cont);
                parser.cont++;
                nodo.addHijo(i);
                nodo.addHijo(s);
                RESULT=nodo;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // BLOQUE ::= WHILE BLOQUE 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo i = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Nodo nodo = new Nodo("BLOQUE",parser.cont);
                parser.cont++;
                nodo.addHijo(i);
                nodo.addHijo(s);
                RESULT=nodo;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // BLOQUE ::= FOR BLOQUE 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo i = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Nodo nodo = new Nodo("BLOQUE",parser.cont);
                parser.cont++;
                nodo.addHijo(i);
                nodo.addHijo(s);
                RESULT=nodo;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // BLOQUE ::= IF BLOQUE 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo i = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Nodo nodo = new Nodo("BLOQUE",parser.cont);
                parser.cont++;
                nodo.addHijo(i);
                nodo.addHijo(s);
                RESULT=nodo;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // SCANF ::= tkn_scanf tkn_parentesisiz error tkn_coma tkn_ampersand tkn_id tkn_parentesisde tkn_puntocoma 
            {
              Nodo RESULT =null;
		parser.errores.add("conststr ausente en la funcion scanf");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SCANF",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // SCANF ::= tkn_scanf error tkn_cadena tkn_coma tkn_ampersand tkn_id tkn_parentesisde tkn_puntocoma 
            {
              Nodo RESULT =null;
		parser.errores.add("parentesis de apertura '(' ausente en la funcion scanf");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SCANF",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // SCANF ::= tkn_scanf tkn_parentesisiz tkn_cadena tkn_coma tkn_ampersand tkn_id error tkn_puntocoma 
            {
              Nodo RESULT =null;
		parser.errores.add("parentesis de cierre ')' ausente en la funcion scanf");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SCANF",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // SCANF ::= tkn_scanf tkn_parentesisiz tkn_cadena tkn_coma tkn_ampersand error tkn_parentesisde tkn_puntocoma 
            {
              Nodo RESULT =null;
		parser.errores.add("identificador ausente en la funcion scanf");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SCANF",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // SCANF ::= tkn_scanf tkn_parentesisiz tkn_cadena tkn_coma error tkn_id tkn_parentesisde tkn_puntocoma 
            {
              Nodo RESULT =null;
		parser.errores.add("Puntero a identificador '&' ausente en la funcion scanf");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SCANF",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // SCANF ::= tkn_scanf tkn_parentesisiz tkn_cadena tkn_coma tkn_ampersand tkn_id tkn_parentesisde tkn_puntocoma 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		  parser.gramas.add("Funcion SCANF reconocida");
            Nodo nodo = new Nodo("SCANF",parser.cont);
            parser.cont++;
            nodo.addHijo(new Nodo(id.toString(),parser.cont));
            parser.cont++;
            RESULT=nodo;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SCANF",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // PRINTF ::= tkn_printf tkn_parentesisiz error tkn_coma tkn_id tkn_parentesisde tkn_puntocoma 
            {
              Nodo RESULT =null;
		parser.errores.add("conststr ausente en la funcion printf");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRINTF",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // PRINTF ::= tkn_printf error tkn_cadena tkn_coma tkn_id tkn_parentesisde tkn_puntocoma 
            {
              Nodo RESULT =null;
		parser.errores.add("se esperaba el simbolo '(' en la funcion printf");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRINTF",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // PRINTF ::= tkn_printf tkn_parentesisiz tkn_cadena tkn_coma tkn_id tkn_parentesisde error 
            {
              Nodo RESULT =null;
		parser.errores.add("se esperaba el simbolo ';' en la funcion printf");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRINTF",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // PRINTF ::= tkn_printf tkn_parentesisiz tkn_cadena tkn_coma tkn_id error tkn_puntocoma 
            {
              Nodo RESULT =null;
		parser.errores.add("parentesis de cierre ')' ausente en la funcion printf");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRINTF",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // PRINTF ::= tkn_printf tkn_parentesisiz tkn_cadena tkn_coma error tkn_parentesisde tkn_puntocoma 
            {
              Nodo RESULT =null;
		parser.errores.add("identificador ausente en la funcion printf");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRINTF",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // PRINTF ::= tkn_printf tkn_parentesisiz tkn_cadena error tkn_id tkn_parentesisde tkn_puntocoma 
            {
              Nodo RESULT =null;
		parser.errores.add("coma ',' ausente en la funcion printf");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRINTF",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // PRINTF ::= tkn_printf tkn_parentesisiz tkn_cadena tkn_parentesisde tkn_puntocoma 
            {
              Nodo RESULT =null;
		parser.gramas.add("Funcion PRINTF reconocida");
                Nodo nodo = new Nodo("PRINT F",parser.cont);
                parser.cont++;
                RESULT=nodo;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRINTF",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // PRINTF ::= tkn_printf tkn_parentesisiz tkn_cadena tkn_coma tkn_id tkn_parentesisde tkn_puntocoma 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		parser.gramas.add("Funcion PRINTF reconocida");
                Nodo nodo = new Nodo("PRINT F",parser.cont);
                parser.cont++;
                nodo.addHijo(new Nodo(id.toString(),parser.cont));
                parser.cont++;
                RESULT=nodo;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRINTF",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // WHILE ::= tkn_while error CONDICION tkn_parentesisde tkn_llaveiz BLOQUE tkn_llaveder 
            {
              Nodo RESULT =null;
		parser.errores.add("Se esperaba un '(' en bloque while\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("WHILE",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // WHILE ::= tkn_while tkn_parentesisiz CONDICION error tkn_llaveiz BLOQUE tkn_llaveder 
            {
              Nodo RESULT =null;
		parser.errores.add("Se esperaba un ')' en bloque while\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("WHILE",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // WHILE ::= tkn_while tkn_parentesisiz CONDICION tkn_parentesisde error BLOQUE tkn_llaveder 
            {
              Nodo RESULT =null;
		parser.errores.add("Se esperaba un '{' en bloque while\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("WHILE",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // WHILE ::= tkn_while tkn_parentesisiz CONDICION tkn_parentesisde tkn_llaveiz BLOQUE tkn_llaveder 
            {
              Nodo RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int jleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int jright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo j = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		parser.gramas.add("Funcion WHILE reconocida");
            Nodo nodo = new Nodo("WHILE",parser.cont);
            parser.cont++;
            nodo.addHijo(c);
            nodo.addHijo(j);
            RESULT=nodo;
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("WHILE",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // FOR ::= tkn_for tkn_parentesisiz ASIGNACION EXPR tkn_puntocoma CONDICION tkn_puntocoma tkn_id error tkn_parentesisde tkn_llaveiz BLOQUE tkn_llaveder 
            {
              Nodo RESULT =null;
		parser.errores.add("Iteracion asuente en ciclo for\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FOR",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // FOR ::= tkn_for tkn_parentesisiz error EXPR tkn_puntocoma CONDICION tkn_puntocoma tkn_id ITERADOR tkn_parentesisde tkn_llaveiz BLOQUE tkn_llaveder 
            {
              Nodo RESULT =null;
		parser.errores.add("Asignacion o declaracion incorrecta en bloque for\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FOR",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // FOR ::= tkn_for tkn_parentesisiz ASIGNACION EXPR tkn_puntocoma CONDICION tkn_puntocoma tkn_id ITERADOR error tkn_llaveiz BLOQUE tkn_llaveder 
            {
              Nodo RESULT =null;
		parser.errores.add("Se esperaba un parentesis de cierre ')' for\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FOR",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // FOR ::= tkn_for error ASIGNACION EXPR tkn_puntocoma CONDICION tkn_puntocoma tkn_id ITERADOR tkn_parentesisde tkn_llaveiz BLOQUE tkn_llaveder 
            {
              Nodo RESULT =null;
		parser.errores.add("Se esperaba un parentesis de apertura '(' for\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FOR",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // FOR ::= tkn_for tkn_parentesisiz ASIGNACION EXPR tkn_puntocoma CONDICION tkn_puntocoma tkn_id ITERADOR tkn_parentesisde tkn_llaveiz BLOQUE tkn_llaveder 
            {
              Nodo RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int jleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int jright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo j = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		parser.gramas.add("Funcion FOR reconocida");
                Nodo nodo = new Nodo("FOR",parser.cont);
                parser.cont++;
                nodo.addHijo(c);
                nodo.addHijo(j);
                RESULT=nodo;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FOR",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // ELSE ::= 
            {
              Nodo RESULT =null;
		
            Nodo node = new Nodo("VACIO",parser.cont);
            parser.cont++;
            RESULT = node;
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ELSE",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // ELSE ::= tkn_else error BLOQUE tkn_llaveder 
            {
              Nodo RESULT =null;
		parser.errores.add("Se esperaba el simbolo '{' en else\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ELSE",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // ELSE ::= tkn_else IF 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo i = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		parser.gramas.add("Else if reconocido");
            Nodo nodo = new Nodo("ELSE IF",parser.cont);
            parser.cont++;
            nodo.addHijo(i);
            RESULT=nodo;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ELSE",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // ELSE ::= tkn_else tkn_llaveiz BLOQUE tkn_llaveder 
            {
              Nodo RESULT =null;
		int jleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int jright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo j = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		parser.gramas.add("Else reconocido");
            Nodo nodo = new Nodo("ELSE",parser.cont);
            parser.cont++;
            nodo.addHijo(j);
            RESULT=nodo;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ELSE",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // IF ::= tkn_if tkn_parentesisiz CONDICION error tkn_llaveiz BLOQUE tkn_llaveder ELSE 
            {
              Nodo RESULT =null;
		parser.errores.add("Se esperaba el simbolo ')' en bloque if\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IF",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // IF ::= tkn_if error CONDICION tkn_parentesisde tkn_llaveiz BLOQUE tkn_llaveder ELSE 
            {
              Nodo RESULT =null;
		parser.errores.add("Se esperaba el simbolo '(' en bloque if\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IF",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // IF ::= tkn_if tkn_parentesisiz CONDICION tkn_parentesisde error BLOQUE tkn_llaveder ELSE 
            {
              Nodo RESULT =null;
		parser.errores.add("Llave de apertura '{' ausente en bloque if\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IF",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // IF ::= tkn_if tkn_parentesisiz CONDICION tkn_parentesisde tkn_llaveiz BLOQUE tkn_llaveder ELSE 
            {
              Nodo RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int jleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int jright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo j = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		parser.gramas.add("Funcion if reconocida");
            Nodo nodo = new Nodo("IF",parser.cont);
            parser.cont++;
            nodo.addHijo(c);
            nodo.addHijo(j);
            nodo.addHijo(e);
            RESULT=nodo;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IF",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // TERNARIO ::= tkn_parentesisiz CONDICION tkn_parentesisde tkn_ternario tkn_cadena tkn_dospuntos tkn_cadena 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TERNARIO",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // PARAMS ::= DECLR error PARAMS 
            {
              Nodo RESULT =null;
		parser.errores.add("Se esperaba un ',' en los parametros de la función o prototipo \n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMS",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // PARAMS ::= TIPO error PARAMS 
            {
              Nodo RESULT =null;
		parser.errores.add("Se esperaba un ',' en los parametros de la función o prototipo \n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMS",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // PARAMS ::= 
            {
              Nodo RESULT =null;
		
            Nodo node = new Nodo("VACIO",parser.cont);
            parser.cont++;
            RESULT = node;
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMS",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // PARAMS ::= TIPO 
            {
              Nodo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo t = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		parser.gramas.add("Params reconocido");
            Nodo nodo = new Nodo("PARAMS",parser.cont);
            parser.cont++;
            nodo.addHijo(t);                
            RESULT=nodo;
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMS",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // PARAMS ::= DECLR 
            {
              Nodo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo t = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		parser.gramas.add("Params reconocido");
            Nodo nodo = new Nodo("PARAMS",parser.cont);
            parser.cont++;
            nodo.addHijo(t);                
            RESULT=nodo;
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMS",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // PARAMS ::= DECLR tkn_coma PARAMS 
            {
              Nodo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo t = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo p = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		parser.gramas.add("Params reconocido");
            Nodo nodo = new Nodo("PARAMS",parser.cont);
            parser.cont++;
            nodo.addHijo(t);               
            nodo.addHijo(p);
            RESULT=nodo;
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMS",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // PARAMS ::= TIPO tkn_coma PARAMS 
            {
              Nodo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo t = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo p = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		parser.gramas.add("Params reconocido");
            Nodo nodo = new Nodo("PARAMS",parser.cont);
            parser.cont++;
            nodo.addHijo(t)     ;           
            nodo.addHijo(p);
            RESULT=nodo;
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMS",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // ASIGN ::= DECLASIGN tkn_puntocoma 
            {
              Nodo RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo d = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            Nodo nodo = new Nodo("ASIGNACIONES",parser.cont);
            parser.cont++;
            nodo.addHijo(d);
            RESULT=nodo;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGN",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // DECLASIGN ::= tkn_id tkn_parentesisiz ARGS error 
            {
              Nodo RESULT =null;
		parser.errores.add("Se esperaba un ')' en llamado de la funcion \n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLASIGN",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // DECLASIGN ::= tkn_id tkn_parentesisiz ARGS tkn_parentesisde 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                Nodo nodo= new Nodo("LLAMADO",parser.cont);
                parser.cont++;
                nodo.addHijo(a);
                RESULT=nodo;              
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLASIGN",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // DECLASIGN ::= tkn_id tkn_oprel tkn_id tkn_parentesisiz error tkn_parentesisde 
            {
              Nodo RESULT =null;
		parser.errores.add("Argumentos en llamado de función erroneos \n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLASIGN",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // DECLASIGN ::= DECLR tkn_oprel tkn_id tkn_parentesisiz error tkn_parentesisde 
            {
              Nodo RESULT =null;
		parser.errores.add("Argumentos en llamado de función erroneos \n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLASIGN",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // DECLASIGN ::= tkn_id tkn_oprel tkn_id tkn_parentesisiz ARGS tkn_parentesisde 
            {
              Nodo RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object id1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                Nodo nodo = new Nodo("LLAMADO",parser.cont);
                parser.cont++;
                nodo.addHijo(new Nodo(id1.toString(),parser.cont));
                parser.cont++;
                nodo.addHijo(new Nodo(id.toString(),parser.cont));
                parser.cont++;
                nodo.addHijo(a);
                RESULT=nodo;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLASIGN",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // DECLASIGN ::= DECLR tkn_oprel tkn_id tkn_parentesisiz ARGS tkn_parentesisde 
            {
              Nodo RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Nodo d = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                Nodo nodo= new Nodo("LLAMADO",parser.cont);
                parser.cont++;
                nodo.addHijo(d);
                nodo.addHijo(new Nodo(id.toString(),parser.cont));
                parser.cont++; 
                nodo.addHijo(a);
                RESULT=nodo;              
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLASIGN",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // DECLASIGN ::= DECLR 
            {
              Nodo RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo d = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Nodo nodo = new Nodo("DECLARACION",parser.cont);
                parser.cont++;
                nodo.addHijo(d);
                RESULT=nodo;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLASIGN",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // DECLASIGN ::= tkn_id tkn_oprel EXPR 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Nodo nodo = new Nodo("ASIGNACION",parser.cont);
                parser.cont++;
                nodo.addHijo(new Nodo(id.toString(),parser.cont));
                parser.cont++;
                nodo.addHijo(e);
                RESULT=nodo;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLASIGN",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // DECLASIGN ::= tkn_id tkn_oprel EXPR tkn_coma DECLASIGN 
            {
              Nodo RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object id1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Nodo nodo = new Nodo("ASIGNACION",parser.cont);
                parser.cont++;
                nodo.addHijo(new Nodo(id1.toString(),parser.cont));
                parser.cont++;
                nodo.addHijo(new Nodo(id.toString(),parser.cont));
                parser.cont++;
                nodo.addHijo(e);
                nodo.addHijo(s);
                RESULT=nodo;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLASIGN",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // DECLASIGN ::= tkn_id error DECLASIGN 
            {
              Nodo RESULT =null;
		parser.errores.add("Se esperaba el simbolo ',' en declaración o en argumentos en llamado de la función \n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLASIGN",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // DECLASIGN ::= tkn_id 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Nodo nodo = new Nodo("DECLARACION",parser.cont);
                parser.cont++;
                nodo.addHijo(new Nodo(id.toString(),parser.cont));
                parser.cont++;
                RESULT=nodo;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLASIGN",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // DECLASIGN ::= tkn_id tkn_coma DECLASIGN 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo d = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Nodo nodo = new Nodo("DECLARACION",parser.cont);
                parser.cont++;
                nodo.addHijo(new Nodo(id.toString(),parser.cont));
                parser.cont++;
                nodo.addHijo(d);
                RESULT=nodo;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLASIGN",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // DECLASIGN ::= DECLR error EXPR 
            {
              Nodo RESULT =null;
		parser.errores.add("Se esperaba el simbolo '=' en asignación\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLASIGN",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // DECLASIGN ::= DECLR tkn_coma DECLASIGN 
            {
              Nodo RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo d = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Nodo nodo = new Nodo("DECLARACION",parser.cont);
                parser.cont++;
                nodo.addHijo(d);
                nodo.addHijo(e);
                RESULT=nodo;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLASIGN",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // DECLASIGN ::= DECLR tkn_oprel EXPR 
            {
              Nodo RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo d = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Nodo nodo = new Nodo("ASIGNACION",parser.cont);
                parser.cont++;
                nodo.addHijo(d);
                nodo.addHijo(new Nodo(id.toString(),parser.cont));
                parser.cont++;
                nodo.addHijo(e);
                RESULT=nodo;
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLASIGN",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // DECLASIGN ::= DECLR tkn_oprel EXPR tkn_coma DECLASIGN 
            {
              Nodo RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Nodo d = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Nodo nodo = new Nodo("ASIGNACION",parser.cont);
                parser.cont++;
                nodo.addHijo(d);
                nodo.addHijo(new Nodo(id.toString(),parser.cont));
                parser.cont++;
                nodo.addHijo(e);
                nodo.addHijo(a);
                RESULT=nodo;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLASIGN",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // ASIGNACION ::= TIPO error tkn_oprel 
            {
              Nodo RESULT =null;
		parser.errores.add("Se esperaba un identificador en bloque for\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // ASIGNACION ::= tkn_id tkn_oprel 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // ASIGNACION ::= TIPO tkn_id tkn_oprel 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // DECLR ::= error tkn_id 
            {
              Nodo RESULT =null;
		parser.errores.add("Tipo de dato incorrecto\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLR",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // DECLR ::= TIPO tkn_id 
            {
              Nodo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo t = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int kleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int kright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object k = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            Nodo nodo = new Nodo("DECL",parser.cont);
                parser.cont++;
                nodo.addHijo(t);
                nodo.addHijo(new Nodo(k.toString(),parser.cont));
                parser.cont++;
                RESULT=nodo;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLR",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // PROTOFUN ::= DECLR error PARAMS tkn_parentesisde 
            {
              Nodo RESULT =null;
		parser.errores.add("Se esperaba un '(' en la funcion o prototipo\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROTOFUN",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // PROTOFUN ::= DECLR tkn_parentesisiz PARAMS tkn_parentesisde 
            {
              Nodo RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Nodo d = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo p = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                Nodo nodo = new Nodo("PROTOFUN",parser.cont);
                parser.cont++;
                nodo.addHijo(d);
                nodo.addHijo(p);
                RESULT=nodo;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROTOFUN",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // FUNCION ::= PROTOFUN error BLOQUE tkn_return EXPR tkn_puntocoma tkn_llaveiz 
            {
              Nodo RESULT =null;
		parser.errores.add("Se esperaba un '{' en la funcion\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCION",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // FUNCION ::= PROTOFUN tkn_llaveiz BLOQUE tkn_return EXPR error tkn_llaveiz 
            {
              Nodo RESULT =null;
		parser.errores.add("Se esperaba un ';' en linea de retorno de la funcion\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCION",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // FUNCION ::= PROTOFUN tkn_llaveiz BLOQUE tkn_return EXPR tkn_puntocoma error 
            {
              Nodo RESULT =null;
		parser.errores.add("Llave de cierre '}' ausente en la funcion\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCION",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // FUNCION ::= PROTOFUN tkn_llaveiz BLOQUE tkn_llaveder 
            {
              Nodo RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Nodo p = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int jleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int jright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo j = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		parser.gramas.add("Una Funcion Reconocida satisfactoriamente");
                Nodo nodo = new Nodo("FUNCION",parser.cont);
                parser.cont++;
                nodo.addHijo(p);
                nodo.addHijo(j);
                RESULT=nodo;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCION",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // FUNCION ::= tkn_int tkn_main tkn_parentesisiz PARAMS tkn_parentesisde tkn_llaveiz BLOQUE tkn_return EXPR tkn_puntocoma tkn_llaveder 
            {
              Nodo RESULT =null;
		int jleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int jright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Nodo j = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		parser.gramas.add("Funcion MAIN Reconocida satisfactoriamente");
                Nodo nodo = new Nodo("MAIN",parser.cont);
                parser.cont++;
                nodo.addHijo(j);
                nodo.addHijo(e);
                RESULT=nodo;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCION",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // FUNCION ::= PROTOFUN tkn_llaveiz BLOQUE tkn_return EXPR tkn_puntocoma tkn_llaveder 
            {
              Nodo RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Nodo p = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int jleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int jright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Nodo j = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		parser.gramas.add("Una Funcion Reconocida satisfactoriamente");
                Nodo nodo = new Nodo("FUNCION",parser.cont);
                parser.cont++;
                nodo.addHijo(p);
                nodo.addHijo(j);
                nodo.addHijo(e);
                RESULT=nodo;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCION",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // PROTOTIPO ::= PROTOFUN tkn_puntocoma 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo i = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                Nodo nodo = new Nodo("PROTOTIPO",parser.cont);
                parser.cont++;
                nodo.addHijo(i);
                RESULT=nodo;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROTOTIPO",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // FUNCIONES ::= 
            {
              Nodo RESULT =null;
		
                    Nodo node = new Nodo("VACIO",parser.cont);
                    parser.cont++;
                    RESULT = node;
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCIONES",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // FUNCIONES ::= ASIGN FUNCIONES 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo i = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo f = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Nodo nodo = new Nodo("CUERPO",parser.cont);
                parser.cont++;
                nodo.addHijo(i);
                nodo.addHijo(f);
                RESULT=nodo;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCIONES",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // FUNCIONES ::= FUNCION FUNCIONES 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo i = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo f = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Nodo nodo = new Nodo("CUERPO",parser.cont);
                parser.cont++;
                nodo.addHijo(i);
                nodo.addHijo(f);
                RESULT=nodo;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCIONES",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // FUNCIONES ::= PROTOTIPO FUNCIONES 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo i = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo f = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Nodo nodo = new Nodo("CUERPO",parser.cont);
                parser.cont++;
                nodo.addHijo(i);
                nodo.addHijo(f);
                RESULT=nodo;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCIONES",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= FUNCIONES 
            {
              Nodo RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        Nodo nodo = new Nodo("PROGRAMA",parser.cont);
        parser.cont++;
        nodo.addHijo(b);
        parser.raiz=nodo;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIO",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo start_val = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

