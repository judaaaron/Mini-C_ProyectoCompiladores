
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Sep 06 23:34:41 CST 2022
//----------------------------------------------------

package Compiladorcito;

import java_cup.runtime.*;
import java.util.ArrayList;
import java.util.*;
import java.io.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Sep 06 23:34:41 CST 2022
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\110\000\002\002\004\000\002\031\015\000\002\050" +
    "\004\000\002\006\005\000\002\017\005\000\002\017\006" +
    "\000\002\017\003\000\002\017\002\000\002\033\004\000" +
    "\002\033\002\000\002\002\004\000\002\002\003\000\002" +
    "\026\003\000\002\026\002\000\002\032\003\000\002\032" +
    "\002\000\002\042\003\000\002\042\002\000\002\035\006" +
    "\000\002\035\005\000\002\035\003\000\002\035\004\000" +
    "\002\027\006\000\002\027\004\000\002\025\015\000\002" +
    "\041\005\000\002\041\003\000\002\037\011\000\002\030" +
    "\010\000\002\030\003\000\002\004\012\000\002\012\006" +
    "\000\002\012\004\000\002\012\002\000\002\005\020\000" +
    "\002\003\011\000\002\007\004\000\002\007\004\000\002" +
    "\007\004\000\002\007\004\000\002\007\004\000\002\007" +
    "\004\000\002\007\004\000\002\007\004\000\002\007\002" +
    "\000\002\010\005\000\002\010\005\000\002\010\007\000" +
    "\002\010\007\000\002\010\005\000\002\010\003\000\002" +
    "\013\005\000\002\016\003\000\002\016\003\000\002\016" +
    "\003\000\002\016\003\000\002\045\006\000\002\045\005" +
    "\000\002\045\004\000\002\046\005\000\002\046\005\000" +
    "\002\046\005\000\002\046\005\000\002\046\003\000\002" +
    "\020\011\000\002\020\007\000\002\034\003\000\002\034" +
    "\003\000\002\034\003\000\002\051\003\000\002\051\003" +
    "\000\002\051\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\260\000\012\012\013\013\010\035\014\036\012\001" +
    "\002\000\004\002\ufff6\001\002\000\012\012\uffe4\013\uffe4" +
    "\035\uffe4\036\uffe4\001\002\000\004\002\262\001\002\000" +
    "\012\012\013\013\010\035\014\036\012\001\002\000\016" +
    "\021\uffcb\037\uffcb\040\uffcb\042\uffcb\043\uffcb\053\uffcb\001" +
    "\002\000\012\037\245\040\ufffa\042\053\053\045\001\002" +
    "\000\016\021\uffcd\037\uffcd\040\uffcd\042\uffcd\043\uffcd\053" +
    "\uffcd\001\002\000\016\021\uffcc\037\uffcc\040\uffcc\042\uffcc" +
    "\043\uffcc\053\uffcc\001\002\000\014\011\015\037\uffca\040" +
    "\uffca\042\uffca\053\uffca\001\002\000\004\020\016\001\002" +
    "\000\004\021\017\001\002\000\004\022\020\001\002\000" +
    "\026\012\013\013\010\015\036\016\040\026\031\027\uffd5" +
    "\030\021\035\033\036\012\037\037\001\002\000\004\020" +
    "\235\001\002\000\030\012\013\013\010\015\036\016\040" +
    "\023\uffd5\026\031\027\uffd5\030\021\035\033\036\012\037" +
    "\037\001\002\000\030\012\013\013\010\015\036\016\040" +
    "\023\uffd5\026\031\027\uffd5\030\021\035\033\036\012\037" +
    "\037\001\002\000\030\012\013\013\010\015\036\016\040" +
    "\023\uffd5\026\031\027\uffd5\030\021\035\033\036\012\037" +
    "\037\001\002\000\004\027\203\001\002\000\030\012\013" +
    "\013\010\015\036\016\040\023\uffd5\026\031\027\uffd5\030" +
    "\021\035\033\036\012\037\037\001\002\000\012\020\056" +
    "\037\051\042\053\053\045\001\002\000\030\012\013\013" +
    "\010\015\036\016\040\023\uffd5\026\031\027\uffd5\030\021" +
    "\035\033\036\012\037\037\001\002\000\004\020\154\001" +
    "\002\000\012\037\130\040\ufffa\042\053\053\045\001\002" +
    "\000\016\021\uffca\037\uffca\040\uffca\042\uffca\043\uffca\053" +
    "\uffca\001\002\000\030\012\013\013\010\015\036\016\040" +
    "\023\uffd5\026\031\027\uffd5\030\021\035\033\036\012\037" +
    "\037\001\002\000\030\012\013\013\010\015\036\016\040" +
    "\023\uffd5\026\031\027\uffd5\030\021\035\033\036\012\037" +
    "\037\001\002\000\004\020\107\001\002\000\004\010\106" +
    "\001\002\000\004\020\043\001\002\000\030\012\013\013" +
    "\010\015\036\016\040\023\uffd5\026\031\027\uffd5\030\021" +
    "\035\033\036\012\037\037\001\002\000\006\023\uffdc\027" +
    "\uffdc\001\002\000\012\020\052\037\051\042\053\053\045" +
    "\001\002\000\012\021\uffcf\024\103\025\102\040\uffcf\001" +
    "\002\000\052\004\uffbd\005\uffbd\007\uffbd\010\uffbd\012\uffbd" +
    "\013\uffbd\015\uffbd\016\uffbd\021\uffbd\023\uffbd\024\uffbd\025" +
    "\uffbd\026\uffbd\027\uffbd\030\uffbd\035\uffbd\036\uffbd\037\uffbd" +
    "\040\uffbd\043\uffbd\001\002\000\004\021\076\001\002\000" +
    "\012\004\063\005\061\007\060\010\067\001\002\000\022" +
    "\004\uffc2\005\uffc2\007\uffc2\010\uffc2\021\uffc2\024\uffc2\025" +
    "\uffc2\040\uffc2\001\002\000\052\004\uffbf\005\uffbf\007\uffbf" +
    "\010\uffbf\012\uffbf\013\uffbf\015\uffbf\016\uffbf\021\uffbf\023" +
    "\uffbf\024\uffbf\025\uffbf\026\uffbf\027\uffbf\030\uffbf\035\uffbf" +
    "\036\uffbf\037\uffbf\040\uffbf\043\uffbf\001\002\000\012\020" +
    "\056\037\051\042\053\053\045\001\002\000\052\004\uffbe" +
    "\005\uffbe\007\uffbe\010\uffbe\012\uffbe\013\uffbe\015\uffbe\016" +
    "\uffbe\021\uffbe\023\uffbe\024\uffbe\025\uffbe\026\uffbe\027\uffbe" +
    "\030\uffbe\035\uffbe\036\uffbe\037\uffbe\040\uffbe\043\uffbe\001" +
    "\002\000\004\021\071\001\002\000\014\004\063\005\061" +
    "\007\060\010\067\021\062\001\002\000\012\020\056\037" +
    "\051\042\053\053\045\001\002\000\012\004\063\005\061" +
    "\007\060\021\062\001\002\000\012\020\056\037\051\042" +
    "\053\053\045\001\002\000\012\020\056\037\051\042\053" +
    "\053\045\001\002\000\022\004\uffc3\005\uffc3\007\uffc3\010" +
    "\uffc3\021\uffc3\024\uffc3\025\uffc3\040\uffc3\001\002\000\012" +
    "\020\056\037\051\042\053\053\045\001\002\000\022\004" +
    "\uffc6\005\061\007\060\010\uffc6\021\uffc6\024\uffc6\025\uffc6" +
    "\040\uffc6\001\002\000\022\004\uffc5\005\uffc5\007\uffc5\010" +
    "\uffc5\021\uffc5\024\uffc5\025\uffc5\040\uffc5\001\002\000\022" +
    "\004\uffc4\005\uffc4\007\uffc4\010\uffc4\021\uffc4\024\uffc4\025" +
    "\uffc4\040\uffc4\001\002\000\012\020\056\037\051\042\053" +
    "\053\045\001\002\000\020\004\063\005\061\007\060\021" +
    "\uffce\024\uffce\025\uffce\040\uffce\001\002\000\012\021\uffd0" +
    "\024\073\025\072\040\uffd0\001\002\000\012\020\052\037" +
    "\051\042\053\053\045\001\002\000\012\020\052\037\051" +
    "\042\053\053\045\001\002\000\006\021\uffd2\040\uffd2\001" +
    "\002\000\006\021\uffd1\040\uffd1\001\002\000\004\022\077" +
    "\001\002\000\026\012\013\013\010\015\036\016\040\023" +
    "\uffd5\026\031\030\021\035\033\036\012\037\037\001\002" +
    "\000\004\023\101\001\002\000\030\012\uffde\013\uffde\015" +
    "\uffde\016\uffde\023\uffde\026\uffde\027\uffde\030\uffde\035\uffde" +
    "\036\uffde\037\uffde\001\002\000\012\020\052\037\051\042" +
    "\053\053\045\001\002\000\012\020\052\037\051\042\053" +
    "\053\045\001\002\000\006\021\uffd4\040\uffd4\001\002\000" +
    "\006\021\uffd3\040\uffd3\001\002\000\012\020\uffff\037\uffff" +
    "\042\uffff\053\uffff\001\002\000\012\020\052\037\051\042" +
    "\053\053\045\001\002\000\004\021\111\001\002\000\004" +
    "\022\112\001\002\000\026\012\013\013\010\015\036\016" +
    "\040\023\uffd5\026\031\030\021\035\033\036\012\037\037" +
    "\001\002\000\004\023\114\001\002\000\032\012\uffe0\013" +
    "\uffe0\015\uffe0\016\uffe0\017\116\023\uffe0\026\uffe0\027\uffe0" +
    "\030\uffe0\035\uffe0\036\uffe0\037\uffe0\001\002\000\030\012" +
    "\uffe3\013\uffe3\015\uffe3\016\uffe3\023\uffe3\026\uffe3\027\uffe3" +
    "\030\uffe3\035\uffe3\036\uffe3\037\uffe3\001\002\000\006\015" +
    "\036\022\120\001\002\000\030\012\uffe1\013\uffe1\015\uffe1" +
    "\016\uffe1\023\uffe1\026\uffe1\027\uffe1\030\uffe1\035\uffe1\036" +
    "\uffe1\037\uffe1\001\002\000\026\012\013\013\010\015\036" +
    "\016\040\023\uffd5\026\031\030\021\035\033\036\012\037" +
    "\037\001\002\000\004\023\122\001\002\000\030\012\uffe2" +
    "\013\uffe2\015\uffe2\016\uffe2\023\uffe2\026\uffe2\027\uffe2\030" +
    "\uffe2\035\uffe2\036\uffe2\037\uffe2\001\002\000\006\023\uffd6" +
    "\027\uffd6\001\002\000\006\023\uffd7\027\uffd7\001\002\000" +
    "\012\020\056\037\142\042\053\053\045\001\002\000\004" +
    "\040\137\001\002\000\006\040\ufffb\043\131\001\002\000" +
    "\010\010\106\040\uffbf\043\uffbf\001\002\000\012\037\130" +
    "\040\ufffa\042\053\053\045\001\002\000\010\037\051\042" +
    "\053\053\045\001\002\000\004\040\ufffd\001\002\000\004" +
    "\043\135\001\002\000\012\037\130\040\ufffa\042\053\053" +
    "\045\001\002\000\004\040\ufffc\001\002\000\030\012\ufffe" +
    "\013\ufffe\015\ufffe\016\ufffe\023\ufffe\026\ufffe\027\ufffe\030" +
    "\ufffe\035\ufffe\036\ufffe\037\ufffe\001\002\000\012\004\063" +
    "\005\061\007\060\040\153\001\002\000\014\004\uffc2\005" +
    "\uffc2\007\uffc2\040\uffc2\043\135\001\002\000\016\004\uffbf" +
    "\005\uffbf\007\uffbf\020\143\040\uffbf\043\uffbf\001\002\000" +
    "\006\021\ufff0\037\144\001\002\000\006\021\uffe7\043\151" +
    "\001\002\000\004\021\ufff1\001\002\000\004\021\147\001" +
    "\002\000\004\040\150\001\002\000\030\012\uffe6\013\uffe6" +
    "\015\uffe6\016\uffe6\023\uffe6\026\uffe6\027\uffe6\030\uffe6\035" +
    "\uffe6\036\uffe6\037\uffe6\001\002\000\004\037\144\001\002" +
    "\000\004\021\uffe8\001\002\000\030\012\uffc9\013\uffc9\015" +
    "\uffc9\016\uffc9\023\uffc9\026\uffc9\027\uffc9\030\uffc9\035\uffc9" +
    "\036\uffc9\037\uffc9\001\002\000\004\035\155\001\002\000" +
    "\004\037\037\001\002\000\010\037\051\042\053\053\045" +
    "\001\002\000\004\040\160\001\002\000\012\020\052\037" +
    "\051\042\053\053\045\001\002\000\004\040\162\001\002" +
    "\000\004\037\163\001\002\000\010\004\166\032\165\033" +
    "\164\001\002\000\004\021\uffbb\001\002\000\004\021\uffbc" +
    "\001\002\000\004\010\174\001\002\000\004\021\170\001" +
    "\002\000\004\022\171\001\002\000\026\012\013\013\010" +
    "\015\036\016\040\023\uffd5\026\031\030\021\035\033\036" +
    "\012\037\037\001\002\000\004\023\173\001\002\000\030" +
    "\012\uffdf\013\uffdf\015\uffdf\016\uffdf\023\uffdf\026\uffdf\027" +
    "\uffdf\030\uffdf\035\uffdf\036\uffdf\037\uffdf\001\002\000\010" +
    "\037\051\042\053\053\045\001\002\000\004\021\uffba\001" +
    "\002\000\006\023\uffd9\027\uffd9\001\002\000\012\004\063" +
    "\005\061\007\060\040\201\001\002\000\040\004\uffc2\005" +
    "\uffc2\007\uffc2\012\uffc7\013\uffc7\015\uffc7\016\uffc7\023\uffc7" +
    "\026\uffc7\027\uffc7\030\uffc7\035\uffc7\036\uffc7\037\uffc7\040" +
    "\uffc2\001\002\000\030\012\uffc8\013\uffc8\015\uffc8\016\uffc8" +
    "\023\uffc8\026\uffc8\027\uffc8\030\uffc8\035\uffc8\036\uffc8\037" +
    "\uffc8\001\002\000\006\023\uffdb\027\uffdb\001\002\000\004" +
    "\042\204\001\002\000\004\040\205\001\002\000\004\023" +
    "\206\001\002\000\014\002\ufff8\012\013\013\010\035\033" +
    "\036\012\001\002\000\014\002\ufff8\012\013\013\010\035" +
    "\033\036\012\001\002\000\004\002\000\001\002\000\004" +
    "\037\212\001\002\000\004\020\213\001\002\000\014\012" +
    "\013\013\010\021\ufff4\035\033\036\012\001\002\000\004" +
    "\021\ufff5\001\002\000\004\021\222\001\002\000\004\037" +
    "\217\001\002\000\006\021\uffea\043\220\001\002\000\012" +
    "\012\013\013\010\035\033\036\012\001\002\000\004\021" +
    "\uffeb\001\002\000\004\022\223\001\002\000\026\012\013" +
    "\013\010\015\036\016\040\026\031\027\uffd5\030\021\035" +
    "\033\036\012\037\037\001\002\000\004\027\225\001\002" +
    "\000\010\037\051\042\053\053\045\001\002\000\004\040" +
    "\227\001\002\000\004\023\230\001\002\000\014\002\uffe9" +
    "\012\uffe9\013\uffe9\035\uffe9\036\uffe9\001\002\000\004\002" +
    "\ufff9\001\002\000\006\023\uffda\027\uffda\001\002\000\006" +
    "\023\uffd8\027\uffd8\001\002\000\006\023\uffdd\027\uffdd\001" +
    "\002\000\004\052\236\001\002\000\006\021\240\043\237" +
    "\001\002\000\004\037\242\001\002\000\004\040\241\001" +
    "\002\000\030\012\uffc0\013\uffc0\015\uffc0\016\uffc0\023\uffc0" +
    "\026\uffc0\027\uffc0\030\uffc0\035\uffc0\036\uffc0\037\uffc0\001" +
    "\002\000\004\021\243\001\002\000\004\040\244\001\002" +
    "\000\030\012\uffc1\013\uffc1\015\uffc1\016\uffc1\023\uffc1\026" +
    "\uffc1\027\uffc1\030\uffc1\035\uffc1\036\uffc1\037\uffc1\001\002" +
    "\000\012\010\106\020\246\040\uffbf\043\uffbf\001\002\000" +
    "\014\012\013\013\010\021\ufff2\035\033\036\012\001\002" +
    "\000\004\021\257\001\002\000\004\021\ufff3\001\002\000" +
    "\010\021\uffed\037\253\043\252\001\002\000\012\012\013" +
    "\013\010\035\033\036\012\001\002\000\006\021\uffec\043" +
    "\254\001\002\000\012\012\013\013\010\035\033\036\012" +
    "\001\002\000\004\021\uffef\001\002\000\004\021\uffee\001" +
    "\002\000\004\040\260\001\002\000\012\012\uffe5\013\uffe5" +
    "\035\uffe5\036\uffe5\001\002\000\004\002\ufff7\001\002\000" +
    "\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\260\000\014\002\005\006\004\016\010\030\006\031" +
    "\003\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\002\260\006\004\016\010\030\006\031" +
    "\003\001\001\000\002\001\001\000\010\017\125\034\126" +
    "\050\131\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\030\003\021\004\025\005\040\006\023\007" +
    "\024\016\031\020\027\024\022\037\034\045\033\050\026" +
    "\001\001\000\002\001\001\000\030\003\021\004\025\005" +
    "\040\006\023\007\233\016\031\020\027\024\022\037\034" +
    "\045\033\050\026\001\001\000\030\003\021\004\025\005" +
    "\040\006\023\007\232\016\031\020\027\024\022\037\034" +
    "\045\033\050\026\001\001\000\030\003\021\004\025\005" +
    "\040\006\023\007\231\016\031\020\027\024\022\037\034" +
    "\045\033\050\026\001\001\000\002\001\001\000\030\003" +
    "\021\004\025\005\040\006\023\007\201\016\031\020\027" +
    "\024\022\037\034\045\033\050\026\001\001\000\006\034" +
    "\177\046\176\001\001\000\030\003\021\004\025\005\040" +
    "\006\023\007\175\016\031\020\027\024\022\037\034\045" +
    "\033\050\026\001\001\000\002\001\001\000\010\017\125" +
    "\034\126\050\124\001\001\000\002\001\001\000\030\003" +
    "\021\004\025\005\040\006\023\007\123\016\031\020\027" +
    "\024\022\037\034\045\033\050\026\001\001\000\030\003" +
    "\021\004\025\005\040\006\023\007\122\016\031\020\027" +
    "\024\022\037\034\045\033\050\026\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\030\003\021" +
    "\004\025\005\040\006\023\007\041\016\031\020\027\024" +
    "\022\037\034\045\033\050\026\001\001\000\002\001\001" +
    "\000\012\010\045\013\043\034\047\046\046\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\013" +
    "\053\034\047\046\054\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\034\047\046\056\001" +
    "\001\000\002\001\001\000\006\034\047\046\065\001\001" +
    "\000\006\034\047\046\064\001\001\000\002\001\001\000" +
    "\006\034\047\046\063\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\034\047\046\067\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\010\074" +
    "\013\043\034\047\046\046\001\001\000\012\010\073\013" +
    "\043\034\047\046\046\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\030\003\021\004\025\005" +
    "\040\006\023\007\077\016\031\020\027\024\022\037\034" +
    "\045\033\050\026\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\010\104\013\043\034\047\046\046\001\001" +
    "\000\012\010\103\013\043\034\047\046\046\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\010\107\013\043\034\047\046\046\001\001\000\002\001" +
    "\001\000\002\001\001\000\030\003\021\004\025\005\040" +
    "\006\023\007\112\016\031\020\027\024\022\037\034\045" +
    "\033\050\026\001\001\000\002\001\001\000\004\012\114" +
    "\001\001\000\002\001\001\000\004\004\116\001\001\000" +
    "\002\001\001\000\030\003\021\004\025\005\040\006\023" +
    "\007\120\016\031\020\027\024\022\037\034\045\033\050" +
    "\026\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\034\140\046\137\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\017\132\034\126\050\131\001\001\000\004\034" +
    "\133\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\017\135\034\126\050\131\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\041\144\042\145\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\041\151\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\050\155" +
    "\001\001\000\004\034\156\001\001\000\002\001\001\000" +
    "\012\010\160\013\043\034\047\046\046\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\051\166\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\030\003\021\004\025\005" +
    "\040\006\023\007\171\016\031\020\027\024\022\037\034" +
    "\045\033\050\026\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\034\174\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\016\210\025\206\033\207\001" +
    "\001\000\010\016\210\025\206\033\230\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\016" +
    "\215\026\214\027\213\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\016" +
    "\215\027\220\001\001\000\002\001\001\000\002\001\001" +
    "\000\030\003\021\004\025\005\040\006\023\007\223\016" +
    "\031\020\027\024\022\037\034\045\033\050\026\001\001" +
    "\000\002\001\001\000\004\034\225\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\016\250" +
    "\032\246\035\247\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\016\250\035\255\001\001" +
    "\000\002\001\001\000\006\016\250\035\254\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



     ArrayList gramas = new ArrayList();
    public int cont = 0;
    public int maximo(){
    int a=5;
    return a;
}
    ArrayList errores=new ArrayList();
    public Symbol s;
    @Override
    public void syntax_error (Symbol s){
        if(s.left==-1){
        }else{
                errores.add("Syntax error en la línea: " + (s.left) + " , columna: " +(s.right)+ " con el símbolo = "+(s.value));
    }
}
    @Override
    public void unrecovered_syntax_error(Symbol s){
    if(s.left==-1){
    }else{
        errores.add("Error desconocido, por favor revise la linea: " + (s.left ) + " y columna:  " + (s.right )+ "Con simbolo: "+s.value);
    }    
    }
    public Symbol getS(){
        return this.s;
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // ITERADOR ::= tkn_opadicion tkn_oprel RETURN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ITERADOR",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // ITERADOR ::= tkn_decrement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ITERADOR",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // ITERADOR ::= tkn_increment 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ITERADOR",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // RETURN ::= tkn_caracter 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("RETURN",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // RETURN ::= tkn_num 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("RETURN",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // RETURN ::= tkn_id 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("RETURN",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // PRINTF ::= tkn_printf tkn_parentesisiz tkn_cadena tkn_parentesisde tkn_puntocoma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRINTF",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // PRINTF ::= tkn_printf tkn_parentesisiz tkn_cadena tkn_coma tkn_id tkn_parentesisde tkn_puntocoma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRINTF",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // EXPR ::= RETURN 
            {
              Object RESULT =null;
		System.out.println("DENTRO DE expr");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPR",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // EXPR ::= tkn_parentesisiz EXPR tkn_parentesisde 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPR",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // EXPR ::= EXPR tkn_opmod EXPR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPR",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // EXPR ::= EXPR tkn_opmulti EXPR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPR",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // EXPR ::= EXPR tkn_opadicion EXPR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPR",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // EXPRFIN ::= ASIGN RETURN 
            {
              Object RESULT =null;
		System.out.println("DENTRO DE exprfins");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRFIN",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // EXPRFIN ::= ASIGN EXPR tkn_puntocoma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRFIN",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // EXPRFIN ::= TIPO ASIGN EXPR tkn_puntocoma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRFIN",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // TIPO ::= tkn_int 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // TIPO ::= tkn_charp 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // TIPO ::= tkn_intp 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // TIPO ::= tkn_char 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // CONDICIONP ::= EXPR tkn_oprel EXPR 
            {
              Object RESULT =null;
		System.out.println("DENTRO DE condicionp");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICIONP",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // CONDICION ::= CONDICIONP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICION",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // CONDICION ::= tkn_parentesisiz CONDICIONP tkn_parentesisde 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICION",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // CONDICION ::= tkn_parentesisiz CONDICIONP tkn_parentesisde tkn_or CONDICION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICION",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // CONDICION ::= tkn_parentesisiz CONDICIONP tkn_parentesisde tkn_and CONDICION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICION",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // CONDICION ::= CONDICIONP tkn_or CONDICION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICION",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // CONDICION ::= CONDICIONP tkn_and CONDICION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICION",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // BLOQUE ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // BLOQUE ::= LLAMADO BLOQUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // BLOQUE ::= EXPRFIN BLOQUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // BLOQUE ::= SCANF BLOQUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // BLOQUE ::= PRINTF BLOQUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // BLOQUE ::= DECLARACION BLOQUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // BLOQUE ::= IF BLOQUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // BLOQUE ::= FOR BLOQUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // BLOQUE ::= WHILE BLOQUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // WHILE ::= tkn_while tkn_parentesisiz CONDICION tkn_parentesisde tkn_llaveiz BLOQUE tkn_llaveder 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("WHILE",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // FOR ::= tkn_for tkn_parentesisiz tkn_int ASIGN RETURN tkn_puntocoma CONDICION tkn_puntocoma tkn_id ITERADOR tkn_parentesisde tkn_llaveiz BLOQUE tkn_llaveder 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FOR",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // ELSE ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ELSE",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // ELSE ::= tkn_else IF 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ELSE",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ELSE ::= tkn_else tkn_llaveiz BLOQUE tkn_llaveder 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ELSE",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // IF ::= tkn_if tkn_parentesisiz CONDICION tkn_parentesisde tkn_llaveiz BLOQUE tkn_llaveder ELSE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IF",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // PROTOTIPO ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROTOTIPO",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // PROTOTIPO ::= TIPO tkn_id tkn_parentesisiz PROTOPARAMS tkn_parentesisde tkn_puntocoma 
            {
              Object RESULT =null;
		System.out.println("DENTRO DE UN PROTOTIPO");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROTOTIPO",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // LLAMADO ::= TIPO ASIGN tkn_id tkn_parentesisiz ARGS tkn_parentesisde tkn_puntocoma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LLAMADO",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // ARGSPARAMS ::= tkn_id 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARGSPARAMS",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // ARGSPARAMS ::= tkn_id tkn_coma ARGSPARAMS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARGSPARAMS",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // FUNCION ::= TIPO tkn_id tkn_parentesisiz FUNCIONPARAMS tkn_parentesisde tkn_llaveiz BLOQUE tkn_return RETURN tkn_puntocoma tkn_llaveder 
            {
              Object RESULT =null;
		System.out.println("DENTRO DE UNA FUNCION");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCION",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // DECLAPARAM ::= TIPO tkn_id 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLAPARAM",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // DECLAPARAM ::= TIPO tkn_id tkn_coma DECLAPARAM 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLAPARAM",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // PARAMS ::= TIPO tkn_id 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMS",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // PARAMS ::= TIPO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMS",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // PARAMS ::= TIPO tkn_coma PARAMS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMS",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // PARAMS ::= TIPO tkn_id tkn_coma PARAMS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMS",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // ARGS ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARGS",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // ARGS ::= ARGSPARAMS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARGS",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // PROTOPARAMS ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROTOPARAMS",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // PROTOPARAMS ::= PARAMS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROTOPARAMS",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // FUNCIONPARAMS ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCIONPARAMS",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // FUNCIONPARAMS ::= DECLAPARAM 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCIONPARAMS",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // INICIO ::= MAIN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // INICIO ::= PROTOTIPO INICIO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // FUNCIONES ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCIONES",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // FUNCIONES ::= FUNCION FUNCIONES 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCIONES",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // IDINT ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IDINT",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // IDINT ::= RETURN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IDINT",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // IDINT ::= ASIGN RETURN tkn_coma IDINT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IDINT",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // IDINT ::= RETURN tkn_coma IDINT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IDINT",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // DECLARACION ::= TIPO IDINT tkn_puntocoma 
            {
              Object RESULT =null;
		System.out.println("DENTRO DE UNA DECLARACION");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // ASIGN ::= tkn_id tkn_oprel 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGN",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // MAIN ::= tkn_int tkn_main tkn_parentesisiz tkn_parentesisde tkn_llaveiz BLOQUE tkn_return tkn_num tkn_puntocoma tkn_llaveder FUNCIONES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("MAIN",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

