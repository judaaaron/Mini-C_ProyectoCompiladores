
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sat Sep 10 21:36:21 CST 2022
//----------------------------------------------------

package Compiladorcito;

import java_cup.runtime.*;
import java.util.ArrayList;
import java.util.*;
import java.io.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sat Sep 10 21:36:21 CST 2022
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\152\000\002\002\004\000\002\027\015\000\002\027" +
    "\015\000\002\027\015\000\002\027\015\000\002\027\002" +
    "\000\002\045\004\000\002\045\004\000\002\020\010\000" +
    "\002\040\003\000\002\040\003\000\002\040\003\000\002" +
    "\040\003\000\002\006\005\000\002\015\005\000\002\015" +
    "\006\000\002\015\003\000\002\015\002\000\002\031\004" +
    "\000\002\031\002\000\002\002\004\000\002\002\003\000" +
    "\002\024\003\000\002\024\002\000\002\030\003\000\002" +
    "\030\002\000\002\037\003\000\002\037\002\000\002\033" +
    "\006\000\002\033\005\000\002\033\003\000\002\033\004" +
    "\000\002\025\006\000\002\025\004\000\002\023\015\000" +
    "\002\023\015\000\002\023\015\000\002\023\015\000\002" +
    "\023\015\000\002\036\005\000\002\036\003\000\002\035" +
    "\011\000\002\026\010\000\002\026\003\000\002\004\012" +
    "\000\002\004\012\000\002\004\012\000\002\011\006\000" +
    "\002\011\004\000\002\011\002\000\002\005\020\000\002" +
    "\005\017\000\002\005\020\000\002\005\020\000\002\005" +
    "\020\000\002\003\011\000\002\003\011\000\002\003\011" +
    "\000\002\003\011\000\002\007\004\000\002\007\004\000" +
    "\002\007\004\000\002\007\004\000\002\007\004\000\002" +
    "\007\004\000\002\007\004\000\002\007\004\000\002\007" +
    "\004\000\002\007\004\000\002\007\002\000\002\010\005" +
    "\000\002\010\005\000\002\010\007\000\002\010\007\000" +
    "\002\010\005\000\002\010\003\000\002\012\005\000\002" +
    "\014\003\000\002\014\003\000\002\014\003\000\002\014" +
    "\003\000\002\014\003\000\002\014\003\000\002\042\006" +
    "\000\002\043\005\000\002\043\005\000\002\043\005\000" +
    "\002\043\005\000\002\043\003\000\002\016\011\000\002" +
    "\016\007\000\002\016\011\000\002\016\011\000\002\016" +
    "\011\000\002\022\012\000\002\022\012\000\002\022\012" +
    "\000\002\022\012\000\002\022\012\000\002\032\003\000" +
    "\002\032\003\000\002\032\003\000\002\046\003\000\002" +
    "\046\003\000\002\046\005\000\002\021\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0141\000\020\002\ufffc\003\014\012\015\013\011\014" +
    "\004\036\016\037\012\001\002\000\016\022\uffb0\040\uffb0" +
    "\041\uffb0\043\uffb0\044\uffb0\054\uffb0\001\002\000\004\002" +
    "\uffec\001\002\000\020\002\uffd6\003\uffd6\012\uffd6\013\uffd6" +
    "\014\uffd6\036\uffd6\037\uffd6\001\002\000\004\002\u0143\001" +
    "\002\000\020\002\ufffc\003\014\012\015\013\011\014\004" +
    "\036\016\037\012\001\002\000\016\022\uffb2\040\uffb2\041" +
    "\uffb2\043\uffb2\044\uffb2\054\uffb2\001\002\000\016\022\uffb4" +
    "\040\uffb4\041\uffb4\043\uffb4\044\uffb4\054\uffb4\001\002\000" +
    "\012\040\u0136\041\ufff0\043\056\054\025\001\002\000\016" +
    "\022\uffaf\040\uffaf\041\uffaf\043\uffaf\044\uffaf\054\uffaf\001" +
    "\002\000\016\022\uffb3\040\uffb3\041\uffb3\043\uffb3\044\uffb3" +
    "\054\uffb3\001\002\000\016\003\017\011\020\040\uffb1\041" +
    "\uffb1\043\uffb1\054\uffb1\001\002\000\004\021\u012d\001\002" +
    "\000\004\021\021\001\002\000\006\003\022\022\023\001" +
    "\002\000\004\023\u0126\001\002\000\004\023\024\001\002" +
    "\000\042\003\014\012\015\013\011\014\004\016\050\017" +
    "\052\021\043\027\040\030\uffbc\031\030\032\054\036\044" +
    "\037\012\040\051\043\056\054\025\001\002\000\032\003" +
    "\uff9c\004\uff9c\005\uff9c\007\uff9c\010\uff9c\022\uff9c\025\uff9c" +
    "\026\uff9c\035\uff9c\041\uff9c\042\uff9c\044\uff9c\001\002\000" +
    "\044\003\014\012\015\013\011\014\004\016\050\017\052" +
    "\021\043\024\uffbc\027\040\030\uffbc\031\030\032\054\036" +
    "\044\037\012\040\051\043\056\054\025\001\002\000\016" +
    "\003\uffb6\022\uffb6\025\u0122\026\u0121\041\uffb6\042\uffb6\001" +
    "\002\000\004\021\u0110\001\002\000\044\003\014\012\015" +
    "\013\011\014\004\016\050\017\052\021\043\024\uffbc\027" +
    "\040\030\uffbc\031\030\032\054\036\044\037\012\040\051" +
    "\043\056\054\025\001\002\000\044\003\014\012\015\013" +
    "\011\014\004\016\050\017\052\021\043\024\uffbc\027\040" +
    "\030\uffbc\031\030\032\054\036\044\037\012\040\051\043" +
    "\056\054\025\001\002\000\044\003\014\012\015\013\011" +
    "\014\004\016\050\017\052\021\043\024\uffbc\027\040\030" +
    "\uffbc\031\030\032\054\036\044\037\012\040\051\043\056" +
    "\054\025\001\002\000\026\003\uffa9\004\uffa9\005\uffa9\007" +
    "\uffa9\010\uffa9\022\uffa9\025\uffa9\026\uffa9\041\uffa9\042\uffa9" +
    "\001\002\000\044\003\014\012\015\013\011\014\004\016" +
    "\050\017\052\021\043\024\uffbc\027\040\030\uffbc\031\030" +
    "\032\054\036\044\037\012\040\051\043\056\054\025\001" +
    "\002\000\004\030\337\001\002\000\044\003\014\012\015" +
    "\013\011\014\004\016\050\017\052\021\043\024\uffbc\027" +
    "\040\030\uffbc\031\030\032\054\036\044\037\012\040\051" +
    "\043\056\054\025\001\002\000\006\003\260\021\261\001" +
    "\002\000\012\004\214\005\212\007\211\010\220\001\002" +
    "\000\012\040\232\041\ufff0\043\056\054\025\001\002\000" +
    "\012\021\207\040\062\043\056\054\025\001\002\000\016" +
    "\022\uffb1\040\uffb1\041\uffb1\043\uffb1\044\uffb1\054\uffb1\001" +
    "\002\000\044\003\014\012\015\013\011\014\004\016\050" +
    "\017\052\021\043\024\uffbc\027\040\030\uffbc\031\030\032" +
    "\054\036\044\037\012\040\051\043\056\054\025\001\002" +
    "\000\044\003\014\012\015\013\011\014\004\016\050\017" +
    "\052\021\043\024\uffbc\027\040\030\uffbc\031\030\032\054" +
    "\036\044\037\012\040\051\043\056\054\025\001\002\000" +
    "\044\003\014\012\015\013\011\014\004\016\050\017\052" +
    "\021\043\024\uffbc\027\040\030\uffbc\031\030\032\054\036" +
    "\044\037\012\040\051\043\056\054\025\001\002\000\006" +
    "\003\153\021\154\001\002\000\016\004\146\005\uff9e\007" +
    "\uff9e\010\uff9e\033\145\034\144\001\002\000\006\003\121" +
    "\021\122\001\002\000\044\003\014\012\015\013\011\014" +
    "\004\016\050\017\052\021\043\024\uffbc\027\040\030\uffbc" +
    "\031\030\032\054\036\044\037\012\040\051\043\056\054" +
    "\025\001\002\000\006\003\071\021\072\001\002\000\004" +
    "\042\057\001\002\000\032\003\uff9d\004\uff9d\005\uff9d\007" +
    "\uff9d\010\uff9d\022\uff9d\025\uff9d\026\uff9d\035\uff9d\041\uff9d" +
    "\042\uff9d\044\uff9d\001\002\000\016\021\043\031\030\040" +
    "\062\043\056\053\060\054\025\001\002\000\006\035\ufff8" +
    "\041\ufff8\001\002\000\006\035\ufff7\041\ufff7\001\002\000" +
    "\032\003\uff9e\004\uff9e\005\uff9e\007\uff9e\010\uff9e\022\uff9e" +
    "\025\uff9e\026\uff9e\035\uff9e\041\uff9e\042\uff9e\044\uff9e\001" +
    "\002\000\006\035\ufff6\041\ufff6\001\002\000\016\004\uffa9" +
    "\005\uffa9\007\uffa9\010\uffa9\035\ufff5\041\ufff5\001\002\000" +
    "\004\035\066\001\002\000\016\021\043\031\030\040\062" +
    "\043\056\053\060\054\025\001\002\000\004\041\070\001" +
    "\002\000\050\003\ufff9\012\ufff9\013\ufff9\014\ufff9\016\ufff9" +
    "\017\ufff9\021\ufff9\024\ufff9\027\ufff9\030\ufff9\031\ufff9\032" +
    "\ufff9\035\ufff9\036\ufff9\037\ufff9\040\ufff9\041\ufff9\043\ufff9" +
    "\054\ufff9\001\002\000\004\053\112\001\002\000\004\053" +
    "\073\001\002\000\004\044\074\001\002\000\006\003\075" +
    "\052\076\001\002\000\004\040\107\001\002\000\006\003" +
    "\077\040\100\001\002\000\004\022\105\001\002\000\006" +
    "\003\101\022\102\001\002\000\004\041\104\001\002\000" +
    "\004\041\103\001\002\000\044\003\uffa3\012\uffa3\013\uffa3" +
    "\014\uffa3\016\uffa3\017\uffa3\021\uffa3\024\uffa3\027\uffa3\030" +
    "\uffa3\031\uffa3\032\uffa3\036\uffa3\037\uffa3\040\uffa3\043\uffa3" +
    "\054\uffa3\001\002\000\044\003\uffa0\012\uffa0\013\uffa0\014" +
    "\uffa0\016\uffa0\017\uffa0\021\uffa0\024\uffa0\027\uffa0\030\uffa0" +
    "\031\uffa0\032\uffa0\036\uffa0\037\uffa0\040\uffa0\043\uffa0\054" +
    "\uffa0\001\002\000\004\041\106\001\002\000\044\003\uffa1" +
    "\012\uffa1\013\uffa1\014\uffa1\016\uffa1\017\uffa1\021\uffa1\024" +
    "\uffa1\027\uffa1\030\uffa1\031\uffa1\032\uffa1\036\uffa1\037\uffa1" +
    "\040\uffa1\043\uffa1\054\uffa1\001\002\000\004\022\110\001" +
    "\002\000\004\041\111\001\002\000\044\003\uffa2\012\uffa2" +
    "\013\uffa2\014\uffa2\016\uffa2\017\uffa2\021\uffa2\024\uffa2\027" +
    "\uffa2\030\uffa2\031\uffa2\032\uffa2\036\uffa2\037\uffa2\040\uffa2" +
    "\043\uffa2\054\uffa2\001\002\000\004\044\113\001\002\000" +
    "\004\052\114\001\002\000\004\040\115\001\002\000\004" +
    "\022\116\001\002\000\004\041\117\001\002\000\044\003" +
    "\uff9f\012\uff9f\013\uff9f\014\uff9f\016\uff9f\017\uff9f\021\uff9f" +
    "\024\uff9f\027\uff9f\030\uff9f\031\uff9f\032\uff9f\036\uff9f\037" +
    "\uff9f\040\uff9f\043\uff9f\054\uff9f\001\002\000\006\024\uffc5" +
    "\030\uffc5\001\002\000\012\021\043\040\062\043\056\054" +
    "\025\001\002\000\012\021\043\040\062\043\056\054\025" +
    "\001\002\000\006\003\124\022\125\001\002\000\004\023" +
    "\134\001\002\000\006\003\126\023\127\001\002\000\042" +
    "\003\014\012\015\013\011\014\004\016\050\017\052\021" +
    "\043\024\uffbc\027\040\031\030\032\054\036\044\037\012" +
    "\040\051\043\056\054\025\001\002\000\042\003\014\012" +
    "\015\013\011\014\004\016\050\017\052\021\043\024\uffbc" +
    "\027\040\031\030\032\054\036\044\037\012\040\051\043" +
    "\056\054\025\001\002\000\004\024\131\001\002\000\044" +
    "\003\uffca\012\uffca\013\uffca\014\uffca\016\uffca\017\uffca\021" +
    "\uffca\024\uffca\027\uffca\030\uffca\031\uffca\032\uffca\036\uffca" +
    "\037\uffca\040\uffca\043\uffca\054\uffca\001\002\000\004\024" +
    "\133\001\002\000\044\003\uffc9\012\uffc9\013\uffc9\014\uffc9" +
    "\016\uffc9\017\uffc9\021\uffc9\024\uffc9\027\uffc9\030\uffc9\031" +
    "\uffc9\032\uffc9\036\uffc9\037\uffc9\040\uffc9\043\uffc9\054\uffc9" +
    "\001\002\000\042\003\014\012\015\013\011\014\004\016" +
    "\050\017\052\021\043\024\uffbc\027\040\031\030\032\054" +
    "\036\044\037\012\040\051\043\056\054\025\001\002\000" +
    "\004\024\136\001\002\000\044\003\uffc7\012\uffc7\013\uffc7" +
    "\014\uffc7\016\uffc7\017\uffc7\021\uffc7\024\uffc7\027\uffc7\030" +
    "\uffc7\031\uffc7\032\uffc7\036\uffc7\037\uffc7\040\uffc7\043\uffc7" +
    "\054\uffc7\001\002\000\004\022\140\001\002\000\004\023" +
    "\141\001\002\000\042\003\014\012\015\013\011\014\004" +
    "\016\050\017\052\021\043\024\uffbc\027\040\031\030\032" +
    "\054\036\044\037\012\040\051\043\056\054\025\001\002" +
    "\000\004\024\143\001\002\000\044\003\uffc8\012\uffc8\013" +
    "\uffc8\014\uffc8\016\uffc8\017\uffc8\021\uffc8\024\uffc8\027\uffc8" +
    "\030\uffc8\031\uffc8\032\uffc8\036\uffc8\037\uffc8\040\uffc8\043" +
    "\uffc8\054\uffc8\001\002\000\006\022\uff9a\041\uff9a\001\002" +
    "\000\006\022\uff9b\041\uff9b\001\002\000\004\010\151\001" +
    "\002\000\004\041\150\001\002\000\044\003\uff98\012\uff98" +
    "\013\uff98\014\uff98\016\uff98\017\uff98\021\uff98\024\uff98\027" +
    "\uff98\030\uff98\031\uff98\032\uff98\036\uff98\037\uff98\040\uff98" +
    "\043\uff98\054\uff98\001\002\000\010\040\062\043\056\054" +
    "\025\001\002\000\006\022\uff99\041\uff99\001\002\000\012" +
    "\021\043\040\062\043\056\054\025\001\002\000\012\021" +
    "\043\040\062\043\056\054\025\001\002\000\004\022\156" +
    "\001\002\000\006\003\157\023\160\001\002\000\042\003" +
    "\014\012\015\013\011\014\004\016\050\017\052\021\043" +
    "\024\uffbc\027\040\031\030\032\054\036\044\037\012\040" +
    "\051\043\056\054\025\001\002\000\042\003\014\012\015" +
    "\013\011\014\004\016\050\017\052\021\043\024\uffbc\027" +
    "\040\031\030\032\054\036\044\037\012\040\051\043\056" +
    "\054\025\001\002\000\004\024\162\001\002\000\046\003" +
    "\uffd0\012\uffd0\013\uffd0\014\uffd0\016\uffd0\017\uffd0\020\163" +
    "\021\uffd0\024\uffd0\027\uffd0\030\uffd0\031\uffd0\032\uffd0\036" +
    "\uffd0\037\uffd0\040\uffd0\043\uffd0\054\uffd0\001\002\000\006" +
    "\016\050\023\166\001\002\000\044\003\uffd5\012\uffd5\013" +
    "\uffd5\014\uffd5\016\uffd5\017\uffd5\021\uffd5\024\uffd5\027\uffd5" +
    "\030\uffd5\031\uffd5\032\uffd5\036\uffd5\037\uffd5\040\uffd5\043" +
    "\uffd5\054\uffd5\001\002\000\044\003\uffd1\012\uffd1\013\uffd1" +
    "\014\uffd1\016\uffd1\017\uffd1\021\uffd1\024\uffd1\027\uffd1\030" +
    "\uffd1\031\uffd1\032\uffd1\036\uffd1\037\uffd1\040\uffd1\043\uffd1" +
    "\054\uffd1\001\002\000\042\003\014\012\015\013\011\014" +
    "\004\016\050\017\052\021\043\024\uffbc\027\040\031\030" +
    "\032\054\036\044\037\012\040\051\043\056\054\025\001" +
    "\002\000\004\024\170\001\002\000\044\003\uffd2\012\uffd2" +
    "\013\uffd2\014\uffd2\016\uffd2\017\uffd2\021\uffd2\024\uffd2\027" +
    "\uffd2\030\uffd2\031\uffd2\032\uffd2\036\uffd2\037\uffd2\040\uffd2" +
    "\043\uffd2\054\uffd2\001\002\000\004\024\172\001\002\000" +
    "\046\003\uffd0\012\uffd0\013\uffd0\014\uffd0\016\uffd0\017\uffd0" +
    "\020\163\021\uffd0\024\uffd0\027\uffd0\030\uffd0\031\uffd0\032" +
    "\uffd0\036\uffd0\037\uffd0\040\uffd0\043\uffd0\054\uffd0\001\002" +
    "\000\044\003\uffd3\012\uffd3\013\uffd3\014\uffd3\016\uffd3\017" +
    "\uffd3\021\uffd3\024\uffd3\027\uffd3\030\uffd3\031\uffd3\032\uffd3" +
    "\036\uffd3\037\uffd3\040\uffd3\043\uffd3\054\uffd3\001\002\000" +
    "\004\022\175\001\002\000\004\023\176\001\002\000\042" +
    "\003\014\012\015\013\011\014\004\016\050\017\052\021" +
    "\043\024\uffbc\027\040\031\030\032\054\036\044\037\012" +
    "\040\051\043\056\054\025\001\002\000\004\024\200\001" +
    "\002\000\046\003\uffd0\012\uffd0\013\uffd0\014\uffd0\016\uffd0" +
    "\017\uffd0\020\163\021\uffd0\024\uffd0\027\uffd0\030\uffd0\031" +
    "\uffd0\032\uffd0\036\uffd0\037\uffd0\040\uffd0\043\uffd0\054\uffd0" +
    "\001\002\000\044\003\uffd4\012\uffd4\013\uffd4\014\uffd4\016" +
    "\uffd4\017\uffd4\021\uffd4\024\uffd4\027\uffd4\030\uffd4\031\uffd4" +
    "\032\uffd4\036\uffd4\037\uffd4\040\uffd4\043\uffd4\054\uffd4\001" +
    "\002\000\006\024\uffbd\030\uffbd\001\002\000\006\024\uffbf" +
    "\030\uffbf\001\002\000\006\024\uffc0\030\uffc0\001\002\000" +
    "\004\022\222\001\002\000\014\004\214\005\212\007\211" +
    "\010\220\022\213\001\002\000\012\021\207\040\062\043" +
    "\056\054\025\001\002\000\012\004\214\005\212\007\211" +
    "\022\213\001\002\000\012\021\207\040\062\043\056\054" +
    "\025\001\002\000\012\021\207\040\062\043\056\054\025" +
    "\001\002\000\026\003\uffaa\004\uffaa\005\uffaa\007\uffaa\010" +
    "\uffaa\022\uffaa\025\uffaa\026\uffaa\041\uffaa\042\uffaa\001\002" +
    "\000\012\021\207\040\062\043\056\054\025\001\002\000" +
    "\026\003\uffad\004\uffad\005\212\007\211\010\uffad\022\uffad" +
    "\025\uffad\026\uffad\041\uffad\042\uffad\001\002\000\026\003" +
    "\uffac\004\uffac\005\uffac\007\uffac\010\uffac\022\uffac\025\uffac" +
    "\026\uffac\041\uffac\042\uffac\001\002\000\026\003\uffab\004" +
    "\uffab\005\uffab\007\uffab\010\uffab\022\uffab\025\uffab\026\uffab" +
    "\041\uffab\042\uffab\001\002\000\012\021\207\040\062\043" +
    "\056\054\025\001\002\000\024\003\uffb5\004\214\005\212" +
    "\007\211\022\uffb5\025\uffb5\026\uffb5\041\uffb5\042\uffb5\001" +
    "\002\000\016\003\uffb7\022\uffb7\025\224\026\223\041\uffb7" +
    "\042\uffb7\001\002\000\012\021\043\040\062\043\056\054" +
    "\025\001\002\000\012\021\043\040\062\043\056\054\025" +
    "\001\002\000\012\003\uffb9\022\uffb9\041\uffb9\042\uffb9\001" +
    "\002\000\012\003\uffb8\022\uffb8\041\uffb8\042\uffb8\001\002" +
    "\000\012\021\207\040\246\043\056\054\025\001\002\000" +
    "\004\041\243\001\002\000\006\041\ufff1\044\235\001\002" +
    "\000\012\003\233\010\234\041\uff9e\044\uff9e\001\002\000" +
    "\012\021\ufffa\040\ufffa\043\ufffa\054\ufffa\001\002\000\012" +
    "\021\ufffb\040\ufffb\043\ufffb\054\ufffb\001\002\000\012\040" +
    "\232\041\ufff0\043\056\054\025\001\002\000\010\040\062" +
    "\043\056\054\025\001\002\000\004\041\ufff3\001\002\000" +
    "\004\044\241\001\002\000\012\040\232\041\ufff0\043\056" +
    "\054\025\001\002\000\004\041\ufff2\001\002\000\046\002" +
    "\ufff4\003\ufff4\012\ufff4\013\ufff4\014\ufff4\016\ufff4\017\ufff4" +
    "\021\ufff4\024\ufff4\027\ufff4\030\ufff4\031\ufff4\032\ufff4\036" +
    "\ufff4\037\ufff4\040\ufff4\043\ufff4\054\ufff4\001\002\000\012" +
    "\004\214\005\212\007\211\041\257\001\002\000\014\004" +
    "\uffa9\005\uffa9\007\uffa9\041\uffa9\044\241\001\002\000\016" +
    "\004\uff9e\005\uff9e\007\uff9e\021\247\041\uff9e\044\uff9e\001" +
    "\002\000\006\022\uffe6\040\251\001\002\000\004\022\uffe7" +
    "\001\002\000\006\022\uffd9\044\255\001\002\000\004\022" +
    "\253\001\002\000\004\041\254\001\002\000\044\003\uffd8" +
    "\012\uffd8\013\uffd8\014\uffd8\016\uffd8\017\uffd8\021\uffd8\024" +
    "\uffd8\027\uffd8\030\uffd8\031\uffd8\032\uffd8\036\uffd8\037\uffd8" +
    "\040\uffd8\043\uffd8\054\uffd8\001\002\000\004\040\251\001" +
    "\002\000\004\022\uffda\001\002\000\044\003\uffae\012\uffae" +
    "\013\uffae\014\uffae\016\uffae\017\uffae\021\uffae\024\uffae\027" +
    "\uffae\030\uffae\031\uffae\032\uffae\036\uffae\037\uffae\040\uffae" +
    "\043\uffae\054\uffae\001\002\000\004\036\322\001\002\000" +
    "\006\036\264\040\263\001\002\000\010\040\062\043\056" +
    "\054\025\001\002\000\006\003\233\010\234\001\002\000" +
    "\004\040\263\001\002\000\010\040\062\043\056\054\025" +
    "\001\002\000\004\041\267\001\002\000\012\021\043\040" +
    "\062\043\056\054\025\001\002\000\004\041\271\001\002" +
    "\000\004\040\272\001\002\000\012\003\273\004\146\033" +
    "\145\034\144\001\002\000\004\022\304\001\002\000\004" +
    "\022\275\001\002\000\006\003\276\023\277\001\002\000" +
    "\042\003\014\012\015\013\011\014\004\016\050\017\052" +
    "\021\043\024\uffbc\027\040\031\030\032\054\036\044\037" +
    "\012\040\051\043\056\054\025\001\002\000\042\003\014" +
    "\012\015\013\011\014\004\016\050\017\052\021\043\024" +
    "\uffbc\027\040\031\030\032\054\036\044\037\012\040\051" +
    "\043\056\054\025\001\002\000\004\024\301\001\002\000" +
    "\044\003\uffcf\012\uffcf\013\uffcf\014\uffcf\016\uffcf\017\uffcf" +
    "\021\uffcf\024\uffcf\027\uffcf\030\uffcf\031\uffcf\032\uffcf\036" +
    "\uffcf\037\uffcf\040\uffcf\043\uffcf\054\uffcf\001\002\000\004" +
    "\024\303\001\002\000\044\003\uffcb\012\uffcb\013\uffcb\014" +
    "\uffcb\016\uffcb\017\uffcb\021\uffcb\024\uffcb\027\uffcb\030\uffcb" +
    "\031\uffcb\032\uffcb\036\uffcb\037\uffcb\040\uffcb\043\uffcb\054" +
    "\uffcb\001\002\000\004\023\305\001\002\000\042\003\014" +
    "\012\015\013\011\014\004\016\050\017\052\021\043\024" +
    "\uffbc\027\040\031\030\032\054\036\044\037\012\040\051" +
    "\043\056\054\025\001\002\000\004\024\307\001\002\000" +
    "\044\003\uffcc\012\uffcc\013\uffcc\014\uffcc\016\uffcc\017\uffcc" +
    "\021\uffcc\024\uffcc\027\uffcc\030\uffcc\031\uffcc\032\uffcc\036" +
    "\uffcc\037\uffcc\040\uffcc\043\uffcc\054\uffcc\001\002\000\004" +
    "\041\311\001\002\000\012\021\043\040\062\043\056\054" +
    "\025\001\002\000\004\041\313\001\002\000\004\040\314" +
    "\001\002\000\010\004\146\033\145\034\144\001\002\000" +
    "\004\022\316\001\002\000\004\023\317\001\002\000\042" +
    "\003\014\012\015\013\011\014\004\016\050\017\052\021" +
    "\043\024\uffbc\027\040\031\030\032\054\036\044\037\012" +
    "\040\051\043\056\054\025\001\002\000\004\024\321\001" +
    "\002\000\044\003\uffce\012\uffce\013\uffce\014\uffce\016\uffce" +
    "\017\uffce\021\uffce\024\uffce\027\uffce\030\uffce\031\uffce\032" +
    "\uffce\036\uffce\037\uffce\040\uffce\043\uffce\054\uffce\001\002" +
    "\000\004\040\263\001\002\000\010\040\062\043\056\054" +
    "\025\001\002\000\004\041\325\001\002\000\012\021\043" +
    "\040\062\043\056\054\025\001\002\000\004\041\327\001" +
    "\002\000\004\040\330\001\002\000\010\004\146\033\145" +
    "\034\144\001\002\000\004\022\332\001\002\000\004\023" +
    "\333\001\002\000\042\003\014\012\015\013\011\014\004" +
    "\016\050\017\052\021\043\024\uffbc\027\040\031\030\032" +
    "\054\036\044\037\012\040\051\043\056\054\025\001\002" +
    "\000\004\024\335\001\002\000\044\003\uffcd\012\uffcd\013" +
    "\uffcd\014\uffcd\016\uffcd\017\uffcd\021\uffcd\024\uffcd\027\uffcd" +
    "\030\uffcd\031\uffcd\032\uffcd\036\uffcd\037\uffcd\040\uffcd\043" +
    "\uffcd\054\uffcd\001\002\000\006\024\uffc2\030\uffc2\001\002" +
    "\000\004\043\340\001\002\000\006\003\341\041\342\001" +
    "\002\000\004\024\u010a\001\002\000\004\024\343\001\002" +
    "\000\020\002\uffee\003\014\012\015\013\011\014\004\036" +
    "\044\037\012\001\002\000\004\002\000\001\002\000\004" +
    "\040\350\001\002\000\020\002\uffee\003\014\012\015\013" +
    "\011\014\004\036\044\037\012\001\002\000\004\002\uffef" +
    "\001\002\000\006\003\351\021\352\001\002\000\020\003" +
    "\014\012\015\013\011\014\004\022\uffea\036\044\037\012" +
    "\001\002\000\020\003\014\012\015\013\011\014\004\022" +
    "\uffea\036\044\037\012\001\002\000\004\022\361\001\002" +
    "\000\004\040\356\001\002\000\004\022\uffeb\001\002\000" +
    "\006\022\uffe0\044\357\001\002\000\016\003\014\012\015" +
    "\013\011\014\004\036\044\037\012\001\002\000\004\022" +
    "\uffe1\001\002\000\006\003\362\023\363\001\002\000\042" +
    "\003\014\012\015\013\011\014\004\016\050\017\052\021" +
    "\043\027\040\030\uffbc\031\030\032\054\036\044\037\012" +
    "\040\051\043\056\054\025\001\002\000\042\003\014\012" +
    "\015\013\011\014\004\016\050\017\052\021\043\027\040" +
    "\030\uffbc\031\030\032\054\036\044\037\012\040\051\043" +
    "\056\054\025\001\002\000\004\030\365\001\002\000\010" +
    "\040\062\043\056\054\025\001\002\000\004\041\367\001" +
    "\002\000\006\003\370\024\371\001\002\000\020\002\uffde" +
    "\003\uffde\012\uffde\013\uffde\014\uffde\036\uffde\037\uffde\001" +
    "\002\000\020\002\uffdf\003\uffdf\012\uffdf\013\uffdf\014\uffdf" +
    "\036\uffdf\037\uffdf\001\002\000\004\030\373\001\002\000" +
    "\010\040\062\043\056\054\025\001\002\000\004\041\375" +
    "\001\002\000\004\024\376\001\002\000\020\002\uffdd\003" +
    "\uffdd\012\uffdd\013\uffdd\014\uffdd\036\uffdd\037\uffdd\001\002" +
    "\000\004\022\u0100\001\002\000\004\023\u0101\001\002\000" +
    "\042\003\014\012\015\013\011\014\004\016\050\017\052" +
    "\021\043\027\040\030\uffbc\031\030\032\054\036\044\037" +
    "\012\040\051\043\056\054\025\001\002\000\004\030\u0103" +
    "\001\002\000\012\003\u0105\040\062\043\056\054\025\001" +
    "\002\000\004\041\u0108\001\002\000\004\041\u0106\001\002" +
    "\000\004\024\u0107\001\002\000\020\002\uffdb\003\uffdb\012" +
    "\uffdb\013\uffdb\014\uffdb\036\uffdb\037\uffdb\001\002\000\004" +
    "\024\u0109\001\002\000\020\002\uffdc\003\uffdc\012\uffdc\013" +
    "\uffdc\014\uffdc\036\uffdc\037\uffdc\001\002\000\020\002\uffee" +
    "\003\014\012\015\013\011\014\004\036\044\037\012\001" +
    "\002\000\004\002\ufffd\001\002\000\006\024\uffc4\030\uffc4" +
    "\001\002\000\006\024\uffc3\030\uffc3\001\002\000\006\024" +
    "\uffc1\030\uffc1\001\002\000\006\024\uffc6\030\uffc6\001\002" +
    "\000\004\053\u0111\001\002\000\010\003\u0113\022\u0114\044" +
    "\u0112\001\002\000\006\003\u0119\040\u011a\001\002\000\004" +
    "\040\u0116\001\002\000\004\041\u0115\001\002\000\050\003" +
    "\uffa7\012\uffa7\013\uffa7\014\uffa7\016\uffa7\017\uffa7\021\uffa7" +
    "\024\uffa7\027\uffa7\030\uffa7\031\uffa7\032\uffa7\035\uffa7\036" +
    "\uffa7\037\uffa7\040\uffa7\041\uffa7\043\uffa7\054\uffa7\001\002" +
    "\000\004\022\u0117\001\002\000\004\041\u0118\001\002\000" +
    "\050\003\uffa6\012\uffa6\013\uffa6\014\uffa6\016\uffa6\017\uffa6" +
    "\021\uffa6\024\uffa6\027\uffa6\030\uffa6\031\uffa6\032\uffa6\035" +
    "\uffa6\036\uffa6\037\uffa6\040\uffa6\041\uffa6\043\uffa6\054\uffa6" +
    "\001\002\000\004\022\u011f\001\002\000\006\003\u011b\022" +
    "\u011c\001\002\000\004\041\u011e\001\002\000\004\041\u011d" +
    "\001\002\000\050\003\uffa8\012\uffa8\013\uffa8\014\uffa8\016" +
    "\uffa8\017\uffa8\021\uffa8\024\uffa8\027\uffa8\030\uffa8\031\uffa8" +
    "\032\uffa8\035\uffa8\036\uffa8\037\uffa8\040\uffa8\041\uffa8\043" +
    "\uffa8\054\uffa8\001\002\000\050\003\uffa4\012\uffa4\013\uffa4" +
    "\014\uffa4\016\uffa4\017\uffa4\021\uffa4\024\uffa4\027\uffa4\030" +
    "\uffa4\031\uffa4\032\uffa4\035\uffa4\036\uffa4\037\uffa4\040\uffa4" +
    "\041\uffa4\043\uffa4\054\uffa4\001\002\000\004\041\u0120\001" +
    "\002\000\050\003\uffa5\012\uffa5\013\uffa5\014\uffa5\016\uffa5" +
    "\017\uffa5\021\uffa5\024\uffa5\027\uffa5\030\uffa5\031\uffa5\032" +
    "\uffa5\035\uffa5\036\uffa5\037\uffa5\040\uffa5\041\uffa5\043\uffa5" +
    "\054\uffa5\001\002\000\012\021\043\040\062\043\056\054" +
    "\025\001\002\000\012\021\043\040\062\043\056\054\025" +
    "\001\002\000\012\003\uffbb\022\uffbb\041\uffbb\042\uffbb\001" +
    "\002\000\012\003\uffba\022\uffba\041\uffba\042\uffba\001\002" +
    "\000\006\024\uffbe\030\uffbe\001\002\000\042\003\014\012" +
    "\015\013\011\014\004\016\050\017\052\021\043\027\040" +
    "\030\uffbc\031\030\032\054\036\044\037\012\040\051\043" +
    "\056\054\025\001\002\000\004\030\u0128\001\002\000\004" +
    "\043\u0129\001\002\000\004\041\u012a\001\002\000\004\024" +
    "\u012b\001\002\000\020\002\uffee\003\014\012\015\013\011" +
    "\014\004\036\044\037\012\001\002\000\004\002\uffff\001" +
    "\002\000\004\022\u012e\001\002\000\004\023\u012f\001\002" +
    "\000\042\003\014\012\015\013\011\014\004\016\050\017" +
    "\052\021\043\027\040\030\uffbc\031\030\032\054\036\044" +
    "\037\012\040\051\043\056\054\025\001\002\000\004\030" +
    "\u0131\001\002\000\004\043\u0132\001\002\000\004\041\u0133" +
    "\001\002\000\004\024\u0134\001\002\000\020\002\uffee\003" +
    "\014\012\015\013\011\014\004\036\044\037\012\001\002" +
    "\000\004\002\ufffe\001\002\000\014\003\233\010\234\021" +
    "\u0137\041\uff9e\044\uff9e\001\002\000\020\003\014\012\015" +
    "\013\011\014\004\022\uffe8\036\044\037\012\001\002\000" +
    "\004\022\uffe9\001\002\000\010\022\uffe3\040\u013e\044\u013d" +
    "\001\002\000\004\022\u013b\001\002\000\004\041\u013c\001" +
    "\002\000\020\002\uffd7\003\uffd7\012\uffd7\013\uffd7\014\uffd7" +
    "\036\uffd7\037\uffd7\001\002\000\016\003\014\012\015\013" +
    "\011\014\004\036\044\037\012\001\002\000\006\022\uffe2" +
    "\044\u013f\001\002\000\016\003\014\012\015\013\011\014" +
    "\004\036\044\037\012\001\002\000\004\022\uffe5\001\002" +
    "\000\004\022\uffe4\001\002\000\004\002\uffed\001\002\000" +
    "\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0141\000\014\002\006\006\005\014\012\026\007\027" +
    "\004\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\002\u0141\006\005\014" +
    "\012\026\007\027\004\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\015\227\032\230\045\235\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\042\003\030\004\034\005\052" +
    "\006\032\007\035\010\054\012\026\014\041\016\036\020" +
    "\046\021\025\022\031\032\033\035\045\042\044\043\040" +
    "\001\001\000\002\001\001\000\042\003\030\004\034\005" +
    "\052\006\032\007\u0124\010\054\012\026\014\041\016\036" +
    "\020\046\021\025\022\031\032\033\035\045\042\044\043" +
    "\040\001\001\000\002\001\001\000\002\001\001\000\042" +
    "\003\030\004\034\005\052\006\032\007\u010e\010\054\012" +
    "\026\014\041\016\036\020\046\021\025\022\031\032\033" +
    "\035\045\042\044\043\040\001\001\000\042\003\030\004" +
    "\034\005\052\006\032\007\u010d\010\054\012\026\014\041" +
    "\016\036\020\046\021\025\022\031\032\033\035\045\042" +
    "\044\043\040\001\001\000\042\003\030\004\034\005\052" +
    "\006\032\007\u010c\010\054\012\026\014\041\016\036\020" +
    "\046\021\025\022\031\032\033\035\045\042\044\043\040" +
    "\001\001\000\002\001\001\000\042\003\030\004\034\005" +
    "\052\006\032\007\u010b\010\054\012\026\014\041\016\036" +
    "\020\046\021\025\022\031\032\033\035\045\042\044\043" +
    "\040\001\001\000\002\001\001\000\042\003\030\004\034" +
    "\005\052\006\032\007\335\010\054\012\026\014\041\016" +
    "\036\020\046\021\025\022\031\032\033\035\045\042\044" +
    "\043\040\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\015\227\032\230\045\226\001\001\000\010\012\204" +
    "\032\033\043\205\001\001\000\002\001\001\000\042\003" +
    "\030\004\034\005\052\006\032\007\203\010\054\012\026" +
    "\014\041\016\036\020\046\021\025\022\031\032\033\035" +
    "\045\042\044\043\040\001\001\000\042\003\030\004\034" +
    "\005\052\006\032\007\202\010\054\012\026\014\041\016" +
    "\036\020\046\021\025\022\031\032\033\035\045\042\044" +
    "\043\040\001\001\000\042\003\030\004\034\005\052\006" +
    "\032\007\201\010\054\012\026\014\041\016\036\020\046" +
    "\021\025\022\031\032\033\035\045\042\044\043\040\001" +
    "\001\000\002\001\001\000\004\046\146\001\001\000\002" +
    "\001\001\000\042\003\030\004\034\005\052\006\032\007" +
    "\117\010\054\012\026\014\041\016\036\020\046\021\025" +
    "\022\031\032\033\035\045\042\044\043\040\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\010\054\012\026\016\060\020\062\032\063\040\064\043" +
    "\040\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\010\054\012\026\016\060\020\062\032\063" +
    "\040\066\043\040\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\010\136\012\026\032" +
    "\033\043\040\001\001\000\012\010\122\012\026\032\033" +
    "\043\040\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\042\003\030\004\034\005\052\006\032" +
    "\007\131\010\054\012\026\014\041\016\036\020\046\021" +
    "\025\022\031\032\033\035\045\042\044\043\040\001\001" +
    "\000\042\003\030\004\034\005\052\006\032\007\127\010" +
    "\054\012\026\014\041\016\036\020\046\021\025\022\031" +
    "\032\033\035\045\042\044\043\040\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\042\003\030\004\034\005\052\006\032\007\134\010" +
    "\054\012\026\014\041\016\036\020\046\021\025\022\031" +
    "\032\033\035\045\042\044\043\040\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\042\003\030\004\034\005\052\006\032\007\141\010" +
    "\054\012\026\014\041\016\036\020\046\021\025\022\031" +
    "\032\033\035\045\042\044\043\040\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\032\151\001\001\000\002\001\001\000\012\010\173" +
    "\012\026\032\033\043\040\001\001\000\012\010\154\012" +
    "\026\032\033\043\040\001\001\000\002\001\001\000\002" +
    "\001\001\000\042\003\030\004\034\005\052\006\032\007" +
    "\170\010\054\012\026\014\041\016\036\020\046\021\025" +
    "\022\031\032\033\035\045\042\044\043\040\001\001\000" +
    "\042\003\030\004\034\005\052\006\032\007\160\010\054" +
    "\012\026\014\041\016\036\020\046\021\025\022\031\032" +
    "\033\035\045\042\044\043\040\001\001\000\002\001\001" +
    "\000\004\011\163\001\001\000\004\004\164\001\001\000" +
    "\002\001\001\000\002\001\001\000\042\003\030\004\034" +
    "\005\052\006\032\007\166\010\054\012\026\014\041\016" +
    "\036\020\046\021\025\022\031\032\033\035\045\042\044" +
    "\043\040\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\011\172\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\042\003\030\004" +
    "\034\005\052\006\032\007\176\010\054\012\026\014\041" +
    "\016\036\020\046\021\025\022\031\032\033\035\045\042" +
    "\044\043\040\001\001\000\002\001\001\000\004\011\200" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\032\033\043\207\001\001\000\002\001\001\000" +
    "\006\032\033\043\216\001\001\000\006\032\033\043\215" +
    "\001\001\000\002\001\001\000\006\032\033\043\214\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\032\033\043\220\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\010\225\012\026\032\033\043\040" +
    "\001\001\000\012\010\224\012\026\032\033\043\040\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\032\244" +
    "\043\243\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\015\236\032\230\045\235\001\001\000\004\032\237\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\015\241" +
    "\032\230\045\235\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\036\247\037\251\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\036\255\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\045\261\001\001" +
    "\000\004\032\307\001\001\000\002\001\001\000\004\045" +
    "\264\001\001\000\004\032\265\001\001\000\002\001\001" +
    "\000\012\010\267\012\026\032\033\043\040\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\046\273\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\042\003\030\004\034\005\052\006\032\007\301\010\054" +
    "\012\026\014\041\016\036\020\046\021\025\022\031\032" +
    "\033\035\045\042\044\043\040\001\001\000\042\003\030" +
    "\004\034\005\052\006\032\007\277\010\054\012\026\014" +
    "\041\016\036\020\046\021\025\022\031\032\033\035\045" +
    "\042\044\043\040\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\042\003\030\004\034\005\052\006\032\007\305\010" +
    "\054\012\026\014\041\016\036\020\046\021\025\022\031" +
    "\032\033\035\045\042\044\043\040\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\010\311" +
    "\012\026\032\033\043\040\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\046\314\001\001\000\002\001\001" +
    "\000\002\001\001\000\042\003\030\004\034\005\052\006" +
    "\032\007\317\010\054\012\026\014\041\016\036\020\046" +
    "\021\025\022\031\032\033\035\045\042\044\043\040\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\045\322" +
    "\001\001\000\004\032\323\001\001\000\002\001\001\000" +
    "\012\010\325\012\026\032\033\043\040\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\046\330\001\001\000" +
    "\002\001\001\000\002\001\001\000\042\003\030\004\034" +
    "\005\052\006\032\007\333\010\054\012\026\014\041\016" +
    "\036\020\046\021\025\022\031\032\033\035\045\042\044" +
    "\043\040\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\014\344\023\345\031" +
    "\343\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\014\344\023\345\031\346\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\014\353\024\376\025\354\001\001" +
    "\000\010\014\353\024\352\025\354\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\014\353\025\357\001\001\000\002\001\001\000" +
    "\002\001\001\000\042\003\030\004\034\005\052\006\032" +
    "\007\371\010\054\012\026\014\041\016\036\020\046\021" +
    "\025\022\031\032\033\035\045\042\044\043\040\001\001" +
    "\000\042\003\030\004\034\005\052\006\032\007\363\010" +
    "\054\012\026\014\041\016\036\020\046\021\025\022\031" +
    "\032\033\035\045\042\044\043\040\001\001\000\002\001" +
    "\001\000\004\032\365\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\032\373\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\042\003\030\004\034\005\052\006\032\007\u0101" +
    "\010\054\012\026\014\041\016\036\020\046\021\025\022" +
    "\031\032\033\035\045\042\044\043\040\001\001\000\002" +
    "\001\001\000\004\032\u0103\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\014\344\023\345\031" +
    "\u010a\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\010\u0123\012\026\032\033\043\040\001\001\000" +
    "\012\010\u0122\012\026\032\033\043\040\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\042\003" +
    "\030\004\034\005\052\006\032\007\u0126\010\054\012\026" +
    "\014\041\016\036\020\046\021\025\022\031\032\033\035" +
    "\045\042\044\043\040\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\014" +
    "\344\023\345\031\u012b\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\042\003\030\004\034\005" +
    "\052\006\032\007\u012f\010\054\012\026\014\041\016\036" +
    "\020\046\021\025\022\031\032\033\035\045\042\044\043" +
    "\040\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\014\344\023\345\031" +
    "\u0134\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\014\u0138\030\u0139\033\u0137\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\014\u0138\033\u0140\001\001\000\002\001" +
    "\001\000\006\014\u0138\033\u013f\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



     ArrayList gramas = new ArrayList();
    public int cont = 0;
    public int maximo(){
    int a=5;
    return a;
}
    ArrayList errores=new ArrayList();
    public Symbol s;
    @Override
    public void syntax_error (Symbol s){
        if(s.left==-1){
        }else{
                errores.add("Syntax error en la línea: " + (s.left) + " , columna: " +(s.right)+ " con el símbolo = "+(s.value));
    }
}
    @Override
    public void unrecovered_syntax_error(Symbol s){
    if(s.left==-1){
    }else{
        errores.add("Error desconocido, por favor revise la linea: " + (s.left ) + " y columna:  " + (s.right )+ "Con simbolo: "+s.value);
    }    
    }
    public Symbol getS(){
        return this.s;
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // CONTADOR ::= tkn_id ITERADOR tkn_puntocoma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTADOR",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // ITERADOR ::= tkn_opadicion tkn_oprel RETURN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ITERADOR",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // ITERADOR ::= tkn_decrement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ITERADOR",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // ITERADOR ::= tkn_increment 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ITERADOR",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // RETURN ::= tkn_caracter 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("RETURN",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // RETURN ::= tkn_num 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("RETURN",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // RETURN ::= tkn_id 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("RETURN",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // SCANF ::= tkn_scanf error tkn_cadena tkn_coma tkn_ampersand tkn_id tkn_parentesisde tkn_puntocoma 
            {
              Object RESULT =null;
		parser.errores.add("parentesis de apertura '(' ausente en la funcion scanf");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SCANF",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // SCANF ::= tkn_scanf tkn_parentesisiz tkn_cadena tkn_coma tkn_ampersand tkn_id error tkn_puntocoma 
            {
              Object RESULT =null;
		parser.errores.add("parentesis de cierre ')' ausente en la funcion scanf");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SCANF",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // SCANF ::= tkn_scanf tkn_parentesisiz tkn_cadena tkn_coma tkn_ampersand error tkn_parentesisde tkn_puntocoma 
            {
              Object RESULT =null;
		parser.errores.add("identificador ausente en la funcion scanf");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SCANF",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // SCANF ::= tkn_scanf tkn_parentesisiz tkn_cadena tkn_coma error tkn_id tkn_parentesisde tkn_puntocoma 
            {
              Object RESULT =null;
		parser.errores.add("Puntero a identificador '&' ausente en la funcion scanf");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SCANF",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // SCANF ::= tkn_scanf tkn_parentesisiz tkn_cadena tkn_coma tkn_ampersand tkn_id tkn_parentesisde tkn_puntocoma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SCANF",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // PRINTF ::= tkn_printf tkn_parentesisiz tkn_cadena tkn_coma tkn_id error tkn_puntocoma 
            {
              Object RESULT =null;
		parser.errores.add("parentesis de cierre '(' ausente en la funcion printf");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRINTF",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // PRINTF ::= tkn_printf tkn_parentesisiz tkn_cadena tkn_coma error tkn_parentesisde tkn_puntocoma 
            {
              Object RESULT =null;
		parser.errores.add("identificador ausente en la funcion printf");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRINTF",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // PRINTF ::= tkn_printf tkn_parentesisiz tkn_cadena error tkn_id tkn_parentesisde tkn_puntocoma 
            {
              Object RESULT =null;
		parser.errores.add("coma ',' ausente en la funcion printf");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRINTF",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // PRINTF ::= tkn_printf tkn_parentesisiz tkn_cadena tkn_parentesisde tkn_puntocoma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRINTF",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // PRINTF ::= tkn_printf tkn_parentesisiz tkn_cadena tkn_coma tkn_id tkn_parentesisde tkn_puntocoma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRINTF",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // EXPR ::= RETURN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPR",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // EXPR ::= tkn_parentesisiz EXPR tkn_parentesisde 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPR",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // EXPR ::= EXPR tkn_opmod EXPR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPR",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // EXPR ::= EXPR tkn_opmulti EXPR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPR",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // EXPR ::= EXPR tkn_opadicion EXPR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPR",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // EXPRFIN ::= TIPO ASIGN EXPR tkn_puntocoma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRFIN",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // TIPO ::= error 
            {
              Object RESULT =null;
		parser.errores.add("Tipo de dato incorrecto\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // TIPO ::= tkn_void 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // TIPO ::= tkn_int 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // TIPO ::= tkn_charp 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // TIPO ::= tkn_intp 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // TIPO ::= tkn_char 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // CONDICIONP ::= EXPR tkn_oprel EXPR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICIONP",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // CONDICION ::= CONDICIONP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICION",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // CONDICION ::= tkn_parentesisiz CONDICIONP tkn_parentesisde 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICION",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // CONDICION ::= tkn_parentesisiz CONDICIONP tkn_parentesisde tkn_or CONDICION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICION",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // CONDICION ::= tkn_parentesisiz CONDICIONP tkn_parentesisde tkn_and CONDICION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICION",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // CONDICION ::= CONDICIONP tkn_or CONDICION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICION",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // CONDICION ::= CONDICIONP tkn_and CONDICION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICION",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // BLOQUE ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // BLOQUE ::= TERNARIO BLOQUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // BLOQUE ::= CONTADOR BLOQUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // BLOQUE ::= LLAMADO BLOQUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // BLOQUE ::= EXPRFIN BLOQUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // BLOQUE ::= SCANF BLOQUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // BLOQUE ::= PRINTF BLOQUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // BLOQUE ::= DECLARACION BLOQUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // BLOQUE ::= IF BLOQUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // BLOQUE ::= FOR BLOQUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // BLOQUE ::= WHILE BLOQUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // WHILE ::= tkn_while tkn_parentesisiz CONDICION error tkn_llaveiz BLOQUE tkn_llaveder 
            {
              Object RESULT =null;
		parser.errores.add("Parentesis de cierre ')' ausente en bloque while");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("WHILE",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // WHILE ::= tkn_while error CONDICION tkn_parentesisde tkn_llaveiz BLOQUE tkn_llaveder 
            {
              Object RESULT =null;
		parser.errores.add("Parentesis de apertura '(' ausente en bloque while");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("WHILE",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // WHILE ::= tkn_while tkn_parentesisiz CONDICION tkn_parentesisde error BLOQUE tkn_llaveder 
            {
              Object RESULT =null;
		parser.errores.add("Llave de apertura '{' ausente en bloque while");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("WHILE",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // WHILE ::= tkn_while tkn_parentesisiz CONDICION tkn_parentesisde tkn_llaveiz BLOQUE tkn_llaveder 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("WHILE",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // FOR ::= tkn_for tkn_parentesisiz tkn_int ASIGN RETURN tkn_puntocoma CONDICION tkn_puntocoma tkn_id ITERADOR tkn_parentesisde error BLOQUE tkn_llaveder 
            {
              Object RESULT =null;
		parser.errores.add("Llave de apertura '{' ausente en bloque for");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FOR",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // FOR ::= tkn_for tkn_parentesisiz tkn_int ASIGN RETURN tkn_puntocoma CONDICION tkn_puntocoma tkn_id error tkn_parentesisde tkn_llaveiz BLOQUE tkn_llaveder 
            {
              Object RESULT =null;
		parser.errores.add("autoincremento o autodecremento ausente en bloque for");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FOR",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // FOR ::= tkn_for error tkn_int ASIGN RETURN tkn_puntocoma CONDICION tkn_puntocoma tkn_id ITERADOR tkn_parentesisde tkn_llaveiz BLOQUE tkn_llaveder 
            {
              Object RESULT =null;
		parser.errores.add("Parentesis de apertura '(' ausente en bloque for");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FOR",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // FOR ::= tkn_for tkn_parentesisiz ASIGN RETURN tkn_puntocoma CONDICION tkn_puntocoma tkn_id ITERADOR tkn_parentesisde tkn_llaveiz BLOQUE tkn_llaveder 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FOR",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // FOR ::= tkn_for tkn_parentesisiz tkn_int ASIGN RETURN tkn_puntocoma CONDICION tkn_puntocoma tkn_id ITERADOR tkn_parentesisde tkn_llaveiz BLOQUE tkn_llaveder 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FOR",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // ELSE ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ELSE",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // ELSE ::= tkn_else IF 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ELSE",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // ELSE ::= tkn_else tkn_llaveiz BLOQUE tkn_llaveder 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ELSE",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // IF ::= tkn_if tkn_parentesisiz CONDICION tkn_parentesisde error BLOQUE tkn_llaveder ELSE 
            {
              Object RESULT =null;
		parser.errores.add("Llave de apertura ausente en bloque if");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IF",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // IF ::= tkn_if error CONDICION tkn_parentesisde tkn_llaveiz BLOQUE tkn_llaveder ELSE 
            {
              Object RESULT =null;
		parser.errores.add("Parentesis de apertura ausente");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IF",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // IF ::= tkn_if tkn_parentesisiz CONDICION tkn_parentesisde tkn_llaveiz BLOQUE tkn_llaveder ELSE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IF",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // PROTOTIPO ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROTOTIPO",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // PROTOTIPO ::= TIPO tkn_id tkn_parentesisiz PROTOPARAMS tkn_parentesisde tkn_puntocoma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROTOTIPO",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // LLAMADO ::= TIPO ASIGN tkn_id tkn_parentesisiz ARGS tkn_parentesisde tkn_puntocoma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LLAMADO",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // ARGSPARAMS ::= tkn_id 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARGSPARAMS",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // ARGSPARAMS ::= tkn_id tkn_coma ARGSPARAMS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARGSPARAMS",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // FUNCION ::= TIPO tkn_id error FUNCIONPARAMS tkn_parentesisde tkn_llaveiz BLOQUE tkn_return error tkn_puntocoma tkn_llaveder 
            {
              Object RESULT =null;
		parser.errores.add("Tipo de retorno inválido en la funcion\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCION",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // FUNCION ::= TIPO tkn_id error FUNCIONPARAMS tkn_parentesisde tkn_llaveiz BLOQUE tkn_return RETURN tkn_puntocoma tkn_llaveder 
            {
              Object RESULT =null;
		parser.errores.add("Parentesis de apertura '(' ausente en la funcion\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCION",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // FUNCION ::= TIPO tkn_id tkn_parentesisiz FUNCIONPARAMS tkn_parentesisde error BLOQUE tkn_return RETURN tkn_puntocoma tkn_llaveder 
            {
              Object RESULT =null;
		parser.errores.add("Llave de apertura '{' ausente en la funcion\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCION",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // FUNCION ::= TIPO tkn_id tkn_parentesisiz FUNCIONPARAMS tkn_parentesisde tkn_llaveiz BLOQUE tkn_return RETURN tkn_puntocoma error 
            {
              Object RESULT =null;
		parser.errores.add("Llave de cierre '}' ausente en la funcion\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCION",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // FUNCION ::= TIPO tkn_id tkn_parentesisiz FUNCIONPARAMS tkn_parentesisde tkn_llaveiz BLOQUE tkn_return RETURN tkn_puntocoma tkn_llaveder 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCION",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // DECLAPARAM ::= TIPO tkn_id 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLAPARAM",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // DECLAPARAM ::= TIPO tkn_id tkn_coma DECLAPARAM 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLAPARAM",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // PARAMS ::= TIPO tkn_id 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMS",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // PARAMS ::= TIPO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMS",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // PARAMS ::= TIPO tkn_coma PARAMS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMS",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // PARAMS ::= TIPO tkn_id tkn_coma PARAMS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMS",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ARGS ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARGS",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // ARGS ::= ARGSPARAMS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARGS",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // PROTOPARAMS ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROTOPARAMS",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // PROTOPARAMS ::= PARAMS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROTOPARAMS",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // FUNCIONPARAMS ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCIONPARAMS",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // FUNCIONPARAMS ::= DECLAPARAM 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCIONPARAMS",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // INICIO ::= MAIN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // INICIO ::= PROTOTIPO INICIO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // FUNCIONES ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCIONES",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // FUNCIONES ::= FUNCION FUNCIONES 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCIONES",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // IDINT ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IDINT",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // IDINT ::= RETURN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IDINT",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // IDINT ::= ASIGN RETURN tkn_coma IDINT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IDINT",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // IDINT ::= RETURN tkn_coma IDINT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IDINT",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // DECLARACION ::= TIPO IDINT tkn_puntocoma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // EXPRTERNARIO ::= RETURN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRTERNARIO",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // EXPRTERNARIO ::= TERNARIO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRTERNARIO",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // EXPRTERNARIO ::= PRINTF 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRTERNARIO",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // EXPRTERNARIO ::= tkn_cadena 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRTERNARIO",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // TERNARIO ::= CONDICION tkn_ternario EXPRTERNARIO tkn_dospuntos EXPRTERNARIO tkn_puntocoma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TERNARIO",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // ASIGN ::= tkn_id error 
            {
              Object RESULT =null;
		parser.errores.add("Nomenclatura incorrecta de asignación\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGN",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // ASIGN ::= tkn_id tkn_oprel 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGN",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // MAIN ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("MAIN",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // MAIN ::= tkn_int tkn_main tkn_parentesisiz tkn_parentesisde tkn_llaveiz BLOQUE tkn_return tkn_num error tkn_llaveder FUNCIONES 
            {
              Object RESULT =null;
		parser.errores.add("Punto y coma o llave de cierre ausente en retorno funcion main\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MAIN",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // MAIN ::= tkn_int error tkn_parentesisiz tkn_parentesisde tkn_llaveiz BLOQUE tkn_return tkn_num tkn_puntocoma tkn_llaveder FUNCIONES 
            {
              Object RESULT =null;
		parser.errores.add("No hay funcion main o no esta escrito la palabra main\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MAIN",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // MAIN ::= tkn_int tkn_main tkn_parentesisiz error tkn_llaveiz BLOQUE tkn_return tkn_num tkn_puntocoma tkn_llaveder FUNCIONES 
            {
              Object RESULT =null;
		parser.errores.add("Parentesis de cierre ')' ausente en el main\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MAIN",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // MAIN ::= tkn_int tkn_main tkn_parentesisiz tkn_parentesisde tkn_llaveiz BLOQUE tkn_return tkn_num tkn_puntocoma tkn_llaveder FUNCIONES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("MAIN",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

