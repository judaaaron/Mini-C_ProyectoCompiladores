
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Sep 08 12:31:32 CST 2022
//----------------------------------------------------

package Compiladorcito;

import java_cup.runtime.*;
import java.util.ArrayList;
import java.util.*;
import java.io.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Sep 08 12:31:32 CST 2022
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\112\000\002\002\004\000\002\031\015\000\002\050" +
    "\004\000\002\006\005\000\002\017\005\000\002\017\006" +
    "\000\002\017\003\000\002\017\002\000\002\033\004\000" +
    "\002\033\002\000\002\002\004\000\002\002\003\000\002" +
    "\026\003\000\002\026\002\000\002\032\003\000\002\032" +
    "\002\000\002\042\003\000\002\042\002\000\002\035\006" +
    "\000\002\035\005\000\002\035\003\000\002\035\004\000" +
    "\002\027\006\000\002\027\004\000\002\025\015\000\002" +
    "\041\005\000\002\041\003\000\002\037\011\000\002\030" +
    "\010\000\002\030\003\000\002\004\012\000\002\012\006" +
    "\000\002\012\004\000\002\012\002\000\002\005\020\000" +
    "\002\003\011\000\002\007\004\000\002\007\004\000\002" +
    "\007\004\000\002\007\004\000\002\007\004\000\002\007" +
    "\004\000\002\007\004\000\002\007\004\000\002\007\004" +
    "\000\002\007\002\000\002\010\005\000\002\010\005\000" +
    "\002\010\007\000\002\010\007\000\002\010\005\000\002" +
    "\010\003\000\002\013\005\000\002\016\003\000\002\016" +
    "\003\000\002\016\003\000\002\016\003\000\002\016\003" +
    "\000\002\045\006\000\002\045\005\000\002\046\005\000" +
    "\002\046\005\000\002\046\005\000\002\046\005\000\002" +
    "\046\003\000\002\020\011\000\002\020\007\000\002\034" +
    "\003\000\002\034\003\000\002\034\003\000\002\051\003" +
    "\000\002\051\003\000\002\051\005\000\002\023\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\265\000\014\012\014\013\011\014\004\036\015\037" +
    "\013\001\002\000\016\022\uffc8\040\uffc8\041\uffc8\043\uffc8" +
    "\044\uffc8\054\uffc8\001\002\000\014\012\uffe4\013\uffe4\014" +
    "\uffe4\036\uffe4\037\uffe4\001\002\000\004\002\ufff6\001\002" +
    "\000\004\002\267\001\002\000\014\012\014\013\011\014" +
    "\004\036\015\037\013\001\002\000\016\022\uffca\040\uffca" +
    "\041\uffca\043\uffca\044\uffca\054\uffca\001\002\000\012\040" +
    "\252\041\ufffa\043\055\054\047\001\002\000\016\022\uffcc" +
    "\040\uffcc\041\uffcc\043\uffcc\044\uffcc\054\uffcc\001\002\000" +
    "\016\022\uffcb\040\uffcb\041\uffcb\043\uffcb\044\uffcb\054\uffcb" +
    "\001\002\000\014\011\016\040\uffc9\041\uffc9\043\uffc9\054" +
    "\uffc9\001\002\000\004\021\017\001\002\000\004\022\020" +
    "\001\002\000\004\023\021\001\002\000\030\012\014\013" +
    "\011\014\004\016\040\017\042\027\033\030\uffd4\031\023" +
    "\036\035\037\013\040\041\001\002\000\032\012\014\013" +
    "\011\014\004\016\040\017\042\024\uffd4\027\033\030\uffd4" +
    "\031\023\036\035\037\013\040\041\001\002\000\004\021" +
    "\241\001\002\000\032\012\014\013\011\014\004\016\040" +
    "\017\042\024\uffd4\027\033\030\uffd4\031\023\036\035\037" +
    "\013\040\041\001\002\000\032\012\014\013\011\014\004" +
    "\016\040\017\042\024\uffd4\027\033\030\uffd4\031\023\036" +
    "\035\037\013\040\041\001\002\000\032\012\014\013\011" +
    "\014\004\016\040\017\042\024\uffd4\027\033\030\uffd4\031" +
    "\023\036\035\037\013\040\041\001\002\000\012\021\060" +
    "\040\053\043\055\054\047\001\002\000\004\030\205\001" +
    "\002\000\032\012\014\013\011\014\004\016\040\017\042" +
    "\024\uffd4\027\033\030\uffd4\031\023\036\035\037\013\040" +
    "\041\001\002\000\032\012\014\013\011\014\004\016\040" +
    "\017\042\024\uffd4\027\033\030\uffd4\031\023\036\035\037" +
    "\013\040\041\001\002\000\004\021\165\001\002\000\012" +
    "\040\141\041\ufffa\043\055\054\047\001\002\000\016\022" +
    "\uffc9\040\uffc9\041\uffc9\043\uffc9\044\uffc9\054\uffc9\001\002" +
    "\000\032\012\014\013\011\014\004\016\040\017\042\024" +
    "\uffd4\027\033\030\uffd4\031\023\036\035\037\013\040\041" +
    "\001\002\000\032\012\014\013\011\014\004\016\040\017" +
    "\042\024\uffd4\027\033\030\uffd4\031\023\036\035\037\013" +
    "\040\041\001\002\000\004\021\120\001\002\000\012\004" +
    "\112\010\113\033\111\034\110\001\002\000\004\021\045" +
    "\001\002\000\032\012\014\013\011\014\004\016\040\017" +
    "\042\024\uffd4\027\033\030\uffd4\031\023\036\035\037\013" +
    "\040\041\001\002\000\006\024\uffdc\030\uffdc\001\002\000" +
    "\012\021\054\040\053\043\055\054\047\001\002\000\012" +
    "\022\uffce\025\105\026\104\041\uffce\001\002\000\024\004" +
    "\uffbc\005\uffbc\007\uffbc\010\uffbc\022\uffbc\025\uffbc\026\uffbc" +
    "\041\uffbc\044\uffbc\001\002\000\004\022\100\001\002\000" +
    "\012\004\065\005\063\007\062\010\071\001\002\000\022" +
    "\004\uffc1\005\uffc1\007\uffc1\010\uffc1\022\uffc1\025\uffc1\026" +
    "\uffc1\041\uffc1\001\002\000\024\004\uffbe\005\uffbe\007\uffbe" +
    "\010\uffbe\022\uffbe\025\uffbe\026\uffbe\041\uffbe\044\uffbe\001" +
    "\002\000\012\021\060\040\053\043\055\054\047\001\002" +
    "\000\024\004\uffbd\005\uffbd\007\uffbd\010\uffbd\022\uffbd\025" +
    "\uffbd\026\uffbd\041\uffbd\044\uffbd\001\002\000\004\022\073" +
    "\001\002\000\014\004\065\005\063\007\062\010\071\022" +
    "\064\001\002\000\012\021\060\040\053\043\055\054\047" +
    "\001\002\000\012\004\065\005\063\007\062\022\064\001" +
    "\002\000\012\021\060\040\053\043\055\054\047\001\002" +
    "\000\012\021\060\040\053\043\055\054\047\001\002\000" +
    "\022\004\uffc2\005\uffc2\007\uffc2\010\uffc2\022\uffc2\025\uffc2" +
    "\026\uffc2\041\uffc2\001\002\000\012\021\060\040\053\043" +
    "\055\054\047\001\002\000\022\004\uffc5\005\063\007\062" +
    "\010\uffc5\022\uffc5\025\uffc5\026\uffc5\041\uffc5\001\002\000" +
    "\022\004\uffc4\005\uffc4\007\uffc4\010\uffc4\022\uffc4\025\uffc4" +
    "\026\uffc4\041\uffc4\001\002\000\022\004\uffc3\005\uffc3\007" +
    "\uffc3\010\uffc3\022\uffc3\025\uffc3\026\uffc3\041\uffc3\001\002" +
    "\000\012\021\060\040\053\043\055\054\047\001\002\000" +
    "\020\004\065\005\063\007\062\022\uffcd\025\uffcd\026\uffcd" +
    "\041\uffcd\001\002\000\012\022\uffcf\025\075\026\074\041" +
    "\uffcf\001\002\000\012\021\054\040\053\043\055\054\047" +
    "\001\002\000\012\021\054\040\053\043\055\054\047\001" +
    "\002\000\006\022\uffd1\041\uffd1\001\002\000\006\022\uffd0" +
    "\041\uffd0\001\002\000\004\023\101\001\002\000\030\012" +
    "\014\013\011\014\004\016\040\017\042\024\uffd4\027\033" +
    "\031\023\036\035\037\013\040\041\001\002\000\004\024" +
    "\103\001\002\000\032\012\uffde\013\uffde\014\uffde\016\uffde" +
    "\017\uffde\024\uffde\027\uffde\030\uffde\031\uffde\036\uffde\037" +
    "\uffde\040\uffde\001\002\000\012\021\054\040\053\043\055" +
    "\054\047\001\002\000\012\021\054\040\053\043\055\054" +
    "\047\001\002\000\006\022\uffd3\041\uffd3\001\002\000\006" +
    "\022\uffd2\041\uffd2\001\002\000\006\022\uffba\041\uffba\001" +
    "\002\000\006\022\uffbb\041\uffbb\001\002\000\004\010\116" +
    "\001\002\000\012\021\uffff\040\uffff\043\uffff\054\uffff\001" +
    "\002\000\004\041\115\001\002\000\032\012\uffb8\013\uffb8" +
    "\014\uffb8\016\uffb8\017\uffb8\024\uffb8\027\uffb8\030\uffb8\031" +
    "\uffb8\036\uffb8\037\uffb8\040\uffb8\001\002\000\010\040\053" +
    "\043\055\054\047\001\002\000\006\022\uffb9\041\uffb9\001" +
    "\002\000\012\021\054\040\053\043\055\054\047\001\002" +
    "\000\004\022\122\001\002\000\004\023\123\001\002\000" +
    "\030\012\014\013\011\014\004\016\040\017\042\024\uffd4" +
    "\027\033\031\023\036\035\037\013\040\041\001\002\000" +
    "\004\024\125\001\002\000\034\012\uffe0\013\uffe0\014\uffe0" +
    "\016\uffe0\017\uffe0\020\127\024\uffe0\027\uffe0\030\uffe0\031" +
    "\uffe0\036\uffe0\037\uffe0\040\uffe0\001\002\000\032\012\uffe3" +
    "\013\uffe3\014\uffe3\016\uffe3\017\uffe3\024\uffe3\027\uffe3\030" +
    "\uffe3\031\uffe3\036\uffe3\037\uffe3\040\uffe3\001\002\000\006" +
    "\016\040\023\131\001\002\000\032\012\uffe1\013\uffe1\014" +
    "\uffe1\016\uffe1\017\uffe1\024\uffe1\027\uffe1\030\uffe1\031\uffe1" +
    "\036\uffe1\037\uffe1\040\uffe1\001\002\000\030\012\014\013" +
    "\011\014\004\016\040\017\042\024\uffd4\027\033\031\023" +
    "\036\035\037\013\040\041\001\002\000\004\024\133\001" +
    "\002\000\032\012\uffe2\013\uffe2\014\uffe2\016\uffe2\017\uffe2" +
    "\024\uffe2\027\uffe2\030\uffe2\031\uffe2\036\uffe2\037\uffe2\040" +
    "\uffe2\001\002\000\006\024\uffd6\030\uffd6\001\002\000\006" +
    "\024\uffd7\030\uffd7\001\002\000\012\021\060\040\153\043" +
    "\055\054\047\001\002\000\004\041\150\001\002\000\006" +
    "\041\ufffb\044\142\001\002\000\010\010\113\041\uffbe\044" +
    "\uffbe\001\002\000\012\040\141\041\ufffa\043\055\054\047" +
    "\001\002\000\010\040\053\043\055\054\047\001\002\000" +
    "\004\041\ufffd\001\002\000\004\044\146\001\002\000\012" +
    "\040\141\041\ufffa\043\055\054\047\001\002\000\004\041" +
    "\ufffc\001\002\000\032\012\ufffe\013\ufffe\014\ufffe\016\ufffe" +
    "\017\ufffe\024\ufffe\027\ufffe\030\ufffe\031\ufffe\036\ufffe\037" +
    "\ufffe\040\ufffe\001\002\000\012\004\065\005\063\007\062" +
    "\041\164\001\002\000\014\004\uffc1\005\uffc1\007\uffc1\041" +
    "\uffc1\044\146\001\002\000\016\004\uffbe\005\uffbe\007\uffbe" +
    "\021\154\041\uffbe\044\uffbe\001\002\000\006\022\ufff0\040" +
    "\155\001\002\000\006\022\uffe7\044\162\001\002\000\004" +
    "\022\ufff1\001\002\000\004\022\160\001\002\000\004\041" +
    "\161\001\002\000\032\012\uffe6\013\uffe6\014\uffe6\016\uffe6" +
    "\017\uffe6\024\uffe6\027\uffe6\030\uffe6\031\uffe6\036\uffe6\037" +
    "\uffe6\040\uffe6\001\002\000\004\040\155\001\002\000\004" +
    "\022\uffe8\001\002\000\032\012\uffc7\013\uffc7\014\uffc7\016" +
    "\uffc7\017\uffc7\024\uffc7\027\uffc7\030\uffc7\031\uffc7\036\uffc7" +
    "\037\uffc7\040\uffc7\001\002\000\004\036\166\001\002\000" +
    "\004\040\170\001\002\000\010\040\053\043\055\054\047" +
    "\001\002\000\004\010\113\001\002\000\004\041\172\001" +
    "\002\000\012\021\054\040\053\043\055\054\047\001\002" +
    "\000\004\041\174\001\002\000\004\040\175\001\002\000" +
    "\010\004\112\033\111\034\110\001\002\000\004\022\177" +
    "\001\002\000\004\023\200\001\002\000\030\012\014\013" +
    "\011\014\004\016\040\017\042\024\uffd4\027\033\031\023" +
    "\036\035\037\013\040\041\001\002\000\004\024\202\001" +
    "\002\000\032\012\uffdf\013\uffdf\014\uffdf\016\uffdf\017\uffdf" +
    "\024\uffdf\027\uffdf\030\uffdf\031\uffdf\036\uffdf\037\uffdf\040" +
    "\uffdf\001\002\000\006\024\uffd9\030\uffd9\001\002\000\006" +
    "\024\uffdb\030\uffdb\001\002\000\004\043\206\001\002\000" +
    "\004\041\207\001\002\000\004\024\210\001\002\000\016" +
    "\002\ufff8\012\014\013\011\014\004\036\035\037\013\001" +
    "\002\000\016\002\ufff8\012\014\013\011\014\004\036\035" +
    "\037\013\001\002\000\004\002\000\001\002\000\004\040" +
    "\214\001\002\000\004\021\215\001\002\000\016\012\014" +
    "\013\011\014\004\022\ufff4\036\035\037\013\001\002\000" +
    "\004\022\ufff5\001\002\000\004\022\224\001\002\000\004" +
    "\040\221\001\002\000\006\022\uffea\044\222\001\002\000" +
    "\014\012\014\013\011\014\004\036\035\037\013\001\002" +
    "\000\004\022\uffeb\001\002\000\004\023\225\001\002\000" +
    "\030\012\014\013\011\014\004\016\040\017\042\027\033" +
    "\030\uffd4\031\023\036\035\037\013\040\041\001\002\000" +
    "\004\030\227\001\002\000\010\040\053\043\055\054\047" +
    "\001\002\000\004\041\231\001\002\000\004\024\232\001" +
    "\002\000\016\002\uffe9\012\uffe9\013\uffe9\014\uffe9\036\uffe9" +
    "\037\uffe9\001\002\000\004\002\ufff9\001\002\000\012\004" +
    "\065\005\063\007\062\041\235\001\002\000\032\012\uffc6" +
    "\013\uffc6\014\uffc6\016\uffc6\017\uffc6\024\uffc6\027\uffc6\030" +
    "\uffc6\031\uffc6\036\uffc6\037\uffc6\040\uffc6\001\002\000\006" +
    "\024\uffda\030\uffda\001\002\000\006\024\uffd8\030\uffd8\001" +
    "\002\000\006\024\uffdd\030\uffdd\001\002\000\004\053\242" +
    "\001\002\000\006\022\244\044\243\001\002\000\004\040" +
    "\246\001\002\000\004\041\245\001\002\000\032\012\uffbf" +
    "\013\uffbf\014\uffbf\016\uffbf\017\uffbf\024\uffbf\027\uffbf\030" +
    "\uffbf\031\uffbf\036\uffbf\037\uffbf\040\uffbf\001\002\000\004" +
    "\022\247\001\002\000\004\041\250\001\002\000\032\012" +
    "\uffc0\013\uffc0\014\uffc0\016\uffc0\017\uffc0\024\uffc0\027\uffc0" +
    "\030\uffc0\031\uffc0\036\uffc0\037\uffc0\040\uffc0\001\002\000" +
    "\006\024\uffd5\030\uffd5\001\002\000\012\010\113\021\253" +
    "\041\uffbe\044\uffbe\001\002\000\016\012\014\013\011\014" +
    "\004\022\ufff2\036\035\037\013\001\002\000\004\022\264" +
    "\001\002\000\004\022\ufff3\001\002\000\010\022\uffed\040" +
    "\260\044\257\001\002\000\014\012\014\013\011\014\004" +
    "\036\035\037\013\001\002\000\006\022\uffec\044\261\001" +
    "\002\000\014\012\014\013\011\014\004\036\035\037\013" +
    "\001\002\000\004\022\uffef\001\002\000\004\022\uffee\001" +
    "\002\000\004\041\265\001\002\000\014\012\uffe5\013\uffe5" +
    "\014\uffe5\036\uffe5\037\uffe5\001\002\000\004\002\ufff7\001" +
    "\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\265\000\014\002\006\006\004\016\011\030\007\031" +
    "\005\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\002\265\006\004\016" +
    "\011\030\007\031\005\001\001\000\002\001\001\000\010" +
    "\017\136\034\137\050\142\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\032\003\023\004\030\005" +
    "\042\006\025\007\027\016\033\020\031\023\021\024\024" +
    "\037\036\045\035\050\026\001\001\000\032\003\023\004" +
    "\030\005\042\006\025\007\250\016\033\020\031\023\021" +
    "\024\024\037\036\045\035\050\026\001\001\000\002\001" +
    "\001\000\032\003\023\004\030\005\042\006\025\007\237" +
    "\016\033\020\031\023\021\024\024\037\036\045\035\050" +
    "\026\001\001\000\032\003\023\004\030\005\042\006\025" +
    "\007\236\016\033\020\031\023\021\024\024\037\036\045" +
    "\035\050\026\001\001\000\032\003\023\004\030\005\042" +
    "\006\025\007\235\016\033\020\031\023\021\024\024\037" +
    "\036\045\035\050\026\001\001\000\006\034\051\046\233" +
    "\001\001\000\002\001\001\000\032\003\023\004\030\005" +
    "\042\006\025\007\203\016\033\020\031\023\021\024\024" +
    "\037\036\045\035\050\026\001\001\000\032\003\023\004" +
    "\030\005\042\006\025\007\202\016\033\020\031\023\021" +
    "\024\024\037\036\045\035\050\026\001\001\000\002\001" +
    "\001\000\010\017\136\034\137\050\135\001\001\000\002" +
    "\001\001\000\032\003\023\004\030\005\042\006\025\007" +
    "\134\016\033\020\031\023\021\024\024\037\036\045\035" +
    "\050\026\001\001\000\032\003\023\004\030\005\042\006" +
    "\025\007\133\016\033\020\031\023\021\024\024\037\036" +
    "\045\035\050\026\001\001\000\002\001\001\000\004\051" +
    "\113\001\001\000\002\001\001\000\032\003\023\004\030" +
    "\005\042\006\025\007\043\016\033\020\031\023\021\024" +
    "\024\037\036\045\035\050\026\001\001\000\002\001\001" +
    "\000\012\010\047\013\045\034\051\046\050\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\013" +
    "\055\034\051\046\056\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\034\051\046\060\001" +
    "\001\000\002\001\001\000\006\034\051\046\067\001\001" +
    "\000\006\034\051\046\066\001\001\000\002\001\001\000" +
    "\006\034\051\046\065\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\034\051\046\071\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\010\076" +
    "\013\045\034\051\046\050\001\001\000\012\010\075\013" +
    "\045\034\051\046\050\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\032\003\023\004\030\005" +
    "\042\006\025\007\101\016\033\020\031\023\021\024\024" +
    "\037\036\045\035\050\026\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\010\106\013\045\034\051\046\050" +
    "\001\001\000\012\010\105\013\045\034\051\046\050\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\034\116\001\001" +
    "\000\002\001\001\000\012\010\120\013\045\034\051\046" +
    "\050\001\001\000\002\001\001\000\002\001\001\000\032" +
    "\003\023\004\030\005\042\006\025\007\123\016\033\020" +
    "\031\023\021\024\024\037\036\045\035\050\026\001\001" +
    "\000\002\001\001\000\004\012\125\001\001\000\002\001" +
    "\001\000\004\004\127\001\001\000\002\001\001\000\032" +
    "\003\023\004\030\005\042\006\025\007\131\016\033\020" +
    "\031\023\021\024\024\037\036\045\035\050\026\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\034\151\046\150\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\017" +
    "\143\034\137\050\142\001\001\000\004\034\144\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\017\146\034" +
    "\137\050\142\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\041\155\042\156\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\041\162\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\050\166\001\001\000" +
    "\004\034\170\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\010\172\013\045\034\051\046\050\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\051\175\001\001" +
    "\000\002\001\001\000\002\001\001\000\032\003\023\004" +
    "\030\005\042\006\025\007\200\016\033\020\031\023\021" +
    "\024\024\037\036\045\035\050\026\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\016\212\025\210\033\211\001\001\000\010\016\212" +
    "\025\210\033\232\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\016\217\026\216\027\215" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\016\217\027\222\001\001" +
    "\000\002\001\001\000\002\001\001\000\032\003\023\004" +
    "\030\005\042\006\025\007\225\016\033\020\031\023\021" +
    "\024\024\037\036\045\035\050\026\001\001\000\002\001" +
    "\001\000\004\034\227\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\016\255\032\253\035\254" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\016\255\035\262\001\001\000\002\001\001" +
    "\000\006\016\255\035\261\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



     ArrayList gramas = new ArrayList();
    public int cont = 0;
    public int maximo(){
    int a=5;
    return a;
}
    ArrayList errores=new ArrayList();
    public Symbol s;
    @Override
    public void syntax_error (Symbol s){
        if(s.left==-1){
        }else{
                errores.add("Syntax error en la línea: " + (s.left) + " , columna: " +(s.right)+ " con el símbolo = "+(s.value));
    }
}
    @Override
    public void unrecovered_syntax_error(Symbol s){
    if(s.left==-1){
    }else{
        errores.add("Error desconocido, por favor revise la linea: " + (s.left ) + " y columna:  " + (s.right )+ "Con simbolo: "+s.value);
    }    
    }
    public Symbol getS(){
        return this.s;
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // CONTADOR ::= tkn_id ITERADOR tkn_puntocoma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTADOR",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // ITERADOR ::= tkn_opadicion tkn_oprel RETURN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ITERADOR",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // ITERADOR ::= tkn_decrement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ITERADOR",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // ITERADOR ::= tkn_increment 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ITERADOR",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // RETURN ::= tkn_caracter 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("RETURN",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // RETURN ::= tkn_num 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("RETURN",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // RETURN ::= tkn_id 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("RETURN",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // PRINTF ::= tkn_printf tkn_parentesisiz tkn_cadena tkn_parentesisde tkn_puntocoma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRINTF",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // PRINTF ::= tkn_printf tkn_parentesisiz tkn_cadena tkn_coma tkn_id tkn_parentesisde tkn_puntocoma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRINTF",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // EXPR ::= RETURN 
            {
              Object RESULT =null;
		System.out.println("DENTRO DE expr");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPR",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // EXPR ::= tkn_parentesisiz EXPR tkn_parentesisde 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPR",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // EXPR ::= EXPR tkn_opmod EXPR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPR",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // EXPR ::= EXPR tkn_opmulti EXPR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPR",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // EXPR ::= EXPR tkn_opadicion EXPR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPR",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // EXPRFIN ::= ASIGN EXPR tkn_puntocoma 
            {
              Object RESULT =null;
		System.out.println("DENTRO DE exprfins");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRFIN",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // EXPRFIN ::= TIPO ASIGN EXPR tkn_puntocoma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRFIN",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // TIPO ::= tkn_void 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // TIPO ::= tkn_int 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // TIPO ::= tkn_charp 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // TIPO ::= tkn_intp 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // TIPO ::= tkn_char 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // CONDICIONP ::= EXPR tkn_oprel EXPR 
            {
              Object RESULT =null;
		System.out.println("DENTRO DE condicionp");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICIONP",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // CONDICION ::= CONDICIONP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICION",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // CONDICION ::= tkn_parentesisiz CONDICIONP tkn_parentesisde 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICION",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // CONDICION ::= tkn_parentesisiz CONDICIONP tkn_parentesisde tkn_or CONDICION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICION",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // CONDICION ::= tkn_parentesisiz CONDICIONP tkn_parentesisde tkn_and CONDICION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICION",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // CONDICION ::= CONDICIONP tkn_or CONDICION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICION",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // CONDICION ::= CONDICIONP tkn_and CONDICION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICION",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // BLOQUE ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // BLOQUE ::= CONTADOR BLOQUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // BLOQUE ::= LLAMADO BLOQUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // BLOQUE ::= EXPRFIN BLOQUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // BLOQUE ::= SCANF BLOQUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // BLOQUE ::= PRINTF BLOQUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // BLOQUE ::= DECLARACION BLOQUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // BLOQUE ::= IF BLOQUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // BLOQUE ::= FOR BLOQUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // BLOQUE ::= WHILE BLOQUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // WHILE ::= tkn_while tkn_parentesisiz CONDICION tkn_parentesisde tkn_llaveiz BLOQUE tkn_llaveder 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("WHILE",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // FOR ::= tkn_for tkn_parentesisiz tkn_int ASIGN RETURN tkn_puntocoma CONDICION tkn_puntocoma tkn_id ITERADOR tkn_parentesisde tkn_llaveiz BLOQUE tkn_llaveder 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FOR",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // ELSE ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ELSE",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // ELSE ::= tkn_else IF 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ELSE",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ELSE ::= tkn_else tkn_llaveiz BLOQUE tkn_llaveder 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ELSE",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // IF ::= tkn_if tkn_parentesisiz CONDICION tkn_parentesisde tkn_llaveiz BLOQUE tkn_llaveder ELSE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IF",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // PROTOTIPO ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROTOTIPO",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // PROTOTIPO ::= TIPO tkn_id tkn_parentesisiz PROTOPARAMS tkn_parentesisde tkn_puntocoma 
            {
              Object RESULT =null;
		System.out.println("DENTRO DE UN PROTOTIPO");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROTOTIPO",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // LLAMADO ::= TIPO ASIGN tkn_id tkn_parentesisiz ARGS tkn_parentesisde tkn_puntocoma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LLAMADO",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // ARGSPARAMS ::= tkn_id 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARGSPARAMS",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // ARGSPARAMS ::= tkn_id tkn_coma ARGSPARAMS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARGSPARAMS",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // FUNCION ::= TIPO tkn_id tkn_parentesisiz FUNCIONPARAMS tkn_parentesisde tkn_llaveiz BLOQUE tkn_return RETURN tkn_puntocoma tkn_llaveder 
            {
              Object RESULT =null;
		System.out.println("DENTRO DE UNA FUNCION");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCION",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // DECLAPARAM ::= TIPO tkn_id 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLAPARAM",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // DECLAPARAM ::= TIPO tkn_id tkn_coma DECLAPARAM 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLAPARAM",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // PARAMS ::= TIPO tkn_id 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMS",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // PARAMS ::= TIPO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMS",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // PARAMS ::= TIPO tkn_coma PARAMS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMS",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // PARAMS ::= TIPO tkn_id tkn_coma PARAMS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMS",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // ARGS ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARGS",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // ARGS ::= ARGSPARAMS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARGS",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // PROTOPARAMS ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROTOPARAMS",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // PROTOPARAMS ::= PARAMS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROTOPARAMS",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // FUNCIONPARAMS ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCIONPARAMS",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // FUNCIONPARAMS ::= DECLAPARAM 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCIONPARAMS",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // INICIO ::= MAIN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // INICIO ::= PROTOTIPO INICIO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // FUNCIONES ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCIONES",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // FUNCIONES ::= FUNCION FUNCIONES 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCIONES",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // IDINT ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IDINT",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // IDINT ::= RETURN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IDINT",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // IDINT ::= ASIGN RETURN tkn_coma IDINT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IDINT",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // IDINT ::= RETURN tkn_coma IDINT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IDINT",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // DECLARACION ::= TIPO IDINT tkn_puntocoma 
            {
              Object RESULT =null;
		System.out.println("DENTRO DE UNA DECLARACION");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // ASIGN ::= tkn_id tkn_oprel 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGN",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // MAIN ::= tkn_int tkn_main tkn_parentesisiz tkn_parentesisde tkn_llaveiz BLOQUE tkn_return tkn_num tkn_puntocoma tkn_llaveder FUNCIONES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("MAIN",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

