
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Sep 01 10:56:41 CST 2022
//----------------------------------------------------

package Compiladorcito;

import java_cup.runtime.*;
import java.util.ArrayList;
import java.util.*;
import java.io.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Sep 01 10:56:41 CST 2022
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\122\000\002\002\004\000\002\031\015\000\002\031" +
    "\015\000\002\031\015\000\002\031\015\000\002\006\005" +
    "\000\002\017\005\000\002\017\003\000\002\017\007\000" +
    "\002\017\005\000\002\017\007\000\002\017\005\000\002" +
    "\017\002\000\002\033\004\000\002\033\002\000\002\002" +
    "\004\000\002\002\003\000\002\026\003\000\002\026\002" +
    "\000\002\032\003\000\002\032\002\000\002\042\003\000" +
    "\002\042\002\000\002\035\006\000\002\035\005\000\002" +
    "\035\003\000\002\035\004\000\002\027\006\000\002\027" +
    "\004\000\002\025\015\000\002\025\015\000\002\025\015" +
    "\000\002\041\005\000\002\041\003\000\002\037\012\000" +
    "\002\037\007\000\002\030\010\000\002\030\003\000\002" +
    "\004\012\000\002\004\012\000\002\004\012\000\002\012" +
    "\006\000\002\012\004\000\002\012\002\000\002\005\021" +
    "\000\002\003\011\000\002\007\004\000\002\007\004\000" +
    "\002\007\004\000\002\007\004\000\002\007\004\000\002" +
    "\007\004\000\002\007\004\000\002\007\004\000\002\007" +
    "\004\000\002\007\002\000\002\010\005\000\002\010\005" +
    "\000\002\010\007\000\002\010\007\000\002\010\005\000" +
    "\002\010\003\000\002\013\005\000\002\014\003\000\002" +
    "\014\003\000\002\015\003\000\002\015\003\000\002\015" +
    "\003\000\002\016\003\000\002\016\003\000\002\016\003" +
    "\000\002\016\003\000\002\016\003\000\002\020\011\000" +
    "\002\020\007\000\002\022\010\000\002\023\005\000\002" +
    "\023\005\000\002\024\012\000\002\034\003\000\002\034" +
    "\003\000\002\034\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\345\000\014\003\013\012\014\013\010\035\015\036" +
    "\012\001\002\000\004\002\ufff1\001\002\000\014\003\uffdc" +
    "\012\uffdc\013\uffdc\035\uffdc\036\uffdc\001\002\000\004\002" +
    "\347\001\002\000\014\003\013\012\014\013\010\035\015" +
    "\036\012\001\002\000\014\003\uffbb\021\uffbb\037\uffbb\040" +
    "\uffbb\043\uffbb\001\002\000\006\037\332\040\ufff5\001\002" +
    "\000\014\003\uffbd\021\uffbd\037\uffbd\040\uffbd\043\uffbd\001" +
    "\002\000\010\010\320\037\uffb9\040\uffb9\001\002\000\014" +
    "\003\uffbc\021\uffbc\037\uffbc\040\uffbc\043\uffbc\001\002\000" +
    "\010\010\016\037\uffba\040\uffba\001\002\000\004\020\017" +
    "\001\002\000\004\021\020\001\002\000\006\003\021\022" +
    "\022\001\002\000\040\003\041\012\014\013\010\014\035" +
    "\015\044\016\046\020\037\026\034\027\uffca\030\025\031" +
    "\047\035\040\036\012\037\045\042\053\001\002\000\040" +
    "\003\041\012\014\013\010\014\035\015\044\016\046\020" +
    "\037\026\034\027\uffca\030\025\031\047\035\040\036\012" +
    "\037\045\042\053\001\002\000\014\021\uffc4\024\307\025" +
    "\306\040\uffc4\041\uffc4\001\002\000\046\003\041\012\014" +
    "\013\010\014\035\015\044\016\046\020\037\023\uffca\026" +
    "\034\027\uffca\030\025\031\047\034\uffca\035\040\036\012" +
    "\037\045\040\uffca\042\053\001\002\000\004\020\275\001" +
    "\002\000\046\003\041\012\014\013\010\014\035\015\044" +
    "\016\046\020\037\023\uffca\026\034\027\uffca\030\025\031" +
    "\047\034\uffca\035\040\036\012\037\045\040\uffca\042\053" +
    "\001\002\000\046\003\041\012\014\013\010\014\035\015" +
    "\044\016\046\020\037\023\uffca\026\034\027\uffca\030\025" +
    "\031\047\034\uffca\035\040\036\012\037\045\040\uffca\042" +
    "\053\001\002\000\046\003\041\012\014\013\010\014\035" +
    "\015\044\016\046\020\037\023\uffca\026\034\027\uffca\030" +
    "\025\031\047\034\uffca\035\040\036\012\037\045\040\uffca" +
    "\042\053\001\002\000\046\003\041\012\014\013\010\014" +
    "\035\015\044\016\046\020\037\023\uffca\026\034\027\uffca" +
    "\030\025\031\047\034\uffca\035\040\036\012\037\045\040" +
    "\uffca\042\053\001\002\000\004\027\220\001\002\000\046" +
    "\003\041\012\014\013\010\014\035\015\044\016\046\020" +
    "\037\023\uffca\026\034\027\uffca\030\025\031\047\034\uffca" +
    "\035\040\036\012\037\045\040\uffca\042\053\001\002\000" +
    "\004\020\201\001\002\000\020\007\uffc0\011\uffc0\021\uffc0" +
    "\024\uffc0\025\uffc0\040\uffc0\041\uffc0\001\002\000\006\037" +
    "\157\040\ufff5\001\002\000\010\014\035\037\064\042\053" +
    "\001\002\000\014\003\uffba\021\uffba\037\uffba\040\uffba\043" +
    "\uffba\001\002\000\014\003\uffb9\021\uffb9\037\uffb9\040\uffb9" +
    "\043\uffb9\001\002\000\046\003\041\012\014\013\010\014" +
    "\035\015\044\016\046\020\037\023\uffca\026\034\027\uffca" +
    "\030\025\031\047\034\uffca\035\040\036\012\037\045\040" +
    "\uffca\042\053\001\002\000\046\003\041\012\014\013\010" +
    "\014\035\015\044\016\046\020\037\023\uffca\026\034\027" +
    "\uffca\030\025\031\047\034\uffca\035\040\036\012\037\045" +
    "\040\uffca\042\053\001\002\000\004\020\120\001\002\000" +
    "\014\007\uffbe\011\uffbe\020\106\032\105\033\104\001\002" +
    "\000\004\020\076\001\002\000\004\020\067\001\002\000" +
    "\046\003\041\012\014\013\010\014\035\015\044\016\046" +
    "\020\037\023\uffca\026\034\027\uffca\030\025\031\047\034" +
    "\uffca\035\040\036\012\037\045\040\uffca\042\053\001\002" +
    "\000\006\007\063\011\062\001\002\000\004\041\054\001" +
    "\002\000\020\007\uffbf\011\uffbf\021\uffbf\024\uffbf\025\uffbf" +
    "\040\uffbf\041\uffbf\001\002\000\040\003\041\012\014\013" +
    "\010\014\035\015\044\016\046\020\037\026\034\030\025" +
    "\031\047\034\uffca\035\040\036\012\037\045\042\053\001" +
    "\002\000\004\034\056\001\002\000\040\003\041\012\014" +
    "\013\010\014\035\015\044\016\046\020\037\026\034\030" +
    "\025\031\047\035\040\036\012\037\045\040\uffca\042\053" +
    "\001\002\000\004\040\060\001\002\000\046\003\uffb6\012" +
    "\uffb6\013\uffb6\014\uffb6\015\uffb6\016\uffb6\020\uffb6\023\uffb6" +
    "\026\uffb6\027\uffb6\030\uffb6\031\uffb6\034\uffb6\035\uffb6\036" +
    "\uffb6\037\uffb6\040\uffb6\042\uffb6\001\002\000\010\014\035" +
    "\037\064\042\053\001\002\000\010\014\uffc1\037\uffc1\042" +
    "\uffc1\001\002\000\010\014\uffc2\037\uffc2\042\uffc2\001\002" +
    "\000\020\007\uffbe\011\uffbe\021\uffbe\024\uffbe\025\uffbe\040" +
    "\uffbe\041\uffbe\001\002\000\014\021\uffc3\024\uffc3\025\uffc3" +
    "\040\uffc3\041\uffc3\001\002\000\012\023\uffd2\027\uffd2\034" +
    "\uffd2\040\uffd2\001\002\000\002\001\002\000\004\043\071" +
    "\001\002\000\004\051\072\001\002\000\004\037\073\001" +
    "\002\000\004\021\074\001\002\000\004\040\075\001\002" +
    "\000\046\003\uffb3\012\uffb3\013\uffb3\014\uffb3\015\uffb3\016" +
    "\uffb3\020\uffb3\023\uffb3\026\uffb3\027\uffb3\030\uffb3\031\uffb3" +
    "\034\uffb3\035\uffb3\036\uffb3\037\uffb3\040\uffb3\042\uffb3\001" +
    "\002\000\012\014\035\020\037\037\064\042\053\001\002" +
    "\000\004\021\100\001\002\000\004\022\101\001\002\000" +
    "\040\003\041\012\014\013\010\014\035\015\044\016\046" +
    "\020\037\023\uffca\026\034\030\025\031\047\035\040\036" +
    "\012\037\045\042\053\001\002\000\004\023\103\001\002" +
    "\000\046\003\uffd4\012\uffd4\013\uffd4\014\uffd4\015\uffd4\016" +
    "\uffd4\020\uffd4\023\uffd4\026\uffd4\027\uffd4\030\uffd4\031\uffd4" +
    "\034\uffd4\035\uffd4\036\uffd4\037\uffd4\040\uffd4\042\uffd4\001" +
    "\002\000\004\040\117\001\002\000\004\040\116\001\002" +
    "\000\006\021\uffeb\037\110\001\002\000\004\021\uffec\001" +
    "\002\000\006\021\uffe0\043\114\001\002\000\004\021\112" +
    "\001\002\000\004\040\113\001\002\000\046\003\uffde\012" +
    "\uffde\013\uffde\014\uffde\015\uffde\016\uffde\020\uffde\023\uffde" +
    "\026\uffde\027\uffde\030\uffde\031\uffde\034\uffde\035\uffde\036" +
    "\uffde\037\uffde\040\uffde\042\uffde\001\002\000\004\037\110" +
    "\001\002\000\004\021\uffe1\001\002\000\046\003\uffb5\012" +
    "\uffb5\013\uffb5\014\uffb5\015\uffb5\016\uffb5\020\uffb5\023\uffb5" +
    "\026\uffb5\027\uffb5\030\uffb5\031\uffb5\034\uffb5\035\uffb5\036" +
    "\uffb5\037\uffb5\040\uffb5\042\uffb5\001\002\000\046\003\uffb4" +
    "\012\uffb4\013\uffb4\014\uffb4\015\uffb4\016\uffb4\020\uffb4\023" +
    "\uffb4\026\uffb4\027\uffb4\030\uffb4\031\uffb4\034\uffb4\035\uffb4" +
    "\036\uffb4\037\uffb4\040\uffb4\042\uffb4\001\002\000\014\003" +
    "\122\014\035\020\037\037\064\042\053\001\002\000\004" +
    "\021\135\001\002\000\004\021\123\001\002\000\004\022" +
    "\124\001\002\000\040\003\041\012\014\013\010\014\035" +
    "\015\044\016\046\020\037\023\uffca\026\034\030\025\031" +
    "\047\035\040\036\012\037\045\042\053\001\002\000\004" +
    "\023\126\001\002\000\050\003\uffd6\012\uffd6\013\uffd6\014" +
    "\uffd6\015\uffd6\016\uffd6\017\130\020\uffd6\023\uffd6\026\uffd6" +
    "\027\uffd6\030\uffd6\031\uffd6\034\uffd6\035\uffd6\036\uffd6\037" +
    "\uffd6\040\uffd6\042\uffd6\001\002\000\046\003\uffda\012\uffda" +
    "\013\uffda\014\uffda\015\uffda\016\uffda\020\uffda\023\uffda\026" +
    "\uffda\027\uffda\030\uffda\031\uffda\034\uffda\035\uffda\036\uffda" +
    "\037\uffda\040\uffda\042\uffda\001\002\000\006\015\044\022" +
    "\132\001\002\000\046\003\uffd7\012\uffd7\013\uffd7\014\uffd7" +
    "\015\uffd7\016\uffd7\020\uffd7\023\uffd7\026\uffd7\027\uffd7\030" +
    "\uffd7\031\uffd7\034\uffd7\035\uffd7\036\uffd7\037\uffd7\040\uffd7" +
    "\042\uffd7\001\002\000\040\003\041\012\014\013\010\014" +
    "\035\015\044\016\046\020\037\023\uffca\026\034\030\025" +
    "\031\047\035\040\036\012\037\045\042\053\001\002\000" +
    "\004\023\134\001\002\000\046\003\uffd8\012\uffd8\013\uffd8" +
    "\014\uffd8\015\uffd8\016\uffd8\020\uffd8\023\uffd8\026\uffd8\027" +
    "\uffd8\030\uffd8\031\uffd8\034\uffd8\035\uffd8\036\uffd8\037\uffd8" +
    "\040\uffd8\042\uffd8\001\002\000\006\003\136\022\137\001" +
    "\002\000\040\003\041\012\014\013\010\014\035\015\044" +
    "\016\046\020\037\023\uffca\026\034\030\025\031\047\035" +
    "\040\036\012\037\045\042\053\001\002\000\040\003\041" +
    "\012\014\013\010\014\035\015\044\016\046\020\037\023" +
    "\uffca\026\034\030\025\031\047\035\040\036\012\037\045" +
    "\042\053\001\002\000\004\023\141\001\002\000\050\003" +
    "\uffd6\012\uffd6\013\uffd6\014\uffd6\015\uffd6\016\uffd6\017\130" +
    "\020\uffd6\023\uffd6\026\uffd6\027\uffd6\030\uffd6\031\uffd6\034" +
    "\uffd6\035\uffd6\036\uffd6\037\uffd6\040\uffd6\042\uffd6\001\002" +
    "\000\046\003\uffdb\012\uffdb\013\uffdb\014\uffdb\015\uffdb\016" +
    "\uffdb\020\uffdb\023\uffdb\026\uffdb\027\uffdb\030\uffdb\031\uffdb" +
    "\034\uffdb\035\uffdb\036\uffdb\037\uffdb\040\uffdb\042\uffdb\001" +
    "\002\000\004\023\144\001\002\000\050\003\uffd6\012\uffd6" +
    "\013\uffd6\014\uffd6\015\uffd6\016\uffd6\017\130\020\uffd6\023" +
    "\uffd6\026\uffd6\027\uffd6\030\uffd6\031\uffd6\034\uffd6\035\uffd6" +
    "\036\uffd6\037\uffd6\040\uffd6\042\uffd6\001\002\000\046\003" +
    "\uffd9\012\uffd9\013\uffd9\014\uffd9\015\uffd9\016\uffd9\020\uffd9" +
    "\023\uffd9\026\uffd9\027\uffd9\030\uffd9\031\uffd9\034\uffd9\035" +
    "\uffd9\036\uffd9\037\uffd9\040\uffd9\042\uffd9\001\002\000\012" +
    "\023\uffce\027\uffce\034\uffce\040\uffce\001\002\000\012\023" +
    "\uffcb\027\uffcb\034\uffcb\040\uffcb\001\002\000\004\021\151" +
    "\001\002\000\014\021\uffc5\024\153\025\152\040\uffc5\041" +
    "\uffc5\001\002\000\012\014\035\020\037\037\064\042\053" +
    "\001\002\000\012\014\035\020\037\037\064\042\053\001" +
    "\002\000\010\021\uffc7\040\uffc7\041\uffc7\001\002\000\010" +
    "\021\uffc6\040\uffc6\041\uffc6\001\002\000\004\040\200\001" +
    "\002\000\010\011\161\040\ufffa\043\160\001\002\000\006" +
    "\037\167\040\ufff5\001\002\000\010\037\163\042\164\053" +
    "\162\001\002\000\006\040\ufff6\043\175\001\002\000\004" +
    "\020\171\001\002\000\006\040\ufff8\043\165\001\002\000" +
    "\006\037\167\040\ufff5\001\002\000\004\040\ufff9\001\002" +
    "\000\010\011\170\040\ufffa\043\160\001\002\000\006\042" +
    "\164\053\162\001\002\000\006\021\uffeb\037\110\001\002" +
    "\000\004\021\173\001\002\000\004\040\174\001\002\000" +
    "\046\003\uffdf\012\uffdf\013\uffdf\014\uffdf\015\uffdf\016\uffdf" +
    "\020\uffdf\023\uffdf\026\uffdf\027\uffdf\030\uffdf\031\uffdf\034" +
    "\uffdf\035\uffdf\036\uffdf\037\uffdf\040\uffdf\042\uffdf\001\002" +
    "\000\006\037\167\040\ufff5\001\002\000\004\040\ufff7\001" +
    "\002\000\004\040\ufffb\001\002\000\046\003\ufffc\012\ufffc" +
    "\013\ufffc\014\ufffc\015\ufffc\016\ufffc\020\ufffc\023\ufffc\026" +
    "\ufffc\027\ufffc\030\ufffc\031\ufffc\034\ufffc\035\ufffc\036\ufffc" +
    "\037\ufffc\040\ufffc\042\ufffc\001\002\000\004\035\202\001" +
    "\002\000\004\037\203\001\002\000\004\011\204\001\002" +
    "\000\004\042\205\001\002\000\004\040\206\001\002\000" +
    "\012\014\035\020\037\037\064\042\053\001\002\000\004" +
    "\040\210\001\002\000\004\037\211\001\002\000\004\032" +
    "\212\001\002\000\004\021\213\001\002\000\004\022\214" +
    "\001\002\000\040\003\041\012\014\013\010\014\035\015" +
    "\044\016\046\020\037\023\uffca\026\034\030\025\031\047" +
    "\035\040\036\012\037\045\042\053\001\002\000\004\023" +
    "\216\001\002\000\046\003\uffd5\012\uffd5\013\uffd5\014\uffd5" +
    "\015\uffd5\016\uffd5\020\uffd5\023\uffd5\026\uffd5\027\uffd5\030" +
    "\uffd5\031\uffd5\034\uffd5\035\uffd5\036\uffd5\037\uffd5\040\uffd5" +
    "\042\uffd5\001\002\000\012\023\uffcf\027\uffcf\034\uffcf\040" +
    "\uffcf\001\002\000\004\042\221\001\002\000\004\040\222" +
    "\001\002\000\006\003\223\023\224\001\002\000\016\002" +
    "\ufff3\003\041\012\014\013\010\035\040\036\012\001\002" +
    "\000\016\002\ufff3\003\041\012\014\013\010\035\040\036" +
    "\012\001\002\000\016\002\ufff3\003\041\012\014\013\010" +
    "\035\040\036\012\001\002\000\004\002\000\001\002\000" +
    "\006\003\230\037\231\001\002\000\004\020\256\001\002" +
    "\000\004\020\232\001\002\000\016\003\041\012\014\013" +
    "\010\021\uffef\035\040\036\012\001\002\000\004\021\ufff0" +
    "\001\002\000\004\021\241\001\002\000\004\037\236\001" +
    "\002\000\006\021\uffe5\043\237\001\002\000\014\003\041" +
    "\012\014\013\010\035\040\036\012\001\002\000\004\021" +
    "\uffe6\001\002\000\004\022\242\001\002\000\040\003\041" +
    "\012\014\013\010\014\035\015\044\016\046\020\037\026" +
    "\034\027\uffca\030\025\031\047\035\040\036\012\037\045" +
    "\042\053\001\002\000\004\027\244\001\002\000\012\003" +
    "\246\037\250\042\251\053\245\001\002\000\004\040\uffb0" +
    "\001\002\000\004\040\254\001\002\000\004\040\252\001" +
    "\002\000\004\040\uffb2\001\002\000\004\040\uffb1\001\002" +
    "\000\004\023\253\001\002\000\016\002\uffe4\003\uffe4\012" +
    "\uffe4\013\uffe4\035\uffe4\036\uffe4\001\002\000\004\023\255" +
    "\001\002\000\016\002\uffe2\003\uffe2\012\uffe2\013\uffe2\035" +
    "\uffe2\036\uffe2\001\002\000\016\003\041\012\014\013\010" +
    "\021\uffef\035\040\036\012\001\002\000\004\021\260\001" +
    "\002\000\004\022\261\001\002\000\040\003\041\012\014" +
    "\013\010\014\035\015\044\016\046\020\037\026\034\027" +
    "\uffca\030\025\031\047\035\040\036\012\037\045\042\053" +
    "\001\002\000\004\027\263\001\002\000\010\037\250\042" +
    "\251\053\245\001\002\000\004\040\265\001\002\000\004" +
    "\023\266\001\002\000\016\002\uffe3\003\uffe3\012\uffe3\013" +
    "\uffe3\035\uffe3\036\uffe3\001\002\000\004\002\ufff4\001\002" +
    "\000\004\002\ufffd\001\002\000\012\023\uffd1\027\uffd1\034" +
    "\uffd1\040\uffd1\001\002\000\012\023\uffd0\027\uffd0\034\uffd0" +
    "\040\uffd0\001\002\000\012\023\uffcc\027\uffcc\034\uffcc\040" +
    "\uffcc\001\002\000\012\023\uffd3\027\uffd3\034\uffd3\040\uffd3" +
    "\001\002\000\004\052\276\001\002\000\006\021\300\043" +
    "\277\001\002\000\004\037\302\001\002\000\004\040\301" +
    "\001\002\000\046\003\uffb7\012\uffb7\013\uffb7\014\uffb7\015" +
    "\uffb7\016\uffb7\020\uffb7\023\uffb7\026\uffb7\027\uffb7\030\uffb7" +
    "\031\uffb7\034\uffb7\035\uffb7\036\uffb7\037\uffb7\040\uffb7\042" +
    "\uffb7\001\002\000\004\021\303\001\002\000\004\040\304" +
    "\001\002\000\046\003\uffb8\012\uffb8\013\uffb8\014\uffb8\015" +
    "\uffb8\016\uffb8\020\uffb8\023\uffb8\026\uffb8\027\uffb8\030\uffb8" +
    "\031\uffb8\034\uffb8\035\uffb8\036\uffb8\037\uffb8\040\uffb8\042" +
    "\uffb8\001\002\000\012\023\uffcd\027\uffcd\034\uffcd\040\uffcd" +
    "\001\002\000\012\014\035\020\037\037\064\042\053\001" +
    "\002\000\012\014\035\020\037\037\064\042\053\001\002" +
    "\000\010\021\uffc9\040\uffc9\041\uffc9\001\002\000\010\021" +
    "\uffc8\040\uffc8\041\uffc8\001\002\000\004\027\313\001\002" +
    "\000\004\042\314\001\002\000\004\040\315\001\002\000" +
    "\004\023\316\001\002\000\016\002\ufff3\003\041\012\014" +
    "\013\010\035\040\036\012\001\002\000\004\002\ufffe\001" +
    "\002\000\004\020\321\001\002\000\004\021\322\001\002" +
    "\000\004\022\323\001\002\000\040\003\041\012\014\013" +
    "\010\014\035\015\044\016\046\020\037\026\034\027\uffca" +
    "\030\025\031\047\035\040\036\012\037\045\042\053\001" +
    "\002\000\004\027\325\001\002\000\004\042\326\001\002" +
    "\000\004\040\327\001\002\000\004\023\330\001\002\000" +
    "\016\002\ufff3\003\041\012\014\013\010\035\040\036\012" +
    "\001\002\000\004\002\uffff\001\002\000\012\011\170\020" +
    "\333\040\ufffa\043\160\001\002\000\016\003\041\012\014" +
    "\013\010\021\uffed\035\040\036\012\001\002\000\004\021" +
    "\344\001\002\000\004\021\uffee\001\002\000\010\021\uffe8" +
    "\037\340\043\337\001\002\000\014\003\041\012\014\013" +
    "\010\035\040\036\012\001\002\000\006\021\uffe7\043\341" +
    "\001\002\000\014\003\041\012\014\013\010\035\040\036" +
    "\012\001\002\000\004\021\uffea\001\002\000\004\021\uffe9" +
    "\001\002\000\004\040\345\001\002\000\014\003\uffdd\012" +
    "\uffdd\013\uffdd\035\uffdd\036\uffdd\001\002\000\004\002\ufff2" +
    "\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\345\000\014\002\005\006\004\016\010\030\006\031" +
    "\003\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\002\345\006\004\016\010\030\006\031" +
    "\003\001\001\000\002\001\001\000\004\017\155\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\036\003\025\004\030\005\047\006\027\007" +
    "\311\010\051\013\022\015\050\016\035\020\032\022\042" +
    "\023\023\024\026\037\041\001\001\000\036\003\025\004" +
    "\030\005\047\006\027\007\031\010\051\013\022\015\050" +
    "\016\035\020\032\022\042\023\023\024\026\037\041\001" +
    "\001\000\002\001\001\000\036\003\025\004\030\005\047" +
    "\006\027\007\304\010\051\013\022\015\050\016\035\020" +
    "\032\022\042\023\023\024\026\037\041\001\001\000\002" +
    "\001\001\000\036\003\025\004\030\005\047\006\027\007" +
    "\273\010\051\013\022\015\050\016\035\020\032\022\042" +
    "\023\023\024\026\037\041\001\001\000\036\003\025\004" +
    "\030\005\047\006\027\007\272\010\051\013\022\015\050" +
    "\016\035\020\032\022\042\023\023\024\026\037\041\001" +
    "\001\000\036\003\025\004\030\005\047\006\027\007\271" +
    "\010\051\013\022\015\050\016\035\020\032\022\042\023" +
    "\023\024\026\037\041\001\001\000\036\003\025\004\030" +
    "\005\047\006\027\007\270\010\051\013\022\015\050\016" +
    "\035\020\032\022\042\023\023\024\026\037\041\001\001" +
    "\000\002\001\001\000\036\003\025\004\030\005\047\006" +
    "\027\007\216\010\051\013\022\015\050\016\035\020\032" +
    "\022\042\023\023\024\026\037\041\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\017\155\001\001\000\006" +
    "\013\147\015\050\001\001\000\002\001\001\000\002\001" +
    "\001\000\036\003\025\004\030\005\047\006\027\007\146" +
    "\010\051\013\022\015\050\016\035\020\032\022\042\023" +
    "\023\024\026\037\041\001\001\000\036\003\025\004\030" +
    "\005\047\006\027\007\145\010\051\013\022\015\050\016" +
    "\035\020\032\022\042\023\023\024\026\037\041\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\036\003\025\004\030\005\047\006\027" +
    "\007\065\010\051\013\022\015\050\016\035\020\032\022" +
    "\042\023\023\024\026\037\041\001\001\000\004\014\060" +
    "\001\001\000\002\001\001\000\002\001\001\000\036\003" +
    "\025\004\030\005\047\006\027\007\054\010\051\013\022" +
    "\015\050\016\035\020\032\022\042\023\023\024\026\037" +
    "\041\001\001\000\002\001\001\000\036\003\025\004\030" +
    "\005\047\006\027\007\056\010\051\013\022\015\050\016" +
    "\035\020\032\022\042\023\023\024\026\037\041\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\015\064\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\021\067\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\010\076\013\022\015\050\001\001\000\002\001\001" +
    "\000\002\001\001\000\036\003\025\004\030\005\047\006" +
    "\027\007\101\010\051\013\022\015\050\016\035\020\032" +
    "\022\042\023\023\024\026\037\041\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\041\106\042\110\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\041\114\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\010\120\013\022" +
    "\015\050\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\036\003\025\004\030\005\047\006\027" +
    "\007\124\010\051\013\022\015\050\016\035\020\032\022" +
    "\042\023\023\024\026\037\041\001\001\000\002\001\001" +
    "\000\004\012\126\001\001\000\002\001\001\000\004\004" +
    "\130\001\001\000\002\001\001\000\036\003\025\004\030" +
    "\005\047\006\027\007\132\010\051\013\022\015\050\016" +
    "\035\020\032\022\042\023\023\024\026\037\041\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\036\003\025\004\030\005\047\006\027\007\142\010\051" +
    "\013\022\015\050\016\035\020\032\022\042\023\023\024" +
    "\026\037\041\001\001\000\036\003\025\004\030\005\047" +
    "\006\027\007\137\010\051\013\022\015\050\016\035\020" +
    "\032\022\042\023\023\024\026\037\041\001\001\000\002" +
    "\001\001\000\004\012\141\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\012\144\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\010\154\013\022\015\050\001\001" +
    "\000\010\010\153\013\022\015\050\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\017\176\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\017\165" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\041\106\042\171\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\017\175\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\010\206\013\022" +
    "\015\050\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\036" +
    "\003\025\004\030\005\047\006\027\007\214\010\051\013" +
    "\022\015\050\016\035\020\032\022\042\023\023\024\026" +
    "\037\041\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\016\226\025\224\033\267\001\001\000" +
    "\010\016\226\025\224\033\225\001\001\000\010\016\226" +
    "\025\224\033\266\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\016\234" +
    "\026\233\027\232\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\016\234" +
    "\027\237\001\001\000\002\001\001\000\002\001\001\000" +
    "\036\003\025\004\030\005\047\006\027\007\242\010\051" +
    "\013\022\015\050\016\035\020\032\022\042\023\023\024" +
    "\026\037\041\001\001\000\002\001\001\000\004\034\246" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\016\234\026\256\027\232\001\001\000\002\001\001" +
    "\000\002\001\001\000\036\003\025\004\030\005\047\006" +
    "\027\007\261\010\051\013\022\015\050\016\035\020\032" +
    "\022\042\023\023\024\026\037\041\001\001\000\002\001" +
    "\001\000\004\034\263\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\010\310\013\022\015\050\001\001\000\010" +
    "\010\307\013\022\015\050\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\016\226\025\224\033" +
    "\316\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\036\003\025\004\030\005" +
    "\047\006\027\007\323\010\051\013\022\015\050\016\035" +
    "\020\032\022\042\023\023\024\026\037\041\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\016\226\025\224\033\330\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\016\335\032\333" +
    "\035\334\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\016\335\035\342\001\001\000\002" +
    "\001\001\000\006\016\335\035\341\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



     ArrayList gramas = new ArrayList();
    public int cont = 0;
    public int maximo(){
    int a=5;
    return a;
}
    ArrayList errores=new ArrayList();
    public Symbol s;
    @Override
    public void syntax_error (Symbol s){
        if(s.left==-1){
        }else{
                errores.add("Syntax error en la línea: " + (s.left) + " , columna: " +(s.right)+ " con el símbolo = "+(s.value));
    }
}
    @Override
    public void unrecovered_syntax_error(Symbol s){
    if(s.left==-1){
    }else{
        errores.add("Error desconocido, por favor revise la linea: " + (s.left ) + " y columna:  " + (s.right )+ "Con simbolo: "+s.value);
    }    
    }
    public Symbol getS(){
        return this.s;
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // RETURN ::= tkn_caracter 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("RETURN",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // RETURN ::= tkn_num 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("RETURN",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // RETURN ::= tkn_id 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("RETURN",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // SCANF ::= tkn_scanf tkn_parentesisiz CONSTSTR tkn_coma tkn_ampersand tkn_id tkn_parentesisde tkn_puntocoma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SCANF",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // CONTADOR ::= tkn_id tkn_decrement tkn_puntocoma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTADOR",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // CONTADOR ::= tkn_id tkn_increment tkn_puntocoma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTADOR",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // TERNARIO ::= CONDICION tkn_ternario BLOQUE tkn_dospuntos BLOQUE tkn_puntocoma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TERNARIO",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // PRINTF ::= tkn_printf tkn_parentesisiz tkn_cadena tkn_parentesisde tkn_puntocoma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRINTF",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // PRINTF ::= tkn_printf tkn_parentesisiz tkn_cadena tkn_coma tkn_id tkn_parentesisde tkn_puntocoma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRINTF",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // TIPO ::= error 
            {
              Object RESULT =null;
		parser.errores.add("Tipo de dato incorrecto");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // TIPO ::= tkn_int 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // TIPO ::= tkn_charp 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // TIPO ::= tkn_intp 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // TIPO ::= tkn_char 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // VALOR ::= tkn_id 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // VALOR ::= tkn_num 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // VALOR ::= tkn_digitos 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // OPCONDICION ::= tkn_igual 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPCONDICION",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // OPCONDICION ::= tkn_oprel 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPCONDICION",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // CONDICIONP ::= VALOR OPCONDICION VALOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICIONP",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // CONDICION ::= CONDICIONP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICION",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // CONDICION ::= tkn_parentesisiz CONDICIONP tkn_parentesisde 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICION",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // CONDICION ::= tkn_parentesisiz CONDICIONP tkn_parentesisde tkn_or CONDICION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICION",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // CONDICION ::= tkn_parentesisiz CONDICIONP tkn_parentesisde tkn_and CONDICION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICION",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // CONDICION ::= CONDICIONP tkn_or CONDICION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICION",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // CONDICION ::= CONDICIONP tkn_and CONDICION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICION",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // BLOQUE ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // BLOQUE ::= LLAMADO BLOQUE 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // BLOQUE ::= SCANF BLOQUE 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // BLOQUE ::= CONTADOR BLOQUE 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // BLOQUE ::= TERNARIO BLOQUE 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // BLOQUE ::= PRINTF BLOQUE 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // BLOQUE ::= DECLARACION BLOQUE 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // BLOQUE ::= IF BLOQUE 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // BLOQUE ::= FOR BLOQUE 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // BLOQUE ::= WHILE BLOQUE 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // WHILE ::= tkn_while tkn_parentesisiz CONDICION tkn_parentesisde tkn_llaveiz BLOQUE tkn_llaveder 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("WHILE",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // FOR ::= tkn_for tkn_parentesisiz tkn_int tkn_id tkn_igual tkn_num tkn_puntocoma CONDICION tkn_puntocoma tkn_id tkn_increment tkn_parentesisde tkn_llaveiz BLOQUE tkn_llaveder 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FOR",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-14)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // ELSE ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ELSE",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // ELSE ::= tkn_else IF 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ELSE",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // ELSE ::= tkn_else tkn_llaveiz BLOQUE tkn_llaveder 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ELSE",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // IF ::= tkn_if tkn_parentesisiz CONDICION tkn_parentesisde error BLOQUE tkn_llaveder ELSE 
            {
              Object RESULT =null;
		parser.errores.add("\n bloque if sin llave de apertura '{'");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IF",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // IF ::= tkn_if tkn_parentesisiz error tkn_parentesisde tkn_llaveiz BLOQUE tkn_llaveder ELSE 
            {
              Object RESULT =null;
		parser.errores.add("\nbloque if sin condición");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IF",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // IF ::= tkn_if tkn_parentesisiz CONDICION tkn_parentesisde tkn_llaveiz BLOQUE tkn_llaveder ELSE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IF",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // PROTOTIPO ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROTOTIPO",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // PROTOTIPO ::= TIPO tkn_id tkn_parentesisiz PROTOPARAMS tkn_parentesisde tkn_puntocoma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROTOTIPO",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // LLAMADO ::= tkn_id tkn_parentesisiz ARGS tkn_parentesisde tkn_puntocoma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LLAMADO",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // LLAMADO ::= TIPO tkn_id tkn_igual tkn_id tkn_parentesisiz ARGS tkn_parentesisde tkn_puntocoma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LLAMADO",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // ARGSPARAMS ::= tkn_id 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARGSPARAMS",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // ARGSPARAMS ::= tkn_id tkn_coma ARGSPARAMS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARGSPARAMS",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // FUNCION ::= TIPO tkn_id tkn_parentesisiz FUNCIONPARAMS tkn_parentesisde tkn_llaveiz BLOQUE tkn_return error tkn_puntocoma tkn_llaveder 
            {
              Object RESULT =null;
		parser.errores.add("La función no retorna tipo de dato correcto");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCION",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // FUNCION ::= TIPO error tkn_parentesisiz FUNCIONPARAMS tkn_parentesisde tkn_llaveiz BLOQUE tkn_return RETURN tkn_puntocoma tkn_llaveder 
            {
              Object RESULT =null;
		parser.errores.add("Identificador incorrecto para la función");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCION",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // FUNCION ::= TIPO tkn_id tkn_parentesisiz FUNCIONPARAMS tkn_parentesisde tkn_llaveiz BLOQUE tkn_return RETURN tkn_puntocoma tkn_llaveder 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCION",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // DECLAPARAM ::= TIPO tkn_id 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLAPARAM",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // DECLAPARAM ::= TIPO tkn_id tkn_coma DECLAPARAM 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLAPARAM",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // PARAMS ::= TIPO tkn_id 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMS",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // PARAMS ::= TIPO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMS",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // PARAMS ::= TIPO tkn_coma PARAMS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMS",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // PARAMS ::= TIPO tkn_id tkn_coma PARAMS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMS",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // ARGS ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARGS",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // ARGS ::= ARGSPARAMS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARGS",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // PROTOPARAMS ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROTOPARAMS",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // PROTOPARAMS ::= PARAMS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROTOPARAMS",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // FUNCIONPARAMS ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCIONPARAMS",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // FUNCIONPARAMS ::= DECLAPARAM 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCIONPARAMS",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // INICIO ::= MAIN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // INICIO ::= PROTOTIPO INICIO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // FUNCIONES ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCIONES",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // FUNCIONES ::= FUNCION FUNCIONES 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCIONES",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // IDINT ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IDINT",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // IDINT ::= tkn_id tkn_igual tkn_caracter 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IDINT",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // IDINT ::= tkn_id tkn_igual tkn_caracter tkn_coma IDINT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IDINT",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // IDINT ::= tkn_id tkn_igual tkn_num 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IDINT",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // IDINT ::= tkn_id tkn_igual tkn_num tkn_coma IDINT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IDINT",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // IDINT ::= tkn_id 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IDINT",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // IDINT ::= tkn_id tkn_coma IDINT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IDINT",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // DECLARACION ::= TIPO IDINT tkn_puntocoma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // MAIN ::= tkn_int tkn_main tkn_parentesisiz tkn_parentesisde tkn_llaveiz BLOQUE tkn_return tkn_num tkn_puntocoma error FUNCIONES 
            {
              Object RESULT =null;
		parser.errores.add("\n llave de cierre ausente '}' en el main");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MAIN",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // MAIN ::= tkn_int tkn_main tkn_parentesisiz tkn_parentesisde error BLOQUE tkn_return tkn_num tkn_puntocoma tkn_llaveder FUNCIONES 
            {
              Object RESULT =null;
		parser.errores.add("\n llave de apertura ausente '{' en el main");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MAIN",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // MAIN ::= error tkn_main tkn_parentesisiz tkn_parentesisde tkn_llaveiz BLOQUE tkn_return tkn_num tkn_puntocoma tkn_llaveder FUNCIONES 
            {
              Object RESULT =null;
		parser.errores.add("\ntipo de dato int ausente en la función main");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MAIN",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // MAIN ::= tkn_int tkn_main tkn_parentesisiz tkn_parentesisde tkn_llaveiz BLOQUE tkn_return tkn_num tkn_puntocoma tkn_llaveder FUNCIONES 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("MAIN",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

